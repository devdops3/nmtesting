using log4net;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json;
using System.Web.Script.Serialization;
using System.Net;
using System.Xml;
using System.Xml.Serialization;
using System.Threading.Tasks;
using MotherFinanceModel;
using System.Net.Http;
using EbaReqResModel;

public class Service : IService
{
    public static OAuthToken Token = new OAuthToken();
    public class OAuthToken
    {
        public string Token { get; set; }
        public DateTime GeneratedTime { get; set; }
    }

    public static PgOAuthToken PgToken = new PgOAuthToken();
    public class PgOAuthToken
    {
        public string Token { get; set; }
        public DateTime GeneratedTime { get; set; }
    }

    public string GetData(int value)
    {
        return string.Format("You entered: {0}", value);
    }

    private static bool IsTokenNullOrExpire(OAuthToken oAuthToken)
    {
        if (string.IsNullOrEmpty(oAuthToken.Token))
        {
            return true;
        }
        else
        {
            TimeSpan diff = DateTime.Now.Subtract(Token.GeneratedTime);
            string tokenTimeOut = ConfigurationManager.AppSettings["TokenTimeout"].ToString();
            int tokentimeout = int.Parse(tokenTimeOut);
            if (diff.Minutes >= tokentimeout)
            {
                return true;
            }
        }
        return false;
    }

    public CompositeType GetDataUsingDataContract(CompositeType composite)
    {
        if (composite == null)
        {
            throw new ArgumentNullException("composite");
        }
        if (composite.BoolValue)
        {
            composite.StringValue += "Suffix";
        }
        return composite;
    }

    private static OAuthToken GetOAuthToken()
    {
        OAuthToken token = new OAuthToken();
        try
        {

            token.Token = Utils.oAuthRequest();
            token.GeneratedTime = DateTime.Now;
            Token = token;

        }
        catch (Exception e)
        {
            token.Token = Utils.oAuthRequest();
            token.GeneratedTime = DateTime.Now;
            Token = token;
        }
        return token;
    }

    private static PgOAuthToken GetPGOAuthToken()
    {
        PgOAuthToken token = new PgOAuthToken();
        try
        {

            token.Token = Utils.pgOAuthRequest();
            token.GeneratedTime = DateTime.Now;
            PgToken = token;

        }
        catch (Exception e)
        {
            token.Token = Utils.pgOAuthRequest();
            token.GeneratedTime = DateTime.Now;
            PgToken = token;
            writeLog("Error in Getting PGOAuthToken : " + e.ToString());
        }



        return token;
    }
    
    public string GetSkyNetPackages(string requestXML)
    {
        writeLog("GetSkyNetPackages started");
        writeLog("GetSkyNetPackages | requestXML : " + requestXML);
        return (new SkyNetManager()).GetSkyNetPackages(requestXML);
    }

    #region <-- Log -->
    private static ILog log = LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);
    private static void writeLog(string msg)
    {
        string maskSensitiveString = maskSensitiveData(msg);
        if (!string.IsNullOrEmpty(maskSensitiveString))
        {
            Logger.writeLog(maskSensitiveString, ref log);
        }
        else
        {
            Logger.writeLog(msg, ref log);
        }
    }
    public static string maskSensitiveData(string value)
    {
        string regularExpressionPattern = @"<Password>(.*?)<\/Password>";
        Regex regex = new Regex(regularExpressionPattern, RegexOptions.Singleline);
        MatchCollection collection = regex.Matches(value);
        if (collection.Count > 0)
        {
            Match m = collection[0];
            var stripped = m.Groups[1].Value;
            if (!string.IsNullOrEmpty(stripped))
            {
                return value.Replace(stripped, "XXXX-XXXX-XXXX");
            }

        }
        return "";
    }

    #endregion

    #region <-- Variable -->
    private static A2AAPIWCF.ServiceClient _agentWCF = new A2AAPIWCF.ServiceClient();
    private static fraudWs.Service1Client _fraudWCF = new fraudWs.Service1Client();
    private int agentID = 0;
    private string agentCode = string.Empty;
    private string agentName = string.Empty;
    private string branchCode = string.Empty;
    private string branchName = string.Empty;

    private string agentUserUniqueID = string.Empty;
    private string serviceFlatFee = string.Empty;
    private string servicePercent = string.Empty;

    private string serviceFee = string.Empty;
    private double serviceFeeDbl = 0;

    private string mobileNo = "";
    private string agentFlatFee = string.Empty;
    private string agentPercent = string.Empty;

    private string billerFlatFee = string.Empty;
    private string billerPercentFee = string.Empty;
    private string billerServiceFlatFee = string.Empty;
    private string billerServicePercentFee = string.Empty;

    private string agentFee = string.Empty;
    private double agentFeeDbl = 0;
    private double agentAmount = 0;
    private double billerAmount = 0;

    private string oneStopFlatFee = string.Empty;
    private string oneStopPercent = string.Empty;

    private string oneStopFee = string.Empty;
    private double oneStopFeeDbl = 0;

    private double BillerDiscountFee = 0;
    private double BillerServiceFee = 0;

    private readonly string billerID = string.Empty;
    private readonly string billerStatusID = string.Empty;
    private string billerName = string.Empty;
    private string billerSource = string.Empty;
    private string billerLogo = string.Empty;
    private string errMsg = string.Empty;

    double avalcredit = 0;
    string creditlimit = string.Empty;
    string creditterm = string.Empty;
    private string credittemrstart = string.Empty;
    private string isAutoCreditReset = string.Empty;
    private string isSendCreditResetEmail = "N";
    private DateTime dtNow = DateTime.Now;
    private DateTime dtStart = new DateTime();//from db
    private DateTime dtStartplusCreditterm = new DateTime();
    string smsStatus = "N";
    private string DeviceToken = string.Empty;
    private string DeviceInfo = string.Empty;
    string Duration;
    #endregion

    #region <-- Registration 04-Jan-2016 Tz -->
    public string RegisterReq(string reqXml)
    {
        int agnid;
        string code;
        string desp;
        string newagncode = string.Empty;
        string branchcode = string.Empty;
        string randompass = string.Empty;
        string userid = string.Empty;
        string errmsg = string.Empty;
        StringBuilder sb = new StringBuilder();
        Hashtable ht = Utils.getHTableFromXML(reqXml);
        registrationinfo reginfo = new registrationinfo();
        if (!IsValadateRegisterReq(ht, out code, out desp, out reginfo))
        {
            return Utils.getErrorRes(code, desp);
        }
        else
        {
            errmsg = "";

            if (createAgent(out newagncode, out agnid, out errmsg, reginfo))//Agent Creation
            {
                writeLog("$$$$$$$$Creating Agent OK Agent ID:" + agnid + "Agent Code:" + newagncode + "$$$$$$$$$$$$$$$$$$$$$$$");
                agentID = agnid;

                writeLog("Start Create Branch");
                if (createBranch(reginfo, agnid.ToString(), out branchcode))//Agent Branch Creation
                {
                    writeLog("$$$$$$$$$$$$$Creating Agent Branch OK BranchCode:" + branchcode + "$$$$$$$$$$$$$");
                    writeLog("Start Creat Agent User");

                    if (createAgentUser(agnid, branchcode, out randompass, out userid, out errmsg, reginfo))//Agent User Creation
                    {
                        writeLog("$$$$$$$$$$$$Creating Agent User OK agentid:" + agnid + "BranchCode:" + branchcode + "userid:" + userid + "$$$$$$$$$$$$$$$$");
                        code = "00";
                        desp = ConfigurationManager.AppSettings["ChannelCodeForSMS"].ToString() + " registration is successfully done. Please check SMS at " + reginfo.mboileno + "  for your login information.";
                        sb.Append("<RegisterRes>");
                        sb.Append("<Version>1.0</Version>");
                        sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                        sb.Append("<ResCode>" + code + "</ResCode>");
                        sb.Append("<ResDesc>" + desp + "</ResDesc>");
                        sb.Append("</RegisterRes>");
                        #region <-- Send SMS start -->
                        string sendername = reginfo.mboileno.StartsWith("099") || (reginfo.mboileno.StartsWith("097") && !reginfo.mboileno.StartsWith("0973")) ? "936600004" : ConfigurationManager.AppSettings["senderName"].ToString();//if mobile number is Orredoo Sender name Must Be 936600004 
                        SMSHelper smsH = new SMSHelper();
                        MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();

                        string smsmsg = smsH.getsuccessregsmsmessagebody(userid, randompass);

                        try
                        {
                            var result = smsWcf.SendSms("", smsmsg, reginfo.mboileno, sendername);
                            if (result._success)
                            {
                                writeLog("Send SMS OK.");
                            }
                            else
                            {
                                writeLog("Send SMS Not OK and Try again.");

                                try
                                {
                                    result = smsWcf.SendSms("", smsmsg, reginfo.mboileno, sendername);
                                    if (!result._success)
                                    {
                                        writeLog("Send SMS failed: " + result._message);
                                    }
                                    else
                                    {
                                        writeLog("Send SMS with MyanTalk  OK");
                                    }
                                }
                                catch (Exception ex)
                                {
                                    writeLog("exception error occur when send " + ex.Message);
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            writeLog("Exception occur when send smsAGD" + ex.Message);
                        }


                        #endregion send sms end
                        writeLog("Register Response XML:" + sb.ToString());

                    }
                    else
                    {
                        code = "08";
                        desp = "DB Error";
                        return Utils.getErrorRes(code, desp);
                    }
                }
                else
                {
                    code = "08";
                    desp = "DB Error";
                    sb.Append("<Error>");
                    sb.Append("<Version>1.0</Version>");
                    sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                    sb.Append("<ResCode>" + code + "</ResCode>");
                    sb.Append("<ResDesc>" + desp + "</ResDesc>");
                    sb.Append("</Error>");
                    try
                    {
                        writeLog("Error In Create Branch ErrMsg:" + errmsg);
                    }
                    catch
                    {

                    }
                }
            }
            else
            {
                code = "08";
                desp = "DB Error";
                sb.Append("<Error>");
                sb.Append("<Version>1.0</Version>");
                sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                sb.Append("<ResCode>" + code + "</ResCode>");
                sb.Append("<ResDesc>" + desp + "</ResDesc>");
                sb.Append("</Error>");
                try
                {
                    writeLog("Error In Create AGENT ErrMsg:" + errmsg);
                }
                catch
                {
                }
            }
        }
        writeLog("Reg Response" + sb.ToString());
        return sb.ToString();
    }

    #region <-- Registration function -->

    bool IsValadateRegisterReq(Hashtable ht, out string code, out string desp, out registrationinfo reginfo)// bool IsValidateRegisterReq(Hashtable ht, out string code, out string desp, out string name, out string shopname, out string mobileno, out string email, out string addr, out string shoptype, out string DOB, out string gender,out string secretword,out string NRC,out string StateDivision ,out string Township)
    {
        reginfo = new registrationinfo();
        code = "00";
        desp = "Success";

        string version = string.Empty;
        string ts = string.Empty;
        string messageID = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }
        if (ht.ContainsKey("Name"))
        {
            reginfo.Name = ht["Name"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Name <Name> Tag");
            return false;
        }
        if (ht.ContainsKey("ShopName"))
        {
            reginfo.shopname = ht["ShopName"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing ShopName <ShopName> Tag");
            return false;
        }
        if (ht.ContainsKey("ShopType"))
        {
            reginfo.shoptype = ht["ShopType"].ToString();
        }
        if (ht.ContainsKey("DateOfBirth"))
        {
            reginfo.dob = ht["DateOfBirth"].ToString();
        }

        if (ht.ContainsKey("Gender"))
        {
            reginfo.gender = ht["Gender"].ToString();
        }

        if (ht.ContainsKey("Email"))
        {
            reginfo.email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <Email> Tag");
            return false;
        }
        if (ht.ContainsKey("MobileNo"))
        {
            reginfo.mboileno = ht["MobileNo"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing MobileNo <MobileNo> Tag");
            return false;
        }
        if (ht.ContainsKey("Address"))
        {
            reginfo.address = ht["Address"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <Address> Tag");
            return false;
        }
        if (ht.ContainsKey("NRCNo"))
        {
            reginfo.nrc = ht["NRCNo"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <NRCNo> Tag");
            return false;
        }
        if (ht.ContainsKey("SecretWord"))
        {
            reginfo.secretword = ht["SecretWord"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <SecretWord> Tag");
            return false;
        }
        if (ht.ContainsKey("StateDivision"))
        {
            reginfo.divisionid = ht["StateDivision"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <StateDivision> Tag");
            return false;
        }
        if (ht.ContainsKey("Township"))
        {
            reginfo.townshipid = ht["Township"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <Township> Tag");
            return false;
        }
        if (ht.ContainsKey("DeviceUID"))
        {
            reginfo.deviceID = ht["DeviceUID"].ToString();
        }
        if (ht.ContainsKey("DeviceToken"))
        {
            reginfo.deviceToken = ht["DeviceToken"].ToString();
        }

        if (ht.ContainsKey("DeviceInfo"))
        {
            reginfo.DeviceInfo = ht["DeviceInfo"].ToString();

        }

        if (String.IsNullOrEmpty(version) || string.IsNullOrEmpty(messageID) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(reginfo.Name) || String.IsNullOrEmpty(reginfo.mboileno) || String.IsNullOrEmpty(reginfo.address) || String.IsNullOrEmpty(reginfo.nrc))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        if (_agentWCF.IsDuplicatedMobile(reginfo.mboileno.Trim(), out errMsg))
        {
            code = "07";
            desp = "Mobile number duplicated. Please try with another number.";

            writeLog("User already Registered with MobileNo:" + reginfo.mboileno);
            return false;
        }
        return true;
    }


    bool createBranch(registrationinfo reginfo, string agentID, out string branchCode)
    {
        bool res = true;
        string errMsg = "";
        string newbranchCodeDB = "";
        branchCode = "";
        double newbranchCode = 0;
        _agentWCF.getNewBranchCode(agentID, out errMsg, out newbranchCodeDB);
        if (newbranchCodeDB != null)
        {
            if (newbranchCodeDB.IndexOf("B") == 0)
            {
                newbranchCode = Convert.ToDouble(newbranchCodeDB.Substring(1));
                newbranchCode += 1;
                branchCode = "B" + newbranchCode.ToString().PadLeft(4, '0');
            }
            else
            {
                branchCode = "B0001";
            }
        }
        else
        {
            branchCode = "B0001";
        }

        string division = string.Empty;
        string township = string.Empty;
        if (reginfo.divisionid == "null" || string.IsNullOrEmpty(reginfo.divisionid))
        {
            writeLog("Division is null");
            division = "8";
        }
        else
        {
            writeLog("Division is not null");
            division = (reginfo.divisionid);
        }
        if (reginfo.townshipid == "null" || string.IsNullOrEmpty(reginfo.townshipid))
        {
            writeLog("Township is null");
            township = "193";
        }
        else
        {
            writeLog("Township is not null");
            township = reginfo.townshipid;
        }
        writeLog(" Branch Data AgentID:" + agentID + "|BranchCode:" + branchCode + "|Branch Name:" + reginfo.Name + "Branch Address:" + reginfo.address + "|MobileNo:" + reginfo.mboileno + "|Division :" + division + "|Township :" + township);
        string latitude = ConfigurationManager.AppSettings["latitude"];
        string longitude = ConfigurationManager.AppSettings["longitude"];
        if (_agentWCF.insertAgentBranch(agentID, branchCode, reginfo.Name, reginfo.address, division, township, reginfo.mboileno, latitude, longitude, 0, 0, out errMsg))
        {
            writeLog("Create Branch OK AgentID:" + agentID + "|BranchCode:" + branchCode + "|Branch Name:" + reginfo.Name + "Branch Address:" + reginfo.address + "|MobileNo:" + reginfo.mboileno);

        }
        else
        {
            writeLog("Create Branch  NOT OK AgentID:" + agentID + "|BranchCode:" + branchCode + "|Branch Name:" + reginfo.Name + "Branch Address:" + reginfo.address + "|MobileNo:" + reginfo.mboileno);
            writeLog("Error In Create AGENT BRANCH Err:" + errMsg);
            res = false;
        }
        return res;
    }
    bool createAgent(out string newAgentCode, out int agentid, out string errmsg, registrationinfo reginfo)
    {
        #region <-- Generate Agent Code -->
        bool result = true;
        agentid = 0;
        errmsg = string.Empty;
        string agCode = "";
        double newAgentCodeDBL = 0;
        newAgentCode = "";

        try
        {
            if (_agentWCF.getNewAgentCode(out errmsg, out agCode))
            {
                if (agCode.IndexOf("A") == 0)
                {
                    agCode = agCode.Substring(1);
                    newAgentCodeDBL = Convert.ToDouble(agCode);
                    newAgentCodeDBL += 1;
                    newAgentCode = "A" + newAgentCodeDBL.ToString().PadLeft(8, '0');
                }
                else
                {
                    newAgentCodeDBL = 1;
                    newAgentCode = "A" + newAgentCodeDBL.ToString().PadLeft(8, '0');
                }
            }
        }
        catch (Exception ex)
        {
            newAgentCodeDBL = 1;
            newAgentCode = "A" + newAgentCodeDBL.ToString().PadLeft(8, '0');
            writeLog("Exception Error in Generate New Agent Code Err:" + ex.Message);
        }
        #endregion

        try
        {
            if (!string.IsNullOrEmpty(newAgentCode))
            {
                #region <-- Create new agent -->
                byte[] img = null;
                string profileid = ConfigurationManager.AppSettings["feesprofileid"].ToString();
                var defaultReloadFeeProfileId = Convert.ToInt32(ConfigurationManager.AppSettings["reloadProfileId"].ToString());
                agentid = _agentWCF.insertAgent(newAgentCode, reginfo.Name, 'N', 'Y', "#2432FF", "Y", img, int.Parse(profileid), defaultReloadFeeProfileId, out errmsg);
                if (agentid != 0)
                {
                    #region <-- Insert agent channel -->

                    if (!_agentWCF.insertAgentChannel(newAgentCode, "OVERTHECOUNTER", out errmsg))
                    {
                        writeLog("Error In Insert Agent Channel :" + errmsg);
                    }
                    else
                    {
                        writeLog("Insert Agent Channel OK AgentCode:" + newAgentCode + "|Agent Name;" + reginfo.Name);
                    }

                    #endregion end insert agent channel
                }
                else
                {
                    result = false;
                }

                #endregion end create new agent
            }
            else
            {
                writeLog("Agent Code Is Empty Cannot Create Agent");
                result = false;
            }
        }
        catch (Exception ex)
        {
            writeLog("Exception Erron in agent Creation Err:" + ex.Message);
            result = false;
        }

        return result;
    }

    bool createAgentUser(int agentid, string branchcode, out string randompass, out string userid, out string errMsg, registrationinfo reginfo)
    {
        bool success = false;
        userid = string.Empty;
        randompass = string.Empty;
        string password = string.Empty;
        string creator = "AutoSystem";
        int PasswordExpiryPeriod = 0;
        errMsg = string.Empty;
        DateTime userexpiry = DateTime.Now.AddDays(365);

        userid = generateAgUserID(reginfo.Name);
        randompass = generatepass();
        string pwdSalt = stringToBase64(userid);
        password = ComputeHash(randompass, pwdSalt);
        string strXml = "";

        StringBuilder xml = new StringBuilder();
        xml.Append("<AgentUserRights>");
        xml.Append("<dashboard>N</dashboard>");

        xml.Append("<transaction>");
        xml.Append("<searchTxn>N</searchTxn>");
        xml.Append("<recentTxn>N</recentTxn>");
        xml.Append("</transaction>");

        xml.Append("<account>");
        xml.Append("<changePassword>N</changePassword>");
        xml.Append("<user>N</user>");
        xml.Append("<branch>N</branch>");
        xml.Append("</account>");

        xml.Append("<report>");
        xml.Append("<dailyreport>N</dailyreport>");
        xml.Append("</report>");
        xml.Append("</AgentUserRights>");
        strXml = xml.ToString();
        PasswordExpiryPeriod = Convert.ToInt16(getSystemXmlElementValue(Utils.Constant.PASSWORDEXPIRY));
        try
        {
            reginfo = SetTempValues(reginfo);
            success = _agentWCF.registerAgentUser(agentid, userid, reginfo.Name, password, pwdSalt, reginfo.Name, char.Parse(reginfo.gender), DateTime.Parse(reginfo.dob), reginfo.mboileno, reginfo.nrc, reginfo.secretword, strXml, creator, userexpiry, PasswordExpiryPeriod, branchcode, reginfo.email, 'U', 'Y', 'M', reginfo.deviceID, reginfo.deviceToken, reginfo.DeviceInfo, out errMsg);
        }
        catch (Exception ex)
        {
            writeLog("Error in insert agent user err:" + ex.Message);
            success = false;
        }
        return success;

    }

    public object getSystemXmlElementValue(string eml)
    {
        string xmlString = _agentWCF.get_SystemConfigByKey("system_setting");
        System.Xml.XmlDocument doc = new System.Xml.XmlDocument();
        doc.InnerXml = xmlString;

        return doc.SelectSingleNode("configuration/" + eml).InnerXml;
    }
    public string generateAgUserID(string agUserName)
    {
        string userid = getShortName(agUserName);
        int num;


        if (!_agentWCF.IsDuplicateAgentUser(userid))
        {
            return userid.ToLower();
        }


        userid = userid.Substring(0, 5) + "0";
        num = Convert.ToInt16(userid.Substring(5, 1));

        if (num < 9)
        {
            for (int i = num; i < 9; i++)
            {
                userid = userid.Substring(0, 5) + (i + 1).ToString();
                if (!_agentWCF.IsDuplicateAgentUser(userid))
                {
                    return userid;
                }
            }
        }
        //=====================================

        userid = userid.Substring(0, 4) + "0" + userid.Substring(5, 1);
        num = Convert.ToInt16(userid.Substring(4, 2));
        if (num < 99)
        {
            for (int i = num; i < 99; i++)
            {
                userid = userid.Substring(0, 4) + (i + 1).ToString();
                if (!_agentWCF.IsDuplicateAgentUser(userid))
                {
                    return userid;
                }
            }
        }
        //=====================================                           
        userid = userid.Substring(0, 3) + "0" + userid.Substring(4, 2);
        num = Convert.ToInt16(userid.Substring(3, 3));
        if (num < 999)
        {
            for (int i = num; i < 999; i++)
            {
                userid = userid.Substring(0, 3) + (i + 1).ToString();
                if (!_agentWCF.IsDuplicateAgentUser(userid))
                {
                    return userid;
                }
            }
        }
        else
        {
            userid = userid.Substring(0, 2) + "0" + userid.Substring(3, 3);
            num = Convert.ToInt16(userid.Substring(3, 3));
            if (num < 9999)
            {
                for (int i = num; i < 9999; i++)
                {
                    userid = userid.Substring(0, 2) + (i + 1).ToString();
                    if (!_agentWCF.IsDuplicateAgentUser(userid))
                    {
                        return userid;
                    }
                    else
                    {
                        return "";
                    }
                }
            }
        }
        return "";

    }

    public static string getShortName(string name)
    {
        string shortName = "";

        string[] nameArr = name.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

        if (nameArr.Length == 1)
        {
            if (nameArr[0].Length > 2)
            {
                shortName += nameArr[0].Substring(0, 3);
            }
            else if (nameArr[0].Length > 1)
            {
                shortName += nameArr[0].Substring(0, 2);
            }
            else
            {
                shortName += nameArr[0].Substring(0, 1);
            }
        }
        else if (nameArr.Length == 2)
        {
            if (nameArr[0].Length > 2)
            {
                shortName += nameArr[0].Substring(0, 3);
            }
            else if (nameArr[0].Length > 1)
            {
                shortName += nameArr[0].Substring(0, 2);
            }
            else
            {
                shortName += nameArr[0].Substring(0, 1);
            }
            //==================
            if (nameArr[1].Length > 2)
            {
                shortName += nameArr[1].Substring(0, 3);
            }
            else if (nameArr[1].Length > 1)
            {
                shortName += nameArr[1].Substring(0, 2);
            }
            else
            {
                shortName += nameArr[1].Substring(0, 1);
            }
        }
        else if (nameArr.Length == 3)
        {
            if (nameArr[0].Length > 1)
            {
                shortName += nameArr[0].Substring(0, 2);
            }
            else
            {
                shortName += nameArr[0].Substring(0, 1);
            }
            //==================

            if (nameArr[1].Length > 1)
            {
                shortName += nameArr[1].Substring(0, 2);
            }
            else
            {
                shortName += nameArr[1].Substring(0, 1);
            }
            //==================

            if (nameArr[2].Length > 1)
            {
                shortName += nameArr[2].Substring(0, 2);
            }
            else
            {
                shortName += nameArr[2].Substring(0, 1);
            }
        }
        else
        {
            if (nameArr[0].Length > 1)
            {
                shortName += nameArr[0].Substring(0, 2);
            }
            else
            {
                shortName += nameArr[0].Substring(0, 1);
            }
            //==================

            if (nameArr[1].Length > 1)
            {
                shortName += nameArr[1].Substring(0, 2);
            }
            else
            {
                shortName += nameArr[1].Substring(0, 1);
            }
            //==================

            if (nameArr[3].Length > 1)
            {
                shortName += nameArr[3].Substring(0, 2);
            }
            else
            {
                shortName += nameArr[3].Substring(0, 1);
            }
        }
        shortName = shortName.PadRight(6, '1');
        return shortName.ToLower();
    }

    string sendCreditResetEmail(string agentCode, string AgentName, string BranchCode, string CreditTerms, string CreditLimit, string ResetDate)
    {
        string result = "success";
        writeLog("fromMail");
        string fromEmailAddress = ConfigurationManager.AppSettings["fromEmail"].ToString();
        string displayText = ConfigurationManager.AppSettings["displaytext"].ToString();
        string toEmail = ConfigurationManager.AppSettings["balanceResetEmail"].ToString();
        string introduction = ConfigurationManager.AppSettings["introduction"].ToString();
        writeLog("Fromemail:" + fromEmailAddress + "To Email:" + toEmail);
        writeLog("Subject");
        string subject = ConfigurationManager.AppSettings["subjectResetBalance"].ToString() + " at " + System.DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss");
        subject = string.Format(subject, AgentName);
        writeLog("Subject:" + subject);

        string emailBody = string.Empty;
        try
        {
            decimal creditlimitFormat = decimal.Parse(CreditLimit);
            emailBody = string.Format(@"<strong>{0}</strong><br/><br/>
                                        {1}<table>
                                        <tr><td>Partner Name</td><td>:</td><td>{2}</td></tr>
                                        <tr><td>Partner Code</td><td>:</td><td>{3}</td></tr>
                                        <tr><td>Branch Name</td><td>:</td><td>{4}</td></tr>
                                        <tr><td>Branch Code</td><td>:</td><td>{5}</td></tr>
                                        <tr><td>CreditTerms</td><td>:</td><td>{6}</td></tr>
                                        <tr><td>CreditLimit</td><td>:</td></td>{7}</td></tr>
                                        <tr><td>Credit Reset Date</td><td>:</td><td>{8}</td></tr>
                                        </table>", introduction, ConfigurationManager.AppSettings["msgbodyResetCredit"].ToString(), AgentName, agentCode, this.branchName, BranchCode, CreditTerms, string.Format("{0:n0}", creditlimitFormat), ResetDate);
        }
        catch (Exception ex)
        {
            writeLog("Exception error occur when creating email body" + ex.Message);
        }

        try
        {
            AwsEmailAPI.ServiceSoapClient emailApi = new AwsEmailAPI.ServiceSoapClient();
            bool sent = false;
            sent = emailApi.sendAWSMail(fromEmailAddress, displayText, toEmail, "", "", subject, emailBody);
            if (sent)
            {
                writeLog("Return ture email was sent");
            }
            else
            {
                writeLog("Email not sent");
                result = "fail";
            }
        }
        catch (Exception ex)
        {
            writeLog("Exception error occur in sending email:" + ex.Message);
        }
        return result;
    }
    #endregion
    #endregion

    #region <-- Mobile Registration 04-May-2018 AK -->

    public string OTPReq(string reqXml)
    {
        writeLog("$$$$$$$$$$$$$$$$$$ THIS IS OTPReq FROM BIS $$$$$$$$$$$$$$$$$$");
        string code = string.Empty;
        string desc = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string messageID = string.Empty;
        string loginID = string.Empty;
        bool isRegistered = false;
        string errmsg = string.Empty;
        string phoneNo = string.Empty;
        StringBuilder sb = new StringBuilder();
        writeLog("BIS reqSML   " + reqXml);
        Hashtable ht = Utils.getHTableFromXML(reqXml);

        try
        {
            if (IsValidateOTPRequest(ht, out code, out desc, out version, out ts, out messageID, out loginID, out isRegistered, out phoneNo))
            {
                writeLog("LogInId :" + loginID);
                if (loginID.Length >= 9 || !string.IsNullOrEmpty(phoneNo))
                {
                    if (SendOTP(out errMsg, loginID, isRegistered, phoneNo))
                    {
                        if (string.IsNullOrEmpty(phoneNo))
                        {
                            phoneNo = loginID;
                        }
                        var firstDigits = phoneNo.Substring(0, 4);
                        var lastDigits = phoneNo.Substring(phoneNo.Length - 3, 3);

                        var requiredMask = new String('X', phoneNo.Length - firstDigits.Length - lastDigits.Length);
                        var maskedString = string.Concat(firstDigits, requiredMask, lastDigits);

                        desc = "Your OTP has been sent to " + maskedString + " successfully.";
                        sb.Append("<OTPRes>");
                        sb.Append("<Version>1.0</Version>");
                        sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                        sb.Append("<ResCode>" + code + "</ResCode>");
                        sb.Append("<ResDesc>" + desc + "</ResDesc>");
                        sb.Append("</OTPRes>");
                    }
                    else
                    {
                        writeLog("OTPRes " + errmsg);
                        return errMsg;
                    }
                }
                else
                {
                    sb.Append("<OTPRes>");
                    sb.Append("<Version>1.0</Version>");
                    sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                    sb.Append("<ResCode>" + code + "</ResCode>");
                    sb.Append("<ResDesc>" + desc + "</ResDesc>");
                    sb.Append("</OTPRes>");
                }
            }
            else
            {
                return Utils.getErrorRes(code, desc);
            }
        }
        catch (Exception ex)
        {
            writeLog("OTPReq Error: " + ex.Message + " " + "Full Error: " + ex.ToString());
        }

        return sb.ToString();
    }

    public string OTPReqV2(string reqXml)
    {
        writeLog("$$$$$$$$$$$$$$$$$$ THIS IS OTPReqV2 FROM BIS $$$$$$$$$$$$$$$$$$");
        string code = string.Empty;
        string desc = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string messageID = string.Empty;
        string loginID = string.Empty;
        bool isRegistered = false;
        string errmsg = string.Empty;
        string phoneNo = string.Empty;
        StringBuilder sb = new StringBuilder();
        writeLog("OTPReqV2 : BIS reqSML   " + reqXml);
        Hashtable ht = Utils.getHTableFromXML(reqXml);

        try
        {
            if (IsValidateOTPRequest(ht, out code, out desc, out version, out ts, out messageID, out loginID, out isRegistered, out phoneNo))
            {
                writeLog("LogInId :" + loginID);
                if (loginID.Length >= 9 || !string.IsNullOrEmpty(phoneNo))
                {
                    if (SendOTPV2(out errMsg, loginID, isRegistered, phoneNo))
                    {
                        if (string.IsNullOrEmpty(phoneNo))
                        {
                            phoneNo = loginID;
                        }
                        var firstDigits = phoneNo.Substring(0, 4);
                        var lastDigits = phoneNo.Substring(phoneNo.Length - 3, 3);

                        var requiredMask = new String('X', phoneNo.Length - firstDigits.Length - lastDigits.Length);
                        var maskedString = string.Concat(firstDigits, requiredMask, lastDigits);

                        desc = "Your OTP has been sent to " + maskedString + " successfully.";
                        sb.Append("<OTPRes>");
                        sb.Append("<Version>1.0</Version>");
                        sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                        sb.Append("<ResCode>" + code + "</ResCode>");
                        sb.Append("<ResDesc>" + desc + "</ResDesc>");
                        sb.Append("</OTPRes>");
                    }
                    else
                    {
                        writeLog("OTPReqV2 : OTPRes " + errmsg);
                        return errMsg;
                    }
                }
                else
                {
                    sb.Append("<OTPRes>");
                    sb.Append("<Version>1.0</Version>");
                    sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                    sb.Append("<ResCode>" + code + "</ResCode>");
                    sb.Append("<ResDesc>" + desc + "</ResDesc>");
                    sb.Append("</OTPRes>");
                }
            }
            else
            {
                return Utils.getErrorRes(code, desc);
            }
        }
        catch (Exception ex)
        {
            writeLog("OTPReqV2 Error: " + ex.Message + " " + "Full Error: " + ex.ToString());
        }

        return sb.ToString();
    }

    public string RegisterUser(string reqXml)
    {
        writeLog("$$$$$$$$$$$$$$$$$$$$$$$ THIS IS REGISTER USER FROM BIS $$$$$$$$$$$$$$$$$$$$$$$");
        int agnid;
        string code;
        string desp;
        string newagncode = string.Empty;
        string branchcode = string.Empty;
        string randompass = string.Empty;
        string userid = string.Empty;
        string errmsg = string.Empty;
        StringBuilder sb = new StringBuilder();
        Hashtable ht = Utils.getHTableFromXML(reqXml);
        var reginfo = new registrationinfo();

        if (!IsValidateRegisterUserReq(ht, out code, out desp, out reginfo))
        {
            return Utils.getErrorRes(code, desp);
        }
        else
        {
            errmsg = "";

            if (createAgent(out newagncode, out agnid, out errmsg, reginfo))
            {
                writeLog("$$$$$$$$Creating Agent OK Agent ID:" + agnid + "Agent Code:" + newagncode + "$$$$$$$$$$$$$$$$$$$$$$$");
                agentID = agnid;

                writeLog("Start Create Branch");
                if (createBranch(reginfo, agnid.ToString(), out branchcode))
                {
                    writeLog("$$$$$$$$$$$$$Creating Agent Branch OK BranchCode:" + branchcode + "$$$$$$$$$$$$$");
                    writeLog("Start Creat Agent User");
                    if (NewCreateAgentUser(agnid, branchcode, out randompass, out userid, out errmsg, reginfo))
                    {
                        writeLog("$$$$$$$$$$$$Creating Agent User OK agentid:" + agnid + "BranchCode:" + branchcode + "userid:" + userid + "$$$$$$$$$$$$$$$$");
                        code = "00";
                        desp = "Registration is successfully done.";
                        sb.Append("<CreateUserRes>");
                        sb.Append("<Version>1.0</Version>");
                        sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                        sb.Append("<ResCode>" + code + "</ResCode>");
                        sb.Append("<ResDesc>" + desp + "</ResDesc>");
                        sb.Append("</CreateUserRes>");
                    }
                    else
                    {
                        code = "08";
                        desp = "DB Error";
                        return Utils.getErrorRes(code, desp);
                    }
                }
                else
                {
                    code = "08";
                    desp = "DB Error";
                    sb.Append("<Error>");
                    sb.Append("<Version>1.0</Version>");
                    sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                    sb.Append("<ResCode>" + code + "</ResCode>");
                    sb.Append("<ResDesc>" + desp + "</ResDesc>");
                    sb.Append("</Error>");
                    try
                    {
                        writeLog("Error In Create Branch ErrMsg:" + errmsg);
                    }
                    catch
                    {

                    }
                }
            }
            else
            {
                code = "08";
                desp = "DB Error";
                sb.Append("<Error>");
                sb.Append("<Version>1.0</Version>");
                sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                sb.Append("<ResCode>" + code + "</ResCode>");
                sb.Append("<ResDesc>" + desp + "</ResDesc>");
                sb.Append("</Error>");
                try
                {
                    writeLog("Error In Create AGENT ErrMsg:" + errmsg);
                }
                catch
                {
                }
            }
        }
        writeLog("Reg Response" + sb.ToString());
        return sb.ToString();
    }

    bool NewCreateAgentUser(int agentid, string branchcode, out string randompass, out string userid, out string errMsg, registrationinfo reginfo)
    {
        bool success = false;
        userid = string.Empty;
        randompass = string.Empty;
        string password = string.Empty;
        string creator = "AutoSystem";
        int PasswordExpiryPeriod = 0;
        errMsg = string.Empty;
        DateTime userexpiry = DateTime.Now.AddDays(365);

        userid = reginfo.mboileno;
        randompass = generatepass();
        string pwdSalt = stringToBase64(userid);
        password = ComputeHash(randompass, pwdSalt);

        string strXml = "";

        StringBuilder xml = new StringBuilder();
        xml.Append("<AgentUserRights>");
        xml.Append("<dashboard>N</dashboard>");

        xml.Append("<transaction>");
        xml.Append("<searchTxn>N</searchTxn>");
        xml.Append("<recentTxn>N</recentTxn>");
        xml.Append("</transaction>");

        xml.Append("<account>");
        xml.Append("<changePassword>N</changePassword>");
        xml.Append("<user>N</user>");
        xml.Append("<branch>N</branch>");
        xml.Append("</account>");

        xml.Append("<report>");
        xml.Append("<dailyreport>N</dailyreport>");
        xml.Append("</report>");
        xml.Append("</AgentUserRights>");
        strXml = xml.ToString();
        //it is from DB
        PasswordExpiryPeriod = Convert.ToInt16(getSystemXmlElementValue(Utils.Constant.PASSWORDEXPIRY));
        try
        {
            reginfo = SetTempValues(reginfo);
            success = _agentWCF.registerAgentUser(agentid, userid, reginfo.Name, password, pwdSalt, reginfo.Name, char.Parse(reginfo.gender), DateTime.Parse(reginfo.dob), reginfo.mboileno, reginfo.nrc, reginfo.secretword, strXml, creator, userexpiry, PasswordExpiryPeriod, branchcode, reginfo.email, 'U', 'Y', 'M', reginfo.deviceID, reginfo.deviceToken, reginfo.DeviceInfo, out errMsg);
        }
        catch (Exception ex)
        {
            writeLog("Error in insert agent user err:" + ex.Message);
            success = false;
        }
        return success;

    }

    public string UpdateProfileReq(string reqXml)
    {
        string code = string.Empty;
        string desc = string.Empty;
        string errmsg = string.Empty;
        string loginID = string.Empty;
        StringBuilder sb = new StringBuilder();
        Hashtable ht = Utils.getHTableFromXML(reqXml);
        var reginfo = new registrationinfo();

        if (IsValidateUpdateProfileReq(ht, out loginID, out code, out desc, out reginfo))
        {
            writeLog("$$$$$$$$ Updating Agent Profile $$$$$$$$$$$$$$$$$$$$$$$");
            try
            {
                if (_agentWCF.updateAgentProfile(reginfo.gender, DateTime.Parse(reginfo.dob), reginfo.nrc, reginfo.address, reginfo.email, reginfo.isShop, reginfo.shopname, reginfo.shoptype, reginfo.latitudeLoc, reginfo.longitudeLoc, reginfo.UserID, reginfo.mboileno, reginfo.deviceID, reginfo.deviceToken, reginfo.secretword, reginfo.divisionid, reginfo.townshipid, out errmsg))
                {
                    writeLog("$$$$$$$$$$$$ Updating Agent Profile $$$$$$$$$$$$$$$$");
                    code = "00";
                    desc = "Registration is successfully done.";
                    sb.Append("<UpdateProfileRes>");
                    sb.Append("<Version>1.0</Version>");
                    sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                    sb.Append("<ResCode>" + code + "</ResCode>");
                    sb.Append("<ResDesc>" + desc + "</ResDesc>");
                    sb.Append("</UpdateProfileRes>");
                }
                else
                {
                    code = "08";
                    desc = "DB Error";
                    sb.Append("<Error>");
                    sb.Append("<Version>1.0</Version>");
                    sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                    sb.Append("<ResCode>" + code + "</ResCode>");
                    sb.Append("<ResDesc>" + desc + "</ResDesc>");
                    sb.Append("</Error>");
                    try
                    {
                        writeLog("Error In Create Branch ErrMsg:" + errmsg);
                    }
                    catch
                    {

                    }
                }
            }
            catch (Exception ex)
            {
                writeLog("Error in Update Agent Profile : " + ex.ToString());
                throw;
            }
        }
        else
        {
            return Utils.getErrorRes(code, desc);
        }
        return sb.ToString();
    }

    #region UpdateProfileReqV2
    public string UpdateProfileReqV2(string reqXml)
    {
        string code = string.Empty;
        string desc = string.Empty;
        string ts = string.Empty;
        string errmsg = string.Empty;
        string loginID = string.Empty;
        StringBuilder sb = new StringBuilder();
        Hashtable ht = Utils.getHTableFromXML(reqXml);
        registrationinfoV2 reginfo = new registrationinfoV2();
        string selfiePhotoUrl = string.Empty;
        string photoWithIdUrl = string.Empty;

        if (IsValidateUpdateProfileReqV2(ht, out loginID, out code, out desc, out reginfo, out ts))
        {
            writeLog("$$$$$$$$ Updating Agent Profile V2 $$$$$$$$$$$$$$$$$$$$$$$");
            try
            {
                if (!string.IsNullOrEmpty(reginfo.SelfiePhoto) && !string.IsNullOrEmpty(reginfo.SelfiePhotoWithId))
                {
                    //update photo to s3
                    var s3Res = new S3Model.S3UploadResponse();

                    UploadPhoto(ts, reginfo, out s3Res);

                    if (s3Res != null && s3Res.ResCode == "000")
                    {
                        selfiePhotoUrl = s3Res.SelfiePhotoUrl;
                        photoWithIdUrl = s3Res.PhotoWithIdCardUrl;
                    }


                    //update agent profile
                    if (_agentWCF.updateAgentProfileV2(reginfo.gender, DateTime.Parse(reginfo.dob), reginfo.nrc, reginfo.address, reginfo.email, reginfo.isShop, reginfo.shopname, reginfo.shoptype, reginfo.latitudeLoc, reginfo.longitudeLoc, reginfo.UserID, reginfo.mboileno, reginfo.deviceID, reginfo.deviceToken, reginfo.secretword, reginfo.divisionid, reginfo.townshipid, selfiePhotoUrl, photoWithIdUrl, null, "P", "Pending", "", out errmsg))
                    {
                        writeLog("$$$$$$$$$$$$ Updating Agent Profile V2 $$$$$$$$$$$$$$$$");
                        code = "00";
                        string title = ConfigurationManager.AppSettings["UpdateProfileTitle"];
                        desc = ConfigurationManager.AppSettings["UpdateProfileDesc"];
                        sb.Append("<UpdateProfileV2Res>");
                        sb.Append("<Version>1.0</Version>");
                        sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                        sb.Append("<ResCode>" + code + "</ResCode>");
                        sb.Append("<ResDesc>" + desc + "</ResDesc>");
                        sb.Append("<Title>" + title + "</Title>");
                        sb.Append("</UpdateProfileV2Res>");
                    }
                    else
                    {
                        code = "08";
                        desc = "DB Error";
                        sb.Append("<Error>");
                        sb.Append("<Version>1.0</Version>");
                        sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                        sb.Append("<ResCode>" + code + "</ResCode>");
                        sb.Append("<ResDesc>" + desc + "</ResDesc>");
                        sb.Append("</Error>");
                        try
                        {
                            writeLog("Error In Create Branch V2 ErrMsg:" + errmsg);
                        }
                        catch
                        {

                        }
                    }
                }
                else
                {
                    return Utils.getErrorRes("06", "Please upload photo!");
                }


            }
            catch (Exception ex)
            {
                writeLog("Error in Update Agent Profile V2 : " + ex.ToString());
                throw;
            }
        }
        else
        {
            return Utils.getErrorRes(code, desc);
        }
        return sb.ToString();
    }

    private void UploadPhoto(string refId, registrationinfoV2 reginfo, out S3Model.S3UploadResponse s3Res)
    {
        S3Model.S3FileUploadRequest s3Req = new S3Model.S3FileUploadRequest()
        {
            RefId = refId,
            UserId = reginfo.UserID,
            SelfiePhotoByByteArray = reginfo.SelfiePhoto,
            PhotoWithIdCardByByteArray = reginfo.SelfiePhotoWithId
        };



        string uploadPhotoUrl = ConfigurationManager.AppSettings["UploadPhotoS3Url"].ToString();
        string json = JsonConvert.SerializeObject(s3Req);

        Utils.WriteLog_Biller("$$$$$$$$ Start to call S3 Upload Photo Interface $$$$$$$$");
        Utils.WriteLog_Biller("S3 Upload Photo Request  :" + json);
        Utils.WriteLog_Biller("Url " + uploadPhotoUrl);

        string response = Utils.PostEba(json, uploadPhotoUrl);
        Utils.WriteLog_Biller("S3 Upload Photo Response  :" + response);
        s3Res = JsonConvert.DeserializeObject<S3Model.S3UploadResponse>(response);

    }

    #endregion

    #region Helper Methods
    registrationinfo SetTempValues(registrationinfo regInfo)
    {
        if (string.IsNullOrEmpty(regInfo.gender))
        {
            regInfo.gender = "M";
        }
        if (string.IsNullOrEmpty(regInfo.dob))
        {
            regInfo.dob = DateTime.Now.ToString();
        }
        return regInfo;
    }

    bool IsValidateRegisterUserReq(Hashtable ht, out string code, out string desp, out registrationinfo reginfo)
    {
        reginfo = new registrationinfo();
        code = "00";
        desp = "Success";

        string version = string.Empty;
        string ts = string.Empty;
        string messageID = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }
        if (ht.ContainsKey("UserName"))
        {
            reginfo.Name = ht["UserName"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing UserName <UserName> Tag");
            return false;
        }
        if (ht.ContainsKey("LoginID"))
        {
            reginfo.mboileno = ht["LoginID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing MobileNo <MobileNo> Tag");
            return false;
        }
        if (ht.ContainsKey("DeviceInfo"))
        {
            reginfo.DeviceInfo = ht["DeviceInfo"].ToString();
        }
        if (String.IsNullOrEmpty(version) || string.IsNullOrEmpty(messageID) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(reginfo.Name) || String.IsNullOrEmpty(reginfo.mboileno))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }
        if (_agentWCF.IsDuplicatedMobile(reginfo.mboileno.Trim(), out errMsg))
        {
            writeLog("HERE MOBILE DUPLICATED");
            code = "07";
            desp = "Mobile number duplicated. Please try with another number.";

            writeLog("User already Registered with MobileNo:" + reginfo.mboileno);
            return false;
        }
        return true;
    }

    public bool IsValidateOTPRequest(Hashtable ht, out string code, out string desc, out string version, out string ts, out string messageID, out string loginID, out bool isRegistered, out string phoneNo)
    {
        code = "00";
        desc = "Success";

        version = string.Empty;
        ts = string.Empty;
        loginID = string.Empty;
        messageID = string.Empty;
        isRegistered = false;
        phoneNo = string.Empty;
        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desc = "Invalid Request";
            writeLog("Error in Validation : Missing MessageID XML <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("LoginID"))
        {
            loginID = ht["LoginID"].ToString();
        }
        else
        {
            code = "06";
            desc = "Invalid Request";
            writeLog("Error in Validation : Missing <LoginID> Tag");
            return false;
        }
        if (ht.ContainsKey("IsRegistered"))
        {
            isRegistered = bool.Parse(ht["IsRegistered"].ToString());
        }
        else
        {
            code = "06";
            desc = "Invalid Request";
            writeLog("Error in Validation : Missing IsRegistered <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("PhoneNo"))
        {
            phoneNo = ht["PhoneNo"].ToString();
        }

        return true;
    }

    bool IsValidateUpdateProfileReq(Hashtable ht, out string code, out string desp, out string loginID, out registrationinfo reginfo)
    {
        reginfo = new registrationinfo();
        code = "00";
        desp = "Success";
        loginID = string.Empty;

        string version = string.Empty;
        string ts = string.Empty;
        string messageID = string.Empty;


        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }
        if (ht.ContainsKey("Gender"))
        {
            reginfo.gender = ht["Gender"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Gender> Tag");
            return false;
        }
        if (ht.ContainsKey("DateOfBirth"))
        {
            reginfo.dob = ht["DateOfBirth"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <DateOfBirth> Tag");
            return false;
        }
        if (ht.ContainsKey("NRCNo"))
        {
            reginfo.nrc = ht["NRCNo"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <NRCNo> Tag");
            return false;
        }
        if (ht.ContainsKey("Address"))
        {
            reginfo.address = ht["Address"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <Address> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            reginfo.email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <Email> Tag");
            return false;
        }
        if (ht.ContainsKey("IsShop"))
        {
            reginfo.isShop = ht["IsShop"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing IsShop <IsShop> Tag");
            return false;
        }
        if (ht.ContainsKey("ShopName"))
        {
            reginfo.shopname = ht["ShopName"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing ShopName <ShopName> Tag");
            return false;
        }
        if (ht.ContainsKey("ShopType"))
        {
            reginfo.shoptype = ht["ShopType"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing ShopType <ShopType> Tag");
            return false;
        }
        if (ht.ContainsKey("Latitude"))
        {
            reginfo.latitudeLoc = ht["Latitude"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Latitude <Latitude> Tag");
            return false;
        }
        if (ht.ContainsKey("Longitude"))
        {
            reginfo.longitudeLoc = ht["Longitude"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Longitude <Longitude> Tag");
            return false;
        }
        if (ht.ContainsKey("SecretWord"))
        {
            reginfo.secretword = ht["SecretWord"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Longitude <SecretWord> Tag");
            return false;
        }
        if (ht.ContainsKey("LoginID"))
        {
            string tmpLoginID = ht["LoginID"].ToString();
            reginfo.UserID = tmpLoginID;
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <LoginID> Tag");
            return false;
        }

        if (ht.ContainsKey("DivisionID"))
        {
            reginfo.divisionid = ht["DivisionID"].ToString();
        }
        if (ht.ContainsKey("TownshipID"))
        {
            reginfo.townshipid = ht["TownshipID"].ToString();
        }
        if (ht.ContainsKey("DeviceUID"))
        {
            reginfo.deviceID = ht["DeviceUID"].ToString();
        }
        if (ht.ContainsKey("DeviceToken"))
        {
            reginfo.deviceToken = ht["DeviceToken"].ToString();
        }
        //<DeviceUID>353818465809247</DeviceUID>
        //<DeviceToken>APA91bFwfevGCuUJXGyiEc6pyjR6O7vFo4AK0uyw96ZpoVcuapVxAx-ma9GiDVkK_uNRXZrnd8M51xvbwHKPVGUCsZMJQMwYPMV30xy-__2oGlQ3F_LQ1KGwTLp2fuYyIRm-u7MeY6P3</DeviceToken>
        if (String.IsNullOrEmpty(version) || string.IsNullOrEmpty(messageID) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(reginfo.address) || String.IsNullOrEmpty(reginfo.nrc))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }
        return true;
    }

    bool IsValidateUpdateProfileReqV2(Hashtable ht, out string code, out string desp, out string loginID, out registrationinfoV2 reginfo, out string ts)
    {
        reginfo = new registrationinfoV2();
        code = "00";
        desp = "Success";
        loginID = string.Empty;

        string version = string.Empty;
        ts = string.Empty;
        string messageID = string.Empty;


        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }
        if (ht.ContainsKey("Gender"))
        {
            reginfo.gender = ht["Gender"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Gender> Tag");
            return false;
        }
        if (ht.ContainsKey("DateOfBirth"))
        {
            reginfo.dob = ht["DateOfBirth"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <DateOfBirth> Tag");
            return false;
        }
        if (ht.ContainsKey("NRCNo"))
        {
            reginfo.nrc = ht["NRCNo"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <NRCNo> Tag");
            return false;
        }
        if (ht.ContainsKey("Address"))
        {
            reginfo.address = ht["Address"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <Address> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            reginfo.email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <Email> Tag");
            return false;
        }
        if (ht.ContainsKey("IsShop"))
        {
            reginfo.isShop = ht["IsShop"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing IsShop <IsShop> Tag");
            return false;
        }
        if (ht.ContainsKey("ShopName"))
        {
            reginfo.shopname = ht["ShopName"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing ShopName <ShopName> Tag");
            return false;
        }
        if (ht.ContainsKey("ShopType"))
        {
            reginfo.shoptype = ht["ShopType"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing ShopType <ShopType> Tag");
            return false;
        }
        if (ht.ContainsKey("Latitude"))
        {
            reginfo.latitudeLoc = ht["Latitude"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Latitude <Latitude> Tag");
            return false;
        }
        if (ht.ContainsKey("Longitude"))
        {
            reginfo.longitudeLoc = ht["Longitude"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Longitude <Longitude> Tag");
            return false;
        }
        if (ht.ContainsKey("SecretWord"))
        {
            reginfo.secretword = ht["SecretWord"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Longitude <SecretWord> Tag");
            return false;
        }
        if (ht.ContainsKey("LoginID"))
        {
            string tmpLoginID = ht["LoginID"].ToString();
            reginfo.UserID = tmpLoginID;

        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <LoginID> Tag");
            return false;
        }

        if (ht.ContainsKey("DivisionID"))
        {
            reginfo.divisionid = ht["DivisionID"].ToString();
        }
        if (ht.ContainsKey("TownshipID"))
        {
            reginfo.townshipid = ht["TownshipID"].ToString();
        }
        #region

        #endregion
        if (ht.ContainsKey("DeviceUID"))
        {
            reginfo.deviceID = ht["DeviceUID"].ToString();
        }
        if (ht.ContainsKey("DeviceToken"))
        {
            reginfo.deviceToken = ht["DeviceToken"].ToString();
        }
        //<DeviceUID>353818465809247</DeviceUID>
        //<DeviceToken>APA91bFwfevGCuUJXGyiEc6pyjR6O7vFo4AK0uyw96ZpoVcuapVxAx-ma9GiDVkK_uNRXZrnd8M51xvbwHKPVGUCsZMJQMwYPMV30xy-__2oGlQ3F_LQ1KGwTLp2fuYyIRm-u7MeY6P3</DeviceToken>
        if (String.IsNullOrEmpty(version) || string.IsNullOrEmpty(messageID) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(reginfo.address) || String.IsNullOrEmpty(reginfo.nrc))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }


        if (ht.ContainsKey("SelfiePhoto"))
        {
            reginfo.SelfiePhoto = ht["SelfiePhoto"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <SelfiePhoto> Tag");
            return false;
        }


        if (ht.ContainsKey("SelfiePhotoWithIdCard"))
        {
            reginfo.SelfiePhotoWithId = ht["SelfiePhotoWithIdCard"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <SelfiePhotoWithIdCard> Tag");
            return false;
        }
        return true;
    }

    public string GenerateOTP()
    {
        string otp = string.Empty;
        Random generator = new Random();
        otp = generator.Next(0, 999999).ToString("D6");
        return otp;
    }
    public bool SendOTP(out string errMsg, string loginID, bool isRegistered, string phoneNo)
    {
        string otp = GenerateOTP();
        errMsg = "";
        MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();

        try
        {
            string agentUserUniqueID = "";
            if (_agentWCF.getAgentUserUniqueIDByLoginID(loginID, out errMsg, out agentUserUniqueID))
            {
                if (!string.IsNullOrEmpty(agentUserUniqueID))
                {
                    if (_agentWCF.insertUpdateOTP(agentUserUniqueID, otp, isRegistered, out errMsg))
                    {
                        writeLog("Insert Update OTP Success. AgentUserUniqueID : " + agentUserUniqueID + ", OTP : " + otp + ", IsRegistered" + isRegistered.ToString());
                        if (!string.IsNullOrEmpty(phoneNo))
                        {
                            loginID = phoneNo;
                        }
                        string sender = System.Configuration.ConfigurationManager.AppSettings["senderName"].ToString();
                        var expirTime = System.Configuration.ConfigurationManager.AppSettings["ExpirTime"].ToString();
                        string otpSms = string.Format("Your OTP is [{0}], valid within {1} minutes by {2}.", otp, expirTime, sender);
                        if (smsWcf.SendSms("", otpSms, loginID, sender)._success)
                        {
                            return true;
                        }
                        else
                        {
                            writeLog("Error in sending SMS ");
                            StringBuilder sb = new StringBuilder();
                            sb.Append("<OTPRes>");
                            sb.Append("<Version>1.0</Version>");
                            sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                            sb.Append("<ResCode>" + "00" + "</ResCode>");
                            sb.Append("<ResDesc>" + "OTP sent via SMS" + "</ResDesc>");
                            sb.Append("</OTPRes>");

                            errMsg = sb.ToString();

                            return false;
                        }
                        return true;
                    }

                    errMsg = Utils.getErrorRes("500", errMsg);
                    return false;
                }
                else
                {
                    errMsg = Utils.getErrorRes("500", "User does not exist.");
                    return false;
                }
            }
            else
            {
                errMsg = Utils.getErrorRes("500", errMsg);
                return false;
            }

            StringBuilder sb1 = new StringBuilder();
            sb1.Append("<OTPRes>");
            sb1.Append("<Version>1.0</Version>");
            sb1.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
            sb1.Append("<ResCode>" + "200" + "</ResCode>");
            sb1.Append("<ResDesc>" + "OTP sent via SMS" + "</ResDesc>");
            sb1.Append("</OTPRes>");

            errMsg = sb1.ToString();
        }
        catch (Exception ex)
        {
            writeLog("Send SMS Error:   " + ex.ToString());
            StringBuilder sb = new StringBuilder();
            sb.Append("<OTPRes>");
            sb.Append("<Version>1.0</Version>");
            sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
            sb.Append("<ResCode>" + "200" + "</ResCode>");
            sb.Append("<ResDesc>" + "OTP sent via SMS" + "</ResDesc>");
            sb.Append("</OTPRes>");

            errMsg = sb.ToString();
        }

        return true;
    }

    public bool SendOTPV2(out string errMsg, string loginID, bool isRegistered, string phoneNo)
    {
        writeLog("SendOTPV2 starts ");
        string otp = GenerateOTP();
        errMsg = "";
        MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();

        try
        {
            string agentUserUniqueID = "";
            if (_agentWCF.getAgentUserUniqueIDByLoginID(loginID, out errMsg, out agentUserUniqueID))
            {
                if (!string.IsNullOrEmpty(agentUserUniqueID))
                {
                    var maxOTPResendCount = Convert.ToInt16(ConfigurationManager.AppSettings["MaxOTPResendCount"].ToString());
                    if (_agentWCF.insertUpdateOTPV2(agentUserUniqueID, otp, isRegistered, maxOTPResendCount, out errMsg))
                    {
                        writeLog("SendOTPV2 : Insert Update OTP Success. AgentUserUniqueID : " + agentUserUniqueID + ", OTP : " + otp + ", IsRegistered" + isRegistered.ToString());
                        if (!string.IsNullOrEmpty(phoneNo))
                        {
                            loginID = phoneNo;
                        }
                        string sender = System.Configuration.ConfigurationManager.AppSettings["senderName"].ToString();
                        var expirTime = System.Configuration.ConfigurationManager.AppSettings["ExpirTime"].ToString();
                        string otpSms = string.Format("Your OTP is [{0}], valid within {1} minutes by {2}.", otp, expirTime, sender);
                        if (smsWcf.SendSms("", otpSms, loginID, sender)._success)
                        {
                            return true;
                        }
                        else
                        {
                            writeLog("SendOTPV2 : Error in sending SMS ");
                            StringBuilder sb = new StringBuilder();
                            sb.Append("<OTPRes>");
                            sb.Append("<Version>1.0</Version>");
                            sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                            sb.Append("<ResCode>" + "00" + "</ResCode>");
                            sb.Append("<ResDesc>" + "OTP sent via SMS" + "</ResDesc>");
                            sb.Append("</OTPRes>");

                            errMsg = sb.ToString();

                            return false;
                        }
                        return true;
                    }

                    errMsg = Utils.getErrorRes("500", errMsg);
                    return false;
                }
                else
                {
                    errMsg = Utils.getErrorRes("500", "User does not exist.");
                    return false;
                }
            }
            else
            {
                errMsg = Utils.getErrorRes("500", errMsg);
                return false;
            }

            StringBuilder sb1 = new StringBuilder();
            sb1.Append("<OTPRes>");
            sb1.Append("<Version>1.0</Version>");
            sb1.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
            sb1.Append("<ResCode>" + "200" + "</ResCode>");
            sb1.Append("<ResDesc>" + "OTP sent via SMS" + "</ResDesc>");
            sb1.Append("</OTPRes>");

            errMsg = sb1.ToString();
        }
        catch (Exception ex)
        {
            writeLog("Send SMS Error:   " + ex.ToString());
            StringBuilder sb = new StringBuilder();
            sb.Append("<OTPRes>");
            sb.Append("<Version>1.0</Version>");
            sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
            sb.Append("<ResCode>" + "200" + "</ResCode>");
            sb.Append("<ResDesc>" + "OTP sent via SMS" + "</ResDesc>");
            sb.Append("</OTPRes>");

            errMsg = sb.ToString();
        }

        return true;
    }

    #endregion

    #endregion

    #region <-- Repayment Service Fees Request 02-Sep-2017 -->
    public string RepaymentServiceFeeReq(string reqXml)
    {
        writeLog("$$$$$$$$$$$$$$$$$$$$$ RepaymentServiceFeeReq $$$$$$$$$$$$$$$$$$$$$");
        writeLog("REQ XML :" + reqXml);

        string rescode = string.Empty, resdecs = string.Empty;
        string isAgreement = string.Empty;
        string totalAgentAmount = string.Empty;
        string totalAmount = string.Empty;
        DataSet dsBiller = null;
        string errmsg = string.Empty;

        Hashtable ht = Utils.getHTableFromXML(reqXml);
        RepaymentServiceFeesReqMdl RequestData = IsValidateRepaymentServiceFeeReq(ht);
        if (!RequestData.Result)
        {
            return Utils.getErrorRes(RequestData.ResCode, RequestData.ResDesc);
        }
        else
        {
            #region <-- Get BillerID by agent code -->
            if (_agentWCF.checkBillerID(RequestData.TaxID, agentID, RequestData.Email, out dsBiller, out errmsg))
            {
                if (dsBiller.Tables[0].Rows.Count > 0)
                {
                    billerName = dsBiller.Tables[0].Rows[0]["BILLERNAME"].ToString();
                    serviceFlatFee = dsBiller.Tables[0].Rows[0]["SERVICEFLATFEE"].ToString();
                    servicePercent = dsBiller.Tables[0].Rows[0]["SERVICEPERCENTFEE"].ToString();
                    agentFlatFee = dsBiller.Tables[0].Rows[0]["AGENTFLATFEE"].ToString();
                    agentPercent = dsBiller.Tables[0].Rows[0]["AGENTPERCENTFEE"].ToString();
                    oneStopFlatFee = dsBiller.Tables[0].Rows[0]["ONESTOPFLATFEE"].ToString();
                    oneStopPercent = dsBiller.Tables[0].Rows[0]["ONESTOPPERCENTFEE"].ToString();
                    billerFlatFee = dsBiller.Tables[0].Rows[0]["BillerFlatFee"].ToString();
                    billerPercentFee = dsBiller.Tables[0].Rows[0]["BillerPercentFee"].ToString();
                    billerServiceFlatFee = dsBiller.Tables[0].Rows[0]["BillerServiceFlatFee"].ToString();
                    billerServicePercentFee = dsBiller.Tables[0].Rows[0]["BillerServicePercentFee"].ToString();

                    #region <-- Add By Tz To check Credit terms and Limited For Non Balance Agent -->
                    creditlimit = dsBiller.Tables[0].Rows[0]["CREDITLIMIT"].ToString();
                    creditterm = dsBiller.Tables[0].Rows[0]["CREDITTERM"].ToString();
                    credittemrstart = dsBiller.Tables[0].Rows[0]["CREDITTERMSTART"].ToString();

                    isAgreement = dsBiller.Tables[0].Rows[0]["AGREEMENTTYPE"].ToString(); //Added By HNT 26-03-2015                     

                    if (dsBiller.Tables[2].Rows.Count > 0)
                    {
                        totalAgentAmount = String.IsNullOrEmpty(dsBiller.Tables[2].Rows[0]["AGENTAMOUNT"].ToString()) ? "0" : dsBiller.Tables[2].Rows[0]["AGENTAMOUNT"].ToString();
                    }

                    if (String.IsNullOrEmpty(RequestData.Amount))
                        RequestData.Amount = "0";

                    if (string.IsNullOrEmpty(serviceFlatFee))
                        serviceFlatFee = "0";
                    if (string.IsNullOrEmpty(servicePercent))
                        servicePercent = "0";

                    if (string.IsNullOrEmpty(agentFlatFee))
                        agentFlatFee = "0";

                    if (string.IsNullOrEmpty(agentPercent))
                        agentPercent = "0";
                    if (string.IsNullOrEmpty(creditterm))
                        creditterm = "0";
                    if (string.IsNullOrEmpty(creditlimit))
                        creditlimit = "0.00";

                    //Calculate Agent Fee
                    serviceFeeDbl = Utils.getFee(double.Parse(RequestData.Amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                    serviceFee = serviceFeeDbl.ToString("###0.00");

                    totalAmount = (double.Parse(RequestData.Amount) + serviceFeeDbl).ToString("###0.00");

                    oneStopFeeDbl = Utils.getFeeNotRound(double.Parse(RequestData.Amount), float.Parse(oneStopPercent), double.Parse(oneStopFlatFee));
                    oneStopFee = oneStopFeeDbl.ToString("###0.00");

                    agentFeeDbl = Utils.getFeeNotRound(double.Parse(RequestData.Amount), float.Parse(agentPercent), double.Parse(agentFlatFee));
                    agentAmount = double.Parse(RequestData.Amount) - agentFeeDbl;

                    agentAmount += oneStopFeeDbl;

                    billerAmount = GetBillerAmount(double.Parse(RequestData.Amount));

                    writeLog("Amount : " + RequestData.Amount + " | ServiceFee : " + serviceFee +
                        " | AgentFee : " + agentFee + " | 1-Stop Fee : " + oneStopFee +
                        " | AgentAmount : " + agentAmount + " | BillerAmount : " + billerAmount + " | BillerDiscountFee" + BillerDiscountFee + " | BillerServiceFee" + BillerServiceFee);
                    #endregion

                    #region <-- Add By Tz Check Credit Limite and Terms For Non Balance Agent -->
                    if (isAgreement == "Y")
                    {
                        writeLog("Agent Total Amount : " + totalAgentAmount);
                        writeLog("AGREEMENT TYPE is Y. Balance will not be needed.");
                        writeLog("Credit Limit Start:" + credittemrstart);
                        writeLog("Credit Limit:" + creditlimit);
                        writeLog("Creditterm:" + creditterm);
                        if (!String.IsNullOrEmpty(credittemrstart))
                        {
                            writeLog("Credit term strt Not NULL");
                            dtStart = DateTime.Parse(credittemrstart);
                            double convertcreditterm = double.Parse(creditterm);
                            dtStartplusCreditterm = dtStart.AddDays(convertcreditterm);
                        }

                        if ((double.Parse(creditlimit) > 0 && double.Parse(creditterm) > 0))//if ((creditlimit != "0.00" && creditterm != "0"))//This condition will work if both creditlimit and creditterm have values
                        {
                            writeLog("Credit Limit and Credit Terms is grater than 0 creditlimit:" + creditlimit + "|creditterm:" + creditterm);
                            if (dtNow < dtStartplusCreditterm)
                            {
                                writeLog("Credit Term Not Expired yet currentdate:" + dtNow + "|creditterms:" + dtStartplusCreditterm);

                                avalcredit = double.Parse(creditlimit) - double.Parse(totalAgentAmount);
                                writeLog("avaliable credit:" + avalcredit);
                                if (avalcredit >= agentAmount)
                                {

                                    writeLog("Credit Enough = Agent ID : " + agentID.ToString() + "| CreditLimit = " + creditlimit + "| Total Using Amount :" + totalAgentAmount.ToString() + " | Avaliable Credit : " + avalcredit.ToString());

                                }
                                else
                                {
                                    writeLog("Credit Limit Exceeded = Agent ID : " + agentID.ToString() + "| CreditLimit = " + creditlimit + "| Total Using Amount :" + totalAgentAmount.ToString() + " | Avaliable Credit : " + avalcredit.ToString() + " | Agent Amount :" + agentAmount.ToString());

                                    rescode = "11";
                                    resdecs = "Credit Limit Exceeded";

                                    return Utils.getErrorRes(rescode, resdecs);
                                }
                            }
                            else
                            {
                                writeLog("Credit Term Expired = Agent ID : " + agentID.ToString() + " | CreditTerm : " + creditterm + " | CreditTermStartDate :" + credittemrstart + " | CurrentDate " + dtNow);

                                rescode = "11";
                                resdecs = "Credit Term Expired";
                                return Utils.getErrorRes(rescode, resdecs);
                            }
                        }
                        else if (double.Parse(creditlimit) > 0 || double.Parse(creditterm) > 0)//else if (creditlimit != "0.00" || creditterm != "0")//This Condition will work if there have value in creditlimit or in creditterm
                        {
                            writeLog("Credit Limit OR Credit Terms is grater than 0 creditlimit:" + creditlimit + "|creditterm:" + creditterm);
                            if (double.Parse(creditlimit) > 0)
                            {
                                writeLog("Credit Limit  is grater than 0 creditlimit:" + creditlimit);
                                avalcredit = double.Parse(creditlimit) - double.Parse(totalAgentAmount);
                                if (avalcredit >= agentAmount)
                                {
                                    writeLog("Credit Enough = Agent ID : " + agentID.ToString() + " | Credit : " + avalcredit.ToString());
                                }
                                else
                                {
                                    writeLog("Credit Limit Exceeded = Agent ID : " + agentID.ToString() + "| CreditLimit = " + creditlimit + "| Total Using Amount :" + totalAgentAmount.ToString() + " | Avaliable Credit : " + avalcredit.ToString() + " | Agent Amount :" + agentAmount.ToString());

                                    rescode = "11";
                                    resdecs = "Credit Limit Exceeded";
                                    return Utils.getErrorRes(rescode, resdecs);
                                }
                            }
                            else if (double.Parse(creditterm) > 0)
                            {
                                writeLog("Credit Credit Terms is grater than 0 creditterm:" + creditterm);
                                if (dtNow < dtStartplusCreditterm)
                                {
                                    writeLog("Credit Terms Still avaliable CurrentDate:" + dtNow + "ExpiryDate:" + dtStartplusCreditterm);
                                }
                                else
                                {
                                    writeLog("Credit Term Expired = Agent ID : " + agentID.ToString() + " | CreditTerm : " + creditterm + " | CreditTermStartDate :" + credittemrstart + " | CurrentDate " + dtNow);

                                    rescode = "11";
                                    resdecs = "Credit Term Expired";
                                    return Utils.getErrorRes(rescode, resdecs);
                                }
                            }
                        }


                    }
                    #endregion

                    RequestData.ResCode = "00";
                    RequestData.ResDesc = "Success";

                }
                else
                {
                    rescode = "01";
                    resdecs = "Invalid Services";
                    return Utils.getErrorRes(rescode, resdecs);
                }
            }
            else
            {
                rescode = "01";
                resdecs = "System Busy";
                return Utils.getErrorRes(rescode, resdecs);
            }
            #endregion
        }
        RepaymentServiceFeesResMdl resmodel = new RepaymentServiceFeesResMdl();
        resmodel.Version = RequestData.Version;
        resmodel.MessageID = RequestData.MessageID;
        resmodel.ResCode = RequestData.ResCode;
        resmodel.ResDesc = RequestData.ResDesc;
        resmodel.ServiceFee = serviceFee;
        resmodel.Amount = RequestData.Amount;

        string repaymentSerFeeRes = Utils.getRepaymentServiceFeeRes(resmodel);
        return repaymentSerFeeRes;
    }

    public RepaymentServiceFeesReqMdl IsValidateRepaymentServiceFeeReq(Hashtable ht)
    {
        RepaymentServiceFeesReqMdl requestData = new RepaymentServiceFeesReqMdl();

        requestData.Result = true;
        if (ht.ContainsKey("Version"))
        {
            requestData.Version = ht["Version"].ToString();
        }
        else
        {
            requestData.ResCode = "06";
            requestData.ResDesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            requestData.Result = false;
            return requestData;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            requestData.TimeStamp = ht["TimeStamp"].ToString();
        }
        else
        {
            requestData.ResCode = "06";
            requestData.ResDesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            requestData.Result = false;
            return requestData;
        }

        if (ht.ContainsKey("MessageID"))
        {
            requestData.MessageID = ht["MessageID"].ToString();
        }
        else
        {
            requestData.ResCode = "06";
            requestData.ResDesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            requestData.Result = false;
            return requestData;
        }

        if (ht.ContainsKey("Email"))
        {
            requestData.Email = ht["Email"].ToString();
        }
        else
        {
            requestData.ResCode = "06";
            requestData.ResDesc = "Invalid Request";
            writeLog("Error in Validation : Missing Email <Email> Tag");
            requestData.Result = false;
            return requestData;
        }

        if (ht.ContainsKey("Password"))
        {
            requestData.Password = ht["Password"].ToString();
        }
        else
        {
            requestData.ResCode = "06";
            requestData.ResDesc = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Password> Tag");
            requestData.Result = false;
            return requestData;
        }

        if (ht.ContainsKey("TaxID"))
        {
            requestData.TaxID = ht["TaxID"].ToString();
        }
        else
        {
            requestData.ResCode = "06";
            requestData.ResDesc = "Invalid Request";
            writeLog("Error in Validation : Missing TaxID <TaxID> Tag");
            requestData.Result = false;
            return requestData;
        }
        if (ht.ContainsKey("Amount"))
        {
            requestData.Amount = ht["Amount"].ToString();
        }
        else
        {
            requestData.ResCode = "06";
            requestData.ResDesc = "Invalid Request";
            writeLog("Error in validation : Missing Amount <Amount> Tag");
            requestData.Result = false;
            return requestData;
        }


        if (String.IsNullOrEmpty(requestData.Version) || String.IsNullOrEmpty(requestData.TimeStamp) ||
            String.IsNullOrEmpty(requestData.MessageID) || String.IsNullOrEmpty(requestData.Email) ||
            String.IsNullOrEmpty(requestData.Password) || String.IsNullOrEmpty(requestData.Email) || String.IsNullOrEmpty(requestData.Amount))

        {
            requestData.ResCode = "07";
            requestData.ResDesc = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            requestData.Result = false;
            return requestData;
        }

        //Check Authecation
        string errmsg = string.Empty;
        DataSet ds = null;
        bool flg = false;
        string passwordDB = "";
        string userStatusDB = "";
        string appver = string.Empty;
        flg = _agentWCF.getAuthentication(requestData.Email, requestData.Password, out ds, out errmsg);
        if (flg)
        {
            try
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    int.TryParse(ds.Tables[0].Rows[0]["AGENTID"].ToString(), out agentID);
                    this.agentCode = Convert.ToString(ds.Tables[0].Rows[0]["AGENTCODE"]);
                    this.servicePercent = Convert.ToString(ds.Tables[0].Rows[0]["AGENTFEEPERCENT"]);
                    this.agentName = ds.Tables[0].Rows[0]["AGENTNAME"].ToString();
                    this.branchCode = ds.Tables[0].Rows[0]["BRANCHCODE"].ToString();
                    this.branchName = ds.Tables[0].Rows[0]["BRANCHNAME"].ToString();
                    passwordDB = Convert.ToString(ds.Tables[0].Rows[0]["AGENTUSERPASSWORD"]);
                    userStatusDB = Convert.ToString(ds.Tables[0].Rows[0]["USERSTATUS"]);
                    appver = Convert.ToString(ds.Tables[0].Rows[0]["APPVERSION"]);

                    writeLog("APPVERSION:" + appver + " AGETN ID : " + agentID.ToString() + " | AGENT CODE : " + agentCode + " | AGENT NAME : " + agentName + " | BRANCH CODE : " + branchCode);


                    if (passwordDB != requestData.Password)
                    {
                        requestData.ResCode = "05";
                        requestData.ResDesc = "Incorrect Password";
                        writeLog(requestData.ResDesc + errmsg);
                        requestData.Result = false;
                        return requestData;

                    }
                    else if (userStatusDB != "Y")
                    {
                        requestData.ResCode = "05";
                        requestData.ResDesc = "Login ID Locked";
                        writeLog(requestData.ResDesc + errmsg);
                        requestData.Result = false;
                        return requestData;
                    }

                }
                else
                {
                    requestData.ResCode = "05";
                    requestData.ResDesc = "Incorrect LoginID";
                    writeLog(requestData.ResDesc + errmsg);
                    requestData.Result = false;
                }
            }
            catch (Exception ex)
            {
                writeLog("Error In Authtentication Inquiry Request" + ex.Message);
            }
        }
        else
        {
            requestData.ResCode = "--";
            requestData.ResDesc = "DB Error";
            writeLog("Error in Authentication : " + errmsg);
            requestData.Result = false;
            return requestData;
        }
        return requestData;
    }
    #endregion

    #region <-- Inquiry -->

    public string inquiry2Biller(string reqXml)
    {
        writeLog("$$$$$$$$$$$$$$$ inquiry2Biller $$$$$$$$$$$$$$$");
        writeLog("REQ XML : " + reqXml);
        #region <-- Variable region -->
        string paymentType = string.Empty;
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;

        string ref1 = string.Empty;
        string ref2 = string.Empty;
        string ref3 = string.Empty;
        string ref4 = string.Empty;
        string ref5 = string.Empty;
        string ref1Name = string.Empty;
        string ref2Name = string.Empty;
        string ref3Name = string.Empty;
        string ref4Name = string.Empty;
        string ref5Name = string.Empty;
        string amount = string.Empty;
        string inquirytype = string.Empty;
        string rescode = string.Empty;
        string resdecs = string.Empty;
        string merchantname = string.Empty;
        string merchantid = string.Empty;
        string merchantlogo = string.Empty;
        string productdesc = string.Empty;
        string status = string.Empty;
        string expiry = string.Empty;
        string taxID = string.Empty;
        string MapTaxID = string.Empty;

        string messageid = string.Empty;
        string requestedby = string.Empty;
        string hashvalue = string.Empty;
        string isAgreement = "N";
        string response = "";
        string TodayTxnCount = string.Empty;
        string TodayTxnAmount = string.Empty;
        string totalAgentAmount = string.Empty;
        string totalAmount = string.Empty;
        string qr = string.Empty;
        string taxxid = string.Empty;
       
        string canalPlusReqType = string.Empty;
        string sessionID = string.Empty;
        var availabelBalance = 0.0;

        #endregion

        try
        {
            string imgURL = string.Empty;
            Hashtable ht = Utils.getHTableFromXML(reqXml);
            if (!IsValidateInquiryReq(ht, out code, out desp, out version, out ts, out email, out password, out ref1, out ref2,
                out ref3, out ref4, out ref5, out inquirytype, out amount, out taxID, out ref1Name, out ref2Name, out ref3Name,
                out requestedby, out messageid, out qr, out MapTaxID, out canalPlusReqType, out sessionID, out paymentType))
            {
                return Utils.getErrorRes(code, desp);
            }
            else
            {
                #region <-- Check the biller is 123 Or Airline not using start from 25-April-2016 Tz -->

                #endregion

                #region <-- Check the biller is 123  25-April-2016 Tz -->
                if (MapTaxID == "1230000000000")
                {
                    if (ref1.StartsWith("000000"))
                    {
                        ref1 = ref1.Substring(6, ref1.Length - 6);
                    }

                    if (IsABCCashCard(ref1))
                    {
                        if (CheckAbcCashAmount(amount))
                        {
                            writeLog(" MessageId : " + messageid + " 123 Inquiry $$$$$$$$$$$$$$$$$$$$$$$ This Is ABC CashCard $$$$$$$$$$$$$$$$$$$$$$$$");
                            this.serviceFlatFee = ConfigurationManager.AppSettings["AbcCardServiceFlatFee"].ToString();
                            this.servicePercent = ConfigurationManager.AppSettings["AbcCardServicePercentFee"].ToString();
                            this.agentFlatFee = ConfigurationManager.AppSettings["AbcCardAgentFlatFee"].ToString();
                            this.agentPercent = ConfigurationManager.AppSettings["AbcCardAgentPercentFee"].ToString();
                            this.oneStopFlatFee = ConfigurationManager.AppSettings["AbcCard1StopFlatFee"].ToString();
                            this.oneStopPercent = ConfigurationManager.AppSettings["AbcCard1StopPercentFee"].ToString();
                            taxxid = "AbcCashCard";
                        }
                        else
                        {
                            string minamt = string.Empty;
                            string maxamt = string.Empty;
                            minamt = ConfigurationManager.AppSettings["MinAmount"].ToString();
                            maxamt = ConfigurationManager.AppSettings["MaxAmount"].ToString();
                            return Utils.getErrorRes("06", string.Format("Topup amount must be between {0} and {1}", int.Parse(minamt).ToString("#,###"), int.Parse(maxamt).ToString("#,###")));
                        }
                    }
                    else
                    {
                        #region <-- If Request is from 123  get Merchent ID from 123 to set service fees for Airline. -->
                        writeLog(" MessageId : " + messageid + " 123 Inquiry $$$$$$$$$$$$$$$$$$Request From QR$$$$$$$$$$$$$$$$$$$$$$");
                        string agentcode = ConfigurationManager.AppSettings["123ChannelCode"].ToString();//"1STOP";
                        string hashstr = Utils.hashstrReq123(version, ts, messageid, agentcode, ref1);

                        string reqXML123 = "<InquiryReq><Version>" + version + "</Version><TimeStamp>" + ts
                            + "</TimeStamp>"
                            + "<MessageID>" + messageid + "</MessageID>"
                            + "<AgentCode>" + agentcode + "</AgentCode>"
                           + "<PaymentCode>" + ref1
                            + "</PaymentCode><RequestBy>" + MapTaxID
                            + "</RequestBy><Hash>" + hashstr
                            + "</Hash></InquiryReq>";
                        writeLog("MESSAGE ID :" + messageid + " 123 Inquiry | Payment Code :" + ref1 + "taxID :" + MapTaxID);

                        RouteAPI api_service = new RouteAPI();
                        writeLog(" MessageId : " + messageid + "123 Inquiry Req QR : " + reqXML123);
                        response = api_service.Apicalling123(reqXML123);
                        writeLog(" MessageId : " + messageid + "123 Inquiry Res QR : " + response);
                        Hashtable htt = Utils.getHTableFromXML(response);
                        string responseCode = string.Empty;
                        string resDesc = string.Empty;
                        if (IsValidateInquiryFirstRes123(htt, out taxxid, out responseCode, out resDesc))
                        {
                            writeLog(" MessageId : " + messageid + " 123 Inquiry $$$$$$$$$$$$$$$$QR 123 RESPONSE OK Old Tax ID" + MapTaxID + "| taxid:" + taxxid + "$$$$$$$$$$$$$$$$$$$$$$$$");
                        }
                        else
                        {

                            writeLog(" MessageId : " + messageid + " 123 Inquiry $$$$$$$$$$$$$$$$$VALADATE NOT OK$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
                            return Utils.getErrorRes(responseCode, resDesc);
                        }
                        #endregion
                    }
                }
                #endregion

                DataSet dsBiller = null;
                string errmsg = string.Empty;
                string billerid = string.Empty;
                StringBuilder sb = new StringBuilder();
                if (_agentWCF.checkBillerID(taxID, agentID, email, out dsBiller, out errmsg))
                {
                    writeLog("MessageId : " + messageid + ", Inquiry, TaxID : " + taxID + " agentID " + agentID + " checkbiller Id successful");
                    if (dsBiller.Tables[0].Rows.Count > 0)
                    {
                        writeLog("MessageId : " + messageid + ", Inquiry, TaxID : " + taxID + " agentID " + agentID + " check biller Id Table rows exist");
                        billerid = Convert.ToString(dsBiller.Tables[0].Rows[0]["BILLERID"]);
                        writeLog("MessageId : " + messageid + ", Inquiry, TaxID : " + taxID + " agentID " + agentID + " biller Id : " + billerid);
                        billerName = dsBiller.Tables[0].Rows[0]["BILLERNAME"].ToString();
                        writeLog("MessageId : " + messageid + ", Inquiry, TaxID : " + taxID + " agentID " + agentID + " biller Name : " + billerName);

                        if (!string.IsNullOrEmpty(dsBiller.Tables[0].Rows[0]["BILLERLOGO"].ToString()))
                            billerLogo = Convert.ToBase64String((byte[])dsBiller.Tables[0].Rows[0]["BILLERLOGO"]);

                        imgURL = ConfigurationManager.AppSettings["BillerLogoPath"] + dsBiller.Tables[0].Rows[0]["BILLERID"].ToString() + ".png";

                        ref1Name = dsBiller.Tables[0].Rows[0]["REF1NAME"].ToString();
                        ref2Name = dsBiller.Tables[0].Rows[0]["REF2NAME"].ToString();
                        ref3Name = dsBiller.Tables[0].Rows[0]["REF3NAME"].ToString();
                        ref4Name = dsBiller.Tables[0].Rows[0]["REF4NAME"].ToString();
                        ref5Name = dsBiller.Tables[0].Rows[0]["REF5NAME"].ToString();
                        if (MapTaxID == "1230000000000")
                        {
                            if (taxxid == "1230000000000")
                            {
                                serviceFlatFee = dsBiller.Tables[0].Rows[0]["SERVICEFLATFEE"].ToString();
                                servicePercent = dsBiller.Tables[0].Rows[0]["SERVICEPERCENTFEE"].ToString();
                                agentFlatFee = dsBiller.Tables[0].Rows[0]["AGENTFLATFEE"].ToString();
                                agentPercent = dsBiller.Tables[0].Rows[0]["AGENTPERCENTFEE"].ToString();
                                oneStopFlatFee = dsBiller.Tables[0].Rows[0]["ONESTOPFLATFEE"].ToString();
                                oneStopPercent = dsBiller.Tables[0].Rows[0]["ONESTOPPERCENTFEE"].ToString();
                            }
                        }
                        else
                        {
                            serviceFlatFee = dsBiller.Tables[0].Rows[0]["SERVICEFLATFEE"].ToString();
                            servicePercent = dsBiller.Tables[0].Rows[0]["SERVICEPERCENTFEE"].ToString();
                            agentFlatFee = dsBiller.Tables[0].Rows[0]["AGENTFLATFEE"].ToString();
                            agentPercent = dsBiller.Tables[0].Rows[0]["AGENTPERCENTFEE"].ToString();
                            oneStopFlatFee = dsBiller.Tables[0].Rows[0]["ONESTOPFLATFEE"].ToString();
                            oneStopPercent = dsBiller.Tables[0].Rows[0]["ONESTOPPERCENTFEE"].ToString();
                        }

                        billerFlatFee = dsBiller.Tables[0].Rows[0]["BillerFlatFee"].ToString();
                        billerPercentFee = dsBiller.Tables[0].Rows[0]["BillerPercentFee"].ToString();
                        billerServiceFlatFee = dsBiller.Tables[0].Rows[0]["BillerServiceFlatFee"].ToString();
                        billerServicePercentFee = dsBiller.Tables[0].Rows[0]["BillerServicePercentFee"].ToString();

                        #region <-- Add By Tz To check Credit terms and Limited For Non Balance Agent -->
                        if (string.IsNullOrEmpty(ref1)) ref1 = dsBiller.Tables[0].Rows[0]["REFID1"].ToString(); //Added By hnt 25-Mar-2015

                        creditlimit = dsBiller.Tables[0].Rows[0]["CREDITLIMIT"].ToString();
                        creditterm = dsBiller.Tables[0].Rows[0]["CREDITTERM"].ToString();
                        credittemrstart = dsBiller.Tables[0].Rows[0]["CREDITTERMSTART"].ToString();
                        isAutoCreditReset = dsBiller.Tables[0].Rows[0]["ISAUTORESETCREDIT"] == DBNull.Value ? "N" : dsBiller.Tables[0].Rows[0]["ISAUTORESETCREDIT"].ToString();
                        isSendCreditResetEmail = dsBiller.Tables[0].Rows[0]["ISSENDCREDITRESETEMAIL"] == DBNull.Value ? "N" : dsBiller.Tables[0].Rows[0]["ISSENDCREDITRESETEMAIL"].ToString();

                        isAgreement = dsBiller.Tables[0].Rows[0]["AGREEMENTTYPE"].ToString(); //Added By HNT 26-03-2015                     
                        if (dsBiller.Tables[1].Rows.Count > 0)
                        {
                            TodayTxnCount = String.IsNullOrEmpty(dsBiller.Tables[1].Rows[0]["TODAYTXNCOUNT"].ToString()) ? "0" : dsBiller.Tables[1].Rows[0]["TODAYTXNCOUNT"].ToString();
                            TodayTxnAmount = String.IsNullOrEmpty(dsBiller.Tables[1].Rows[0]["TODAYTXNAMOUNT"].ToString()) ? "0" : dsBiller.Tables[1].Rows[0]["TODAYTXNAMOUNT"].ToString();
                        }
                        if (dsBiller.Tables[2].Rows.Count > 0)
                        {
                            totalAgentAmount = String.IsNullOrEmpty(dsBiller.Tables[2].Rows[0]["AGENTAMOUNT"].ToString()) ? "0" : dsBiller.Tables[2].Rows[0]["AGENTAMOUNT"].ToString();
                        }

                        if (String.IsNullOrEmpty(amount))
                            amount = "0";

                        if (string.IsNullOrEmpty(serviceFlatFee))
                            serviceFlatFee = "0";
                        if (string.IsNullOrEmpty(servicePercent))
                            servicePercent = "0";

                        if (string.IsNullOrEmpty(agentFlatFee))
                            agentFlatFee = "0";

                        if (string.IsNullOrEmpty(agentPercent))
                            agentPercent = "0";
                        if (string.IsNullOrEmpty(creditterm))
                            creditterm = "0";
                        if (string.IsNullOrEmpty(creditlimit))
                            creditlimit = "0.00";

                        if (MapTaxID == "0000000000009")//663 Remit Calculate  fees as below
                        {
                            writeLog("$$$$$$$$$$$$$$$$$$ This IS 663 Cashout $$$$$$$$$$$$$$$$$$$$$$");
                            DataSet ds = new DataSet();
                            string minAmount = string.Empty;
                            string maxAmount = string.Empty;
                            string txnFee = string.Empty;
                            string serviceCharge = string.Empty;
                            string agentCommissionPercent = string.Empty;
                            string superAgentCommissionPercent = string.Empty;
                            if (_agentWCF.get663FeesByAmount(int.Parse(billerid), decimal.Parse(amount), out ds, out errmsg))
                            {
                                minAmount = ds.Tables[0].Rows[0]["MINAMOUNT"].ToString();
                                maxAmount = ds.Tables[0].Rows[0]["MAXAMOUNT"].ToString();
                                txnFee = ds.Tables[0].Rows[0]["TRANSACTIONFEES"].ToString();
                                serviceCharge = "0";
                                agentCommissionPercent = ds.Tables[0].Rows[0]["AGENTCOMMISSIONPERCENT"].ToString();
                                superAgentCommissionPercent = ds.Tables[0].Rows[0]["SUPERAGENTCOMMISSIONPERCENT"].ToString();
                                writeLog("amount range:" + minAmount + "to" + maxAmount + "|TransactionFees:" + txnFee + "|ServiceCharge:" + serviceCharge + "|AgentCommissionPercent:" + agentCommissionPercent + "|SuperAgentComissionPercent:" + superAgentCommissionPercent);
                                serviceFeeDbl = double.Parse(serviceCharge);
                                serviceFee = serviceFeeDbl.ToString("###0.00");
                                totalAmount = (double.Parse(amount) + serviceFeeDbl).ToString("###0.00");

                                oneStopFeeDbl = 0;
                                oneStopFee = oneStopFeeDbl.ToString("###0.00");

                                agentFeeDbl = ((double.Parse(txnFee) * double.Parse(agentCommissionPercent)) / 100);
                                agentAmount = double.Parse(amount) + agentFeeDbl;
                                agentAmount += oneStopFeeDbl;

                                billerAmount = GetBillerAmount(double.Parse(amount));

                                writeLog("Amount : " + amount + " | ServiceFee : " + serviceFee +
                                " | AgentFee : " + agentFee + " | 1-Stop Fee : " + oneStopFee +
                                " | AgentAmount : " + agentAmount + " | BillerAmount : " + billerAmount + " | BillerDiscountFee" + BillerDiscountFee + " | BillerServiceFee" + BillerServiceFee);
                            }
                            else
                            {
                                writeLog("Error In Getting 663 Service Fees");
                                return Utils.getErrorRes("06", "Transaction not successful cannot calculate service fees.");
                            }
                        }
                        else
                        {
                            writeLog("Inquiry Biller Calculate Agent Fee!!!!");
                            // <-- Calculate Agent Fee -->
                            writeLog("Service Percent : " + servicePercent + ", Service Flat Fee : " + serviceFlatFee + " Amount : " + amount);
                            serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                            serviceFee = serviceFeeDbl.ToString("###0.00");

                            totalAmount = (double.Parse(amount) + serviceFeeDbl).ToString("###0.00");

                            oneStopFeeDbl = Utils.getFeeNotRound(double.Parse(amount), float.Parse(oneStopPercent), double.Parse(oneStopFlatFee));
                            oneStopFee = oneStopFeeDbl.ToString("###0.00");

                            agentFeeDbl = Utils.getFeeNotRound(double.Parse(amount), float.Parse(agentPercent), double.Parse(agentFlatFee));
                            agentAmount = double.Parse(amount) - agentFeeDbl;
                            writeLog("Agent Amount in Inquiry Biller : " + agentAmount);

                            agentAmount += oneStopFeeDbl;

                            billerAmount = GetBillerAmount(double.Parse(amount));

                            writeLog("Amount : " + amount + " | ServiceFee : " + serviceFee +
                                 " | AgentFee : " + agentFee + " | 1-Stop Fee : " + oneStopFee +
                                 " | AgentAmount : " + agentAmount + " | BillerAmount : " + billerAmount + " | BillerDiscountFee" + BillerDiscountFee + " | BillerServiceFee" + BillerServiceFee);
                        }
                        #endregion

                        #region <-- Add By Tz Check Credit Limit and Terms For Non Balance Agent -->
                        if (isAgreement == "Y")
                        {
                            writeLog("Agent Total Amount : " + totalAgentAmount);
                            writeLog("AGREEMENT TYPE is Y. Balance will not be needed.");
                            writeLog("Credit Limit Start:" + credittemrstart);
                            writeLog("Credit Limit:" + creditlimit);
                            writeLog("Creditterm:" + creditterm);
                            if (MapTaxID == "0000000000009")
                            {
                                writeLog("$$$$$$$$$$$$$$ 663 CashOut is not allow for Non BalanceBase Agent $$$$$$$$$$$$$$$$$$$");
                                return Utils.getErrorRes("10", "Agent not allowed");
                            }

                            CreditLimitResultModel result = new CreditLimitResultModel();
                            CreditLimitModel CreditLimitMdl = new CreditLimitModel();
                            CreditLimitMdl.totalAgentAmount = totalAgentAmount;
                            result = isEnoughCreditTermsAndLimit(CreditLimitMdl);
                            if (!result.result)
                            {
                                return Utils.getErrorRes(result.rescode, result.resdesc);
                            }
                        }
                        else
                        {
                            writeLog("Agent Total Amount : " + totalAgentAmount);
                            writeLog("AGREEMENT TYPE is N. Balance will be needed.");
                            writeLog("Credit Limit Start:" + credittemrstart);
                            writeLog("Credit Limit:" + creditlimit);
                            writeLog("Creditterm:" + creditterm);
                            double avlBal = 0;
                            double ledBal = 0;

                            //if not MalarMyaineRedeem,123RemitCashOut , MalarMyaineCodeGenerate , 663 Cashout , MercyCorps Generate,MercyCorpsRedeem,PlayStationNetwork, XBoxOne or SteamWalletSGD will check balance.
                            if (MapTaxID != "7777777777777" &&
                                MapTaxID != ConfigurationManager.AppSettings["123RemitCashOut"].ToString() &&
                                MapTaxID != "0000000000018" &&
                                MapTaxID != "0000000000009" &&
                                MapTaxID != "0000000000010" &&
                                MapTaxID != "0000000000011" &&
                                MapTaxID != "0000000000056" &&
                                MapTaxID != ConfigurationManager.AppSettings["PlayStationNetworkTaxId"] &&
                                MapTaxID != ConfigurationManager.AppSettings["XBoxOneTaxId"] &&
                                MapTaxID != ConfigurationManager.AppSettings["SteamWalletSGDMapTaxId"] &&
                                MapTaxID != ConfigurationManager.AppSettings["PubgUC"] &&
                                MapTaxID != ConfigurationManager.AppSettings["iTunesTaxId"])
                            {
                                #region <-- Balance Base -->
                                writeLog("AGREEMENT TYPE is N. Balance must be available.");
                                if (!_agentWCF.getBalance(agentID, out avlBal, out ledBal))
                                {
                                    writeLog("Error in getBalance");
                                }

                                availabelBalance = avlBal;
                                if (avlBal >= agentAmount)
                                {
                                    writeLog("Balance Enough = Agent ID : " + agentID.ToString() + " | Balance : " + avlBal.ToString());

                                    CreditLimitResultModel result = new CreditLimitResultModel();
                                    CreditLimitModel CreditLimitMdl = new CreditLimitModel();
                                    CreditLimitMdl.totalAgentAmount = totalAgentAmount;
                                    result = isEnoughCreditTermsAndLimit(CreditLimitMdl);
                                    if (!result.result)
                                    {
                                        return Utils.getErrorRes(result.rescode, result.resdesc);
                                    }
                                }
                                else
                                {
                                    writeLog("Inquiry Biller Balance Insufficient!!!!!");
                                    writeLog("Balance NOT Enough = Agent ID : " + agentID.ToString() + " | Balance : " + avlBal.ToString());

                                    rescode = "10";
                                    resdecs = "Insufficient amount. Please load your balance.";

                                    return Utils.getErrorRes(rescode, resdecs, MapTaxID);
                                }
                                #endregion
                            }
                        }
                        #endregion
                    }
                    else
                    {
                        rescode = "01";
                        resdecs = "Invalid Services";
                        return Utils.getErrorRes(rescode, resdecs);
                    }
                }
                writeLog("$$$$$$$$$$$$$$$$ This is Biller Requests $$$$$$$$$$$$$$$$");

                // Validate Amount Limitations
                string desc = string.Empty;
                bool isValidAmount = true;
                if (taxID != ConfigurationManager.AppSettings["YadanarponTeleportTaxId"] || ref1 != ConfigurationManager.AppSettings["YTPMonthlyBillType"] || taxID != ConfigurationManager.AppSettings["MobileLegendTaxID"] || taxID != ConfigurationManager.AppSettings["EasyMicrofinanceTaxId"] || taxID != ConfigurationManager.AppSettings["HanaMicrofinanceTaxId"])
                {
                    writeLog("Validate Amount");
                    isValidAmount = Utils.ValidateAmountLimitation(taxID, Convert.ToDecimal(amount), out code, out desc);
                }

                if (isValidAmount)
                {
                    #region eService Factory
                    var factory = new eServiceFactory();
                    var billerManager = factory.GetBillerManager(taxID);
                    if (billerManager != null)
                    {
                        var inquiryModel = new inquiryModel()
                        {
                            ResCode = "00",
                            ResDesc = "Success",
                            taxID = taxID,
                            merchantname = merchantname,
                            merchantlogo = merchantlogo,
                            billerlogo = billerLogo,
                            billername = billerName,
                            ref1 = ref1,
                            ref2 = ref2,
                            ref3 = ref3,
                            ref4 = ref4,
                            ref5 = ref5,
                            ref1Name = ref1Name,
                            ref2Name = ref2Name,
                            ref3Name = ref3Name,
                            ref4Name = ref4Name,
                            ref5Name = ref5Name,
                            amount = amount,
                            serviceFee = serviceFee,
                            status = status,
                            expiry = expiry,
                            productDescription = productdesc,
                            imgUrl = imgURL,
                            messageid = messageid,
                            servicePercent = servicePercent,
                            serviceFlatFee = serviceFlatFee
                        };
                        return billerManager.Inquiry(inquiryModel);
                    }

                    #endregion

                    #region MmBusticket & Flight
                    if (MapTaxID == ConfigurationManager.AppSettings["MmBusticket"].ToString() || MapTaxID == ConfigurationManager.AppSettings["Flight"].ToString())
                    {
                        var logAppender = "MessageId | " + messageid + " | TaxId : " + MapTaxID;
                        writeLog(logAppender + "MapTaxID : " + MapTaxID);

                        var forwarderService = new ForwarderService.ServiceClient();

                        var transactionResponse = forwarderService.GetTransactionByToken(ref1);
                        if (!transactionResponse._success) return Utils.getErrorRes("06", transactionResponse._message);

                        var result = JsonConvert.DeserializeObject<TblTransaction>(transactionResponse._result);

                        var reference1 = result.Refid1;
                        var reference3 = result.Refid3;
                        if (MapTaxID == ConfigurationManager.AppSettings["Flight"].ToString())
                        {
                            reference1 = result.Transactionid.ToString();
                            reference3 = string.Empty;
                        }

                        inquiryResponseModel inqresmdl = new inquiryResponseModel();
                        rescode = "00";
                        resdecs = "Success";
                        inqresmdl.ResCode = rescode;
                        inqresmdl.ResDesc = resdecs;
                        inqresmdl.taxID = taxID;
                        inqresmdl.merchantname = merchantname;
                        inqresmdl.merchantlogo = merchantlogo;
                        inqresmdl.billername = billerName;
                        inqresmdl.billerlogo = billerLogo;
                        inqresmdl.ref1 = reference1;
                        inqresmdl.ref2 = result.Refid2;
                        inqresmdl.ref3 = reference3;
                        inqresmdl.ref4 = result.Transactionid.ToString();
                        inqresmdl.ref5 = result.Refid5;
                        inqresmdl.ref1Name = ref1Name;
                        inqresmdl.ref2Name = ref2Name;
                        inqresmdl.ref3Name = ref3Name;
                        inqresmdl.ref4Name = ref4Name;
                        inqresmdl.ref5Name = ref5Name;
                        inqresmdl.amount = result.Transactionamount.ToString();
                        inqresmdl.serviceFee = result.Servicefee.ToString();
                        inqresmdl.status = status;
                        inqresmdl.expiry = expiry;
                        inqresmdl.productDescription = productdesc;
                        inqresmdl.imgUrl = imgURL;
                        return Utils.getInquiryRes(inqresmdl);
                    }

                    #endregion

                    #region PUBG

                    if (MapTaxID == ConfigurationManager.AppSettings["PubgUC"].ToString())
                    {
                        inquiryResponseModel inqresmdl = new inquiryResponseModel();
                        rescode = "00";
                        resdecs = "Success";
                        inqresmdl.ResCode = rescode;
                        inqresmdl.ResDesc = resdecs;
                        inqresmdl.taxID = taxID;
                        inqresmdl.merchantname = merchantname;
                        inqresmdl.merchantlogo = merchantlogo;
                        inqresmdl.billername = billerName;
                        inqresmdl.billerlogo = billerLogo;
                        inqresmdl.ref1 = ref1;
                        inqresmdl.ref2 = ref2;
                        inqresmdl.ref3 = ref3;
                        inqresmdl.ref4 = ref4;
                        inqresmdl.ref5 = ref5;
                        inqresmdl.ref1Name = ref1Name;
                        inqresmdl.ref2Name = ref2Name;
                        inqresmdl.ref3Name = ref3Name;
                        inqresmdl.ref4Name = ref4Name;
                        inqresmdl.ref5Name = ref5Name;
                        inqresmdl.amount = amount;
                        inqresmdl.serviceFee = serviceFee;
                        inqresmdl.status = status;
                        inqresmdl.expiry = expiry;
                        inqresmdl.productDescription = productdesc;
                        inqresmdl.imgUrl = imgURL;
                        return Utils.getInquiryRes(inqresmdl);

                    }

                    #endregion

                    #region <-- 123 Biller -->
                    // Request to Biller API 

                    if (MapTaxID == "1230000000000")// || taxID == "0000000000010" || taxID == "0000000000012" || taxID == "0000000000011" ||  taxID == "0000000000013" || taxID == "0000000000014") /////123
                    {

                        //  0000000000008 Man Yatanar bone
                        //  0000000000007 Myanmar National
                        writeLog("This is 1-2-3 Inquiry ");
                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {

                            #region Enquiry Response When simulator is turn on
                            writeLog("Simulator Y");
                            status = "PE";
                            productdesc = "Air Ticket";
                            amount = "2000";
                            serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));//double.Parse((double.Parse(agentFee)).ToString("#,##0.00"));
                            serviceFee = serviceFeeDbl.ToString("###0.00");

                            inquiryResponseModel inqRes = new inquiryResponseModel();
                            inqRes.ResCode = "00";
                            inqRes.ResDesc = "Success";
                            inqRes.taxID = taxID;
                            inqRes.merchantname = merchantname;
                            inqRes.merchantlogo = merchantlogo;
                            inqRes.billername = billerName;
                            inqRes.billerlogo = billerLogo;
                            inqRes.ref1 = ref1;
                            inqRes.ref2 = ref2;
                            inqRes.ref3 = ref3;
                            inqRes.ref4 = ref4;
                            inqRes.ref5 = ref5;
                            inqRes.ref1Name = ref1Name;
                            inqRes.ref2Name = ref2Name;
                            inqRes.ref3Name = ref3Name;
                            inqRes.ref4Name = ref4Name;
                            inqRes.ref5Name = ref5Name;
                            inqRes.amount = amount;
                            inqRes.serviceFee = serviceFee;
                            inqRes.status = status;
                            inqRes.expiry = expiry;
                            inqRes.productDescription = productdesc;
                            inqRes.imgUrl = imgURL;

                            return Utils.getInquiryRes(inqRes);

                            #endregion
                        }
                        else
                        {

                            #region <-- When Simulater is turn off -->
                            string agentcode = string.Empty;
                            string hashstr = string.Empty;
                            string reqXML123 = string.Empty;
                            agentcode = ConfigurationManager.AppSettings["123ChannelCode"].ToString();
                            hashstr = Utils.hashstrReq123(version, ts, messageid, agentcode, ref1);

                            if (IsABCCashCard(ref1))
                            {
                                reqXML123 = "<InquiryReq><Version>" + version + "</Version><TimeStamp>" + ts
                                     + "</TimeStamp>"
                                     + "<MessageID>" + messageid + "</MessageID>"
                                     + "<AgentCode>" + agentcode + "</AgentCode>"
                                    + "<PaymentCode>" + ref1
                                     + "</PaymentCode><RequestBy>" + ConfigurationManager.AppSettings["AbcCardMerchantID"].ToString()
                                     + "</RequestBy><Amount>" + Utils.getFromOrginalTo12Digit(amount) + "</Amount><InvoiceNo></InvoiceNo><Hash>" + hashstr
                                     + "</Hash></InquiryReq>";
                            }
                            else
                            {
                                reqXML123 = "<InquiryReq><Version>" + version + "</Version><TimeStamp>" + ts
                                    + "</TimeStamp>"
                                    + "<MessageID>" + messageid + "</MessageID>"
                                    + "<AgentCode>" + agentcode + "</AgentCode>"
                                   + "<PaymentCode>" + ref1
                                    + "</PaymentCode><RequestBy>" + taxID
                                    + "</RequestBy><Hash>" + hashstr
                                    + "</Hash></InquiryReq>";
                            }
                            RouteAPI api_service = new RouteAPI();
                            writeLog(" MessageId : " + messageid + " 123 Inquiry Req : " + reqXML123);
                            response = api_service.Apicalling123(reqXML123);
                            writeLog(" MessageId : " + messageid + " 123 Inquiry Res : " + response);
                            Hashtable htt = Utils.getHTableFromXML(response);
                            // break response from Biller 

                            if (!IsValidateInquiryRes123(htt, out version, out ts, out messageid, out agentcode, out code, out desp, out merchantid, out merchantname, out ref1, out ref2, out amount, out productdesc, out status, out expiry))
                            {
                                return Utils.getErrorRes(code, desp);
                            }
                            if (code != "00")
                            {
                                return Utils.getErrorRes(code, desp);
                            }
                            else
                            {
                                writeLog(" MessageId : " + messageid + " 123 Inquiry : Amount : " + Utils.getFrom12DigitToOrginal(amount) + " | Service Percent : " + servicePercent + " | ServiceFlatFee : " + serviceFlatFee + "......");
                                serviceFeeDbl = Utils.getFee(double.Parse(Utils.getFrom12DigitToOrginal(amount)),
                                    float.Parse(servicePercent), double.Parse(serviceFlatFee));//double.Parse((double.Parse(agentFee)).ToString("#,##0.00"));
                                serviceFee = serviceFeeDbl.ToString("###0.00");
                                writeLog(" MessageId : " + messageid + " 123 Inquiry : serviceFee : " + serviceFee);

                                inquiryResponseModel inqRes = new inquiryResponseModel();
                                inqRes.ResCode = code;
                                inqRes.ResDesc = desp;
                                inqRes.taxID = taxID;
                                inqRes.merchantname = merchantname;
                                inqRes.merchantlogo = string.Empty;
                                inqRes.billername = billerName;
                                inqRes.billerlogo = billerLogo;
                                inqRes.ref1 = ref1;
                                inqRes.ref2 = ref2;
                                inqRes.ref3 = ref3;
                                inqRes.ref4 = ref4;
                                inqRes.ref5 = ref5;
                                inqRes.ref1Name = ref1Name;
                                inqRes.ref2Name = ref2Name;
                                inqRes.ref3Name = ref3Name;
                                inqRes.ref4Name = ref4Name;
                                inqRes.ref5Name = ref5Name;
                                inqRes.amount = Utils.getFrom12DigitToOrginal(amount);
                                inqRes.serviceFee = serviceFee;
                                inqRes.status = status;
                                inqRes.expiry = expiry;
                                inqRes.productDescription = productdesc;
                                inqRes.imgUrl = imgURL;

                                return Utils.getInquiryRes(inqRes);
                            }
                            #endregion
                        }
                    }
                    #endregion

                    #region <-- EBAGiftCardEpinBillers -->
                    else if (ConfigurationManager.AppSettings["EBAGiftCardEPinBillersList"].ToString().Split(',').Where(x => x == MapTaxID).Any())
                    {
                        writeLog("This is EBAGiftCardEPinbillersList : TaxId : " + MapTaxID + "MessageId : " + messageid);
                        var billerCode = GetBillerCode(taxID);
                        var inquiryResponseModel = new inquiryResponseModel()
                        {
                            ResCode = rescode,
                            ResDesc = resdecs,
                            taxID = taxID,
                            merchantname = merchantname,
                            merchantlogo = merchantlogo,
                            billername = billerName,
                            billerlogo = billerLogo,
                            ref1 = ref1,
                            ref2 = ref2,
                            ref3 = ref3,
                            ref4 = ref4,
                            ref5 = ref5,
                            ref1Name = ref1Name,
                            ref2Name = ref2Name,
                            ref3Name = ref3Name,
                            ref4Name = ref4Name,
                            ref5Name = ref5Name,
                            amount = amount,
                            serviceFee = serviceFee,
                            status = status,
                            expiry = expiry,
                            productDescription = productdesc,
                            imgUrl = imgURL
                        };
                        return (new EBAGiftCardEPinManager()).getInquiryResponse(inquiryResponseModel, messageid, billerCode);

                    }
                    #endregion <-- EBAGiftCardEpinBillers -->

                    #region <-- 1-Stop+ -->
                    else if (MapTaxID == "0000000000005") ////OneStop+
                    {
                        writeLog("This is Channel+.");
                        writeLog("Agent Code : " + this.agentCode + "Load Agent Code:" + ref1);
                        if (this.agentCode == ref1)
                        {
                            rescode = "01";
                            resdecs = "Same partner code NOT allowed";

                            return Utils.getErrorRes(rescode, resdecs);
                        }
                        DataSet ds = null;
                        DataSet dsFirstUser = null;
                        _agentWCF.getMaHaOneStopPlusPartnerFirstUser(ref1, out dsFirstUser, out errmsg);
                        _agentWCF.getAgentNameByAgentCode(ref1, out ds, out errmsg); //Ref1 is agentCode
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            if (ds.Tables[0].Rows[0]["AGREEMENTTYPE"].ToString() != "Y") // AGREEMENT TYPE IS NO
                            {

                                inquiryResponseModel inqRes = new inquiryResponseModel();
                                inqRes.ResCode = "00";
                                inqRes.ResDesc = "Success";
                                inqRes.taxID = taxID;
                                inqRes.merchantname = merchantname;
                                inqRes.merchantlogo = merchantlogo;
                                inqRes.billername = billerName;
                                inqRes.billerlogo = billerLogo;
                                inqRes.ref1 = ref1;
                                inqRes.ref2 = ds.Tables[0].Rows[0]["AGENTNAME"].ToString();
                                inqRes.ref3 = ref3;
                                if (dsFirstUser.Tables[0].Rows.Count > 0)
                                {
                                    inqRes.ref4 = dsFirstUser.Tables[0].Rows[0]["AGENTUSERNAME"].ToString() + "," + dsFirstUser.Tables[0].Rows[0]["PHNO"].ToString() + "," + dsFirstUser.Tables[0].Rows[0]["NRC"].ToString();
                                }
                                inqRes.ref5 = ref5;
                                inqRes.ref1Name = ref1Name;
                                inqRes.ref2Name = ref2Name;
                                inqRes.ref3Name = ref3Name;
                                inqRes.ref4Name = "";
                                inqRes.ref5Name = ref5Name;
                                inqRes.amount = amount;
                                inqRes.serviceFee = serviceFee;
                                inqRes.status = status;
                                inqRes.expiry = expiry;
                                inqRes.productDescription = productdesc;
                                inqRes.imgUrl = imgURL;

                                return Utils.getInquiryRes(inqRes);
                            }
                            else
                            {
                                rescode = "01";
                                resdecs = "Agent NOT Applicable";
                                return Utils.getErrorRes(rescode, resdecs);
                            }
                        }
                        else
                        {

                            rescode = "01";
                            resdecs = "Agent NOT Found";

                            return Utils.getErrorRes(rescode, resdecs);
                        }
                    }
                    #endregion

                    #region <-- MLM/MercyCorps  Redeem -->
                    if (MapTaxID == "7777777777777" || MapTaxID == "0000000000011")
                    {
                        writeLog("Malarmyaing/Mercy Corp  Redeem Inquiry AgentCode:" + agentCode);
                        DataSet ds = null;
                        _agentWCF.getAgentNameByAgentCode(agentCode, out ds, out errmsg); //Ref1 is agentCode
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                            {

                                #region <-- Enquiry Response When simulator is turn on -->
                                writeLog("Simulator Y");
                                productdesc = "Mercy Crops Redeem";
                                amount = "2000";
                                serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));//double.Parse((double.Parse(agentFee)).ToString("#,##0.00"));
                                serviceFee = serviceFeeDbl.ToString("###0.00");

                                inquiryResponseModel inqRes = new inquiryResponseModel();
                                inqRes.ResCode = "00";
                                inqRes.ResDesc = "Success";
                                inqRes.taxID = taxID;
                                inqRes.merchantname = string.Empty;
                                inqRes.merchantlogo = string.Empty;
                                inqRes.billername = billerName;
                                inqRes.billerlogo = billerLogo;
                                inqRes.ref1 = ref1;
                                inqRes.ref2 = agentCode;
                                inqRes.ref3 = "Redeem";
                                inqRes.ref4 = ref4;
                                inqRes.ref5 = "12";
                                inqRes.ref1Name = ref1Name;
                                inqRes.ref2Name = ref2Name;
                                inqRes.ref3Name = ref3Name;
                                inqRes.ref4Name = ref4Name;
                                inqRes.ref5Name = ref5Name;
                                inqRes.amount = Utils.getFrom12DigitToOrginal(amount);
                                inqRes.serviceFee = serviceFee;
                                inqRes.status = status;
                                inqRes.expiry = expiry;
                                inqRes.productDescription = productdesc;
                                inqRes.imgUrl = imgURL;

                                return Utils.getInquiryRes(inqRes);
                                #endregion

                            }
                            else
                            {
                                #region <-- If Simulator is turn off -->
                                string agentcode = MapTaxID == "7777777777777" ? ConfigurationManager.AppSettings["easyPointMercyRedeemID"].ToString() : ConfigurationManager.AppSettings["MercyCorpsPartnerID"].ToString();
                                string key = MapTaxID == "7777777777777" ? ConfigurationManager.AppSettings["easyPointMercyRedeemKey"].ToString() : ConfigurationManager.AppSettings["MercyCorpsRedeemKey"].ToString();
                                string hashstr = Utils.hashstrRedeemEnquiryEasyPointReq(version, ts, messageid, agentcode, ref1, key);

                                string agnref = string.Empty;
                                // string digitalcodedesc = string.Empty;
                                string reqXMLeasypoint = "<InquiryReq><Version>" + version + "</Version><TimeStamp>" + ts
                                    + "</TimeStamp>"
                                    + "<MessageID>" + messageid + "</MessageID>"
                                    + "<PartnerID>" + agentcode + "</PartnerID>"
                                   + "<DigitalCode>" + ref1
                                    + "</DigitalCode><HashValue>" + hashstr
                                    + "</HashValue></InquiryReq>";

                                RouteAPI api_service = new RouteAPI();
                                writeLog("EasyPoint Inquiry Req : " + reqXMLeasypoint);
                                response = api_service.RedeemApicallingEasypoint(reqXMLeasypoint);
                                writeLog("EasyPoint Inquiry Res : " + response);
                                Hashtable htt = Utils.getHTableFromXML(response);
                                if (!IsValidateInquiryResMercyEasyPoint(htt, MapTaxID, out code, out desp, out version, out messageid, out ref1, out amount, out agnref, out ref3))
                                {

                                    return Utils.getErrorRes(code, desp);

                                }
                                if (code != "00")
                                {

                                    return Utils.getErrorRes(code, desp);
                                }
                                else
                                {

                                    writeLog("Amount : " + Utils.getFrom12DigitToOrginal(amount) + " | Service Percent : " + servicePercent + " | ServiceFlatFee : " + serviceFlatFee + "......");
                                    serviceFeeDbl = Utils.getFee(double.Parse(Utils.getFrom12DigitToOrginal(amount)),
                                        float.Parse(servicePercent), double.Parse(serviceFlatFee));//double.Parse((double.Parse(agentFee)).ToString("#,##0.00"));
                                    serviceFee = serviceFeeDbl.ToString("###0.00");
                                    writeLog("serviceFee : " + serviceFee);

                                    if (isAgreement != "Y")
                                    {
                                        if (Convert.ToDouble(amount) > availabelBalance)
                                        {
                                            return Utils.getErrorRes("10", "Insufficient amount. Please load your balance.");
                                        }
                                    }


                                    //billerlogo = "iVBORw0KGgoAAAANSUhEUgAAADwAAAAyCAYAAAAA9rgCAAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOxAAADsQBlSsOGwAABQpJREFUaEPtml8sJVccx2fuXKppmjT+/00aLYosWpI+dLd/ti3Vl1LdZrvXYld2V0sj2mqzb4KtJSkWdbnXbqXx3CckFUEED7pll40QJARPEhLEG9+ec2aGuXdmuPdSurfzSz6ZceZ3fuZzzz1nxgkOJPz8/MBxnNdD4/8n7NzozYSFhYHjeV7zojfi7+9Pj9oXvRFD+Kw4r2mkK1xVVcVWNDnq6+tVOVoMDg5ib2/vALm9r69Ps/0o4uPjsbW1Jd0BMD8/z9pDQ0OxtLQktQKLi4usPTAwkJ3Lsbm56VCPoitcUVEhdROjtrZWlaPF0NCQ1EMMub2/v19qEUPZR4+4uDhsbGxIPYCZmRnWHhwcjIWFBakVmJubY+0BAQHsXI719XWHehRDWMYQNoS1MYSldkNY0UcPQ9gQFsMQlsIQJhjCMoawIayNISy1G8KKPno818LDw8NSixjKPnroCYeEhGBlZUVqBdv9oO10x0O5E0J3S5T1KGcmTG8yIiKCERkZ6dBHDz1hs9nM9pflWvSc7pEJgoDw8PCDdorz3tmZCXuCnrAWepuCpyLMcyYHOO6wqGvCZtJPgIncDL0hCj2n7Rx/mOeOsKt4KHx4NMnn0o2e1whroTXqLgvX1dVBIAVi79Qi4fcZxP02jYRHT/FG5xRi79qIuFj8KGGWwwt4OFWI9qcFsE4VoHVahJ5bp28gI/ctmEwCOBOP5ORkbG9vS5XUwkdFZWUlm+vKfIqbwgKC385EfHkH4n56hNh7f+B1+9+I/r7FNWGeTAHejO9as/CjPRvldnoUKbdl4f6fFrQ/yUN6QQqpZ0JKSgp2dnakSmrh3t5ejI6OYmxszIHV1VWW39DQ4JBPcfMrLUrx5MbpKAReykbswylEl1td/krz5ENjdUgNzqSA/Fx471P8OnkdGTeTyHThjxXWw2azsfy2tjbV19qjOSwTeDHLbWE96I0V/vwJWiZyyQhfOJFwR0cHy29tbVVdOyVh+knS1do1YZ7zIUf6yTtyu/pjND35Cuk3ksmocx4LW61Wlk+P/9IIuydM5Xxe9IPPCz4Ms3S8VZuBpgkyh2+6J+zr68v+g4FCzwcGBlh+dXW168I1NTWskxyNjY2qHC3h8fFxqYcYynyBLER0cfulj6zIz3LR9iyPkH9A4+QVNA3nIfrNcLbApaamSlXEkF8hlczOzkpXHYMuZlTeOV9XODExEdnZ2YycnBwkJSWpctTCPDIzM5Gfn3+AMp++bHBklbaSx9KDv3IJeXjw+LoIOW9+bMG7n5PfQ2rRZ3xQUBCKiopQXFyMkpISWCwWh3oUu90uKR7G/v4+1tbW2HPc5RF2BWdhutBo5R1C3rDIs7FlwoKLnyVqXKePruNqHE9nZycTb25uVl07B2GBCb//xQWN66eDR6u0K3gk7COgefIa3vtSX1is4/lI/yeFb91PxwdXUnH56iEfXk1DWkYszC/RPy7ERfAoCgoKUFpaqmJkZORA+HTn8Dvim9ZrP7SzV8HjR0Ugwj7k0XONSFvQRt6f28h7tIxtKh/2idtIy4xxSfi4KCsrO11h//hUxHzbhFezvoFAnptaOUrohyKQOVzS9BGK6i/jjhNfEyx3L+GV0JfFV0+NGkq6urrQ3d2toqenB1FRUZp9TiRMHx0yJ5lzjtA6p1VLzYmEn0cMYW/nQNh5NfNW6FYut7u7i4SEBERHR3s1MTExWF5exj8VUvKfWoOKfQAAAABJRU5ErkJggg==";

                                    inquiryResponseModel inqRes = new inquiryResponseModel();
                                    inqRes.ResCode = code;
                                    inqRes.ResDesc = desp;
                                    inqRes.taxID = taxID;
                                    inqRes.merchantname = string.Empty;
                                    inqRes.merchantlogo = string.Empty;
                                    inqRes.billername = agentName;
                                    inqRes.billerlogo = billerLogo;
                                    inqRes.ref1 = ref1;
                                    inqRes.ref2 = ref3;
                                    inqRes.ref3 = string.Empty;
                                    inqRes.ref4 = ref4;
                                    inqRes.ref5 = agnref;
                                    inqRes.ref1Name = ref1Name;
                                    inqRes.ref2Name = ref2Name;
                                    inqRes.ref3Name = string.Empty;
                                    inqRes.ref4Name = ref4Name;
                                    inqRes.ref5Name = string.Empty;
                                    inqRes.amount = Utils.getFrom12DigitToOrginal(amount);
                                    inqRes.serviceFee = serviceFee;
                                    inqRes.status = status;
                                    inqRes.expiry = expiry;
                                    inqRes.productDescription = string.Empty;// ref3;
                                    inqRes.imgUrl = imgURL;

                                    return Utils.getInquiryRes(inqRes);
                                }

                                #endregion
                            }
                        }
                        else
                        {
                            writeLog("No Agent Found");

                            rescode = "01";
                            resdecs = "Agent NOT Found";
                            return Utils.getErrorRes(rescode, resdecs);
                        }
                    }
                    #endregion

                    #region <-- YCDC/04-Jan-2016 Tz -->
                    if (MapTaxID == "0000000000020")
                    {
                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            writeLog("Simulator Y");

                            #region <-- If simulator is Y Do this job -->
                            rescode = "00";
                            resdecs = "Success";

                            inquiryResponseModel inqRes = new inquiryResponseModel();
                            inqRes.ResCode = "00";
                            inqRes.ResDesc = "Success";
                            inqRes.taxID = taxID;
                            inqRes.merchantname = merchantname;
                            inqRes.merchantlogo = merchantlogo;
                            inqRes.billername = billerName;
                            inqRes.billerlogo = billerLogo;
                            inqRes.ref1 = ref1;
                            inqRes.ref2 = string.Empty;
                            inqRes.ref3 = "Tester";
                            inqRes.ref4 = string.Empty;
                            inqRes.ref5 = "200:100";
                            inqRes.ref1Name = ref1Name;
                            inqRes.ref2Name = ref2Name;
                            inqRes.ref3Name = ref3Name;
                            inqRes.ref4Name = ref4Name;
                            inqRes.ref5Name = ref5Name;
                            inqRes.amount = "5000";
                            inqRes.serviceFee = "300";
                            inqRes.status = "Success";
                            inqRes.expiry = expiry;
                            inqRes.productDescription = productdesc;
                            inqRes.imgUrl = imgURL;

                            return Utils.getInquiryRes(inqRes);
                            #endregion
                        }
                        else
                        {
                            BillPayment billpay = new BillPayment();
                            ReqBillAmount reqbilamt = new ReqBillAmount();
                            ResBillAmount resbillamt = new ResBillAmount();
                            ResError reserr = new ResError();
                            string success = ConfigurationManager.AppSettings["payeesuccess"].ToString().Trim();
                            string fail = ConfigurationManager.AppSettings["payeefailed"].ToString().Trim();
                            string merchantcode = MapTaxID == "0000000000020" ? ConfigurationManager.AppSettings["YCDCMerchantCode"].ToString().Trim() : MapTaxID == "0000000000021" ? ConfigurationManager.AppSettings["MPTLandLineMearchantCode"].ToString().Trim() : ConfigurationManager.AppSettings["YESCMerchantCode"].ToString().Trim();
                            reqbilamt.apiKey = ConfigurationManager.AppSettings["payeeApiKey"].ToString().Trim();
                            reqbilamt.billRefNo = ref1;
                            reqbilamt.custRefNo = (MapTaxID == "0000000000021" || MapTaxID == "0000000000022") ? ref1 : "";
                            reqbilamt.locale = ConfigurationManager.AppSettings["payeelocale"].ToString().Trim();
                            reqbilamt.billingMerchantCode = merchantcode.Trim();
                            reqbilamt.currencyCode = ConfigurationManager.AppSettings["payeeCurrencyCode"].ToString().Trim();
                            BillPayment payment = new BillPayment();

                            if (MapTaxID == "0000000000022")
                            {
                                writeLog("$$$$$$$$$ This Is YESC Checking Payment Due Date $$$$$$$$$$$$$$$");
                                #region <-- If taxID is YESC Doing This Job To Check Payment Due Date -->
                                payment.BillDetails(reqbilamt, out resbillamt, out reserr, out errMsg);
                                if (!string.IsNullOrEmpty(resbillamt.status))
                                {
                                    if (resbillamt.status == success)
                                    {
                                        writeLog("Payment DueDate Before Convert" + resbillamt.paymentDueDate + "Current Date Before Convert: " + DateTime.Now);
                                        DateTime DueDate;
                                        DateTime CurrentDate = DateTime.Now;
                                        if (ConfigurationManager.AppSettings["YescIsDeductDueDate"].ToString() == "N")
                                        {
                                            DueDate = DateTime.Parse(resbillamt.paymentDueDate);

                                        }
                                        else
                                        {
                                            writeLog("it is deduct Yes");
                                            string strDeduct = ConfigurationManager.AppSettings["YescTotalDeductDate"].ToString();
                                            writeLog("total deductday:" + strDeduct);
                                            int deduct = int.Parse(strDeduct);
                                            DueDate = (DateTime.Parse(resbillamt.paymentDueDate).AddDays(deduct));
                                            DueDate = new DateTime(DueDate.Date.Year, DueDate.Date.Month, DueDate.Date.Day, 15, 00, 00);
                                        }

                                        writeLog("Payment DueDate AFTER Convert" + DueDate + "Current Date AFTER Convert: " + CurrentDate);
                                        if (DueDate < CurrentDate)
                                        {

                                            writeLog("Payment Expired");
                                            rescode = "03";
                                            resdecs = "Expired Already";
                                            return Utils.getErrorRes(rescode, resdecs);
                                        }
                                        else
                                        {
                                            writeLog("Payment Due Date not expired yet");

                                            if (!string.IsNullOrEmpty(resbillamt.paidstatus))
                                            {
                                                resbillamt.paidstatus = resbillamt.paidstatus.ToUpper();
                                            }
                                            writeLog("Paid Status:" + resbillamt.paidstatus);
                                            if (resbillamt.paidstatus == "YES" || resbillamt.paidstatus == "PENDING")//|| resbillamt.paidstatus.ToUpper().Trim() == "NULL" string.IsNullOrEmpty(resbillamt.paidstatus) ||
                                            {
                                                rescode = "03";
                                                resdecs = "Paid Already";
                                                return Utils.getErrorRes(rescode, resdecs);
                                            }
                                            else if (string.IsNullOrEmpty(resbillamt.paidstatus) || resbillamt.paidstatus == "NULL")
                                            {
                                                writeLog("Paid Status is Null Check Duplicated YESC customer ref in 1Stop DB");
                                                if (_agentWCF.IsDuplicatedCNPYESCPayment(ref1, DueDate.AddDays(-30), DueDate, out errMsg))
                                                {
                                                    writeLog("Customer Reference Number:" + ref1 + "Is already paid at 1STOP");
                                                    rescode = "03";
                                                    resdecs = "Paid Already";
                                                    return Utils.getErrorRes(rescode, resdecs);
                                                }

                                            }


                                        }
                                    }
                                    else if (resbillamt.status == fail)
                                    {
                                        writeLog("Response From PayYee Amount Detail inquiry is fail status=" + resbillamt.status);
                                        writeLog("Error Code:" + reserr.errorCode);
                                        writeLog("Error Description:" + reserr.errorMessage);
                                        return Utils.getErrorRes(reserr.errorCode, getCNPErrMsg(reserr.errorCode));
                                    }
                                }
                                else
                                {
                                    writeLog("Response From PayYee Amount Detail Inquiry status is empty");
                                    writeLog("Error Code:" + reserr.errorCode);
                                    writeLog("Error Description:" + reserr.errorMessage);
                                    return Utils.getErrorRes("06", getCNPErrMsg(reserr.errorCode));
                                }
                                #endregion
                            }


                            payment.EnquiryBillAmount(reqbilamt, out resbillamt, out reserr, out errMsg);

                            if (!string.IsNullOrEmpty(resbillamt.status))
                            {

                                if (resbillamt.status == success)
                                {
                                    if (MapTaxID == "0000000000020")
                                    {
                                        writeLog("Response Bill Amount:" + resbillamt.amount);
                                        string amtToCompare = ConfigurationManager.AppSettings["YCDCMiniumAmount"].ToString();
                                        string ycdcServicePercentFee = ConfigurationManager.AppSettings["YCDCServicePercentFee"].ToString();
                                        string ycdcServiceFlatFee = ConfigurationManager.AppSettings["YCDCServiceFlatFee"].ToString();
                                        string ycdc1StopPercentFee = ConfigurationManager.AppSettings["YCDC1StopPercentFee"].ToString();
                                        string ycdc1StopFlatFee = ConfigurationManager.AppSettings["YCDCAgentFlatFee"].ToString();
                                        string ycdcAgentPercentFee = ConfigurationManager.AppSettings["YCDCAgentPercentFee"].ToString();
                                        string ycdcAgentFlatFee = ConfigurationManager.AppSettings["YCDCAgentFlatFee"].ToString();

                                        if (double.Parse(resbillamt.amount) <= double.Parse(amtToCompare))
                                        {
                                            serviceFeeDbl = Utils.getFee(double.Parse(resbillamt.amount), float.Parse(ycdcServicePercentFee), double.Parse(ycdcServiceFlatFee));
                                            serviceFee = serviceFeeDbl.ToString("###0.00");

                                            totalAmount = (double.Parse(amount) + serviceFeeDbl).ToString("###0.00");

                                            oneStopFeeDbl = Utils.getFeeNotRound(double.Parse(amount), float.Parse(ycdc1StopPercentFee), double.Parse(ycdc1StopFlatFee));
                                            oneStopFee = oneStopFeeDbl.ToString("###0.00");

                                            agentFeeDbl = Utils.getFeeNotRound(double.Parse(amount), float.Parse(ycdcAgentPercentFee), double.Parse(ycdcAgentFlatFee));
                                            agentAmount = double.Parse(amount) - agentFeeDbl;

                                            agentAmount += oneStopFeeDbl;
                                        }
                                    }
                                    writeLog("Response From PayYee Inquiry is success status=" + resbillamt.status);

                                    inquiryResponseModel inqRes = new inquiryResponseModel();
                                    inqRes.ResCode = "00";
                                    inqRes.ResDesc = "Success";
                                    inqRes.taxID = taxID;
                                    inqRes.merchantname = merchantname;
                                    inqRes.merchantlogo = merchantlogo;
                                    inqRes.billername = billerName;
                                    inqRes.billerlogo = billerLogo;
                                    inqRes.ref1 = ref1;
                                    inqRes.ref2 = resbillamt.name;
                                    inqRes.ref3 = string.Empty;
                                    inqRes.ref4 = string.Empty;
                                    inqRes.ref5 = resbillamt.Camount + ":" + resbillamt.Coamount;//Charge and Commission 
                                    inqRes.ref1Name = ref1Name;
                                    inqRes.ref2Name = ref3Name;
                                    inqRes.ref3Name = string.Empty;
                                    inqRes.ref4Name = string.Empty;
                                    inqRes.ref5Name = string.Empty;
                                    inqRes.amount = resbillamt.amount;
                                    inqRes.serviceFee = serviceFee;
                                    inqRes.status = resbillamt.status;
                                    inqRes.expiry = expiry;
                                    inqRes.productDescription = productdesc;
                                    inqRes.imgUrl = imgURL;

                                    return Utils.getInquiryRes(inqRes);
                                }
                                else if (resbillamt.status == fail)
                                {
                                    writeLog("Response From PayYee Inquiry is fail status=" + resbillamt.status);
                                    writeLog("Response Code:" + resbillamt.failcode);
                                    writeLog("Response Message:" + resbillamt.message);
                                    return Utils.getErrorRes(resbillamt.failcode, getCNPErrMsg(resbillamt.failcode));
                                }
                            }
                            else
                            {
                                writeLog("Response From PayYee Inquiry status is empty");
                                writeLog("Error Code:" + reserr.errorCode);
                                writeLog("Error Description:" + reserr.errorMessage);
                                return Utils.getErrorRes("06", getCNPErrMsg(reserr.errorCode));
                            }
                        }
                    }

                    #endregion

                    #region Aeon
                    else if (MapTaxID == ConfigurationManager.AppSettings["AEONMapTaxID"].ToString())
                    {
                        writeLog("This is Aeon.");

                        if (!string.IsNullOrEmpty(ref5) && ref5 == ConfigurationManager.AppSettings["AeonOnlineKey"])
                        {
                            string ebaUrl = ConfigurationManager.AppSettings["AeonInquiryUrl"];
                            AeonDetail detail = new AeonDetail()
                            {
                                AgreementNo = ref1,
                                MobileNumber = ref3
                            };
                            EbaInquiryReq inqReq = new EbaInquiryReq()
                            {
                                Token = GetOAuthToken().Token,
                                PartnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString(),
                                BillerCode = ConfigurationManager.AppSettings["AeonBillerCode"].ToString(),
                                Detail = "{ 'AgreementNo' : '" + detail.AgreementNo + "', 'MobileNumber' : '" + detail.MobileNumber + "' }"
                            };

                            string json = JsonConvert.SerializeObject(inqReq);

                            writeLog("EBA  inquriy request for Aeon:" + json);

                            string res = Utils.PostEba(json, ebaUrl);

                            writeLog("Eba inquriy response for Aeon: " + res);

                            EbaInquiryRes inqRes = new EbaInquiryRes();
                            inqRes = JsonConvert.DeserializeObject<EbaInquiryRes>(res);

                            if (!string.IsNullOrEmpty(res) & inqRes.ErrorCode == "00")
                            {
                                string resCode = inqRes.ErrorCode;
                                string resDesc = inqRes.ErrorMessage;

                                string detailStr = inqRes.Detail.Replace("\\", "");
                                AeonDetail detailJson = JsonConvert.DeserializeObject<AeonDetail>(detailStr);
                                amount = inqRes.TransactionAmount;

                                serviceFeeDbl = Utils.getFee(double.Parse(string.IsNullOrEmpty(amount) ? "0.00" : amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                                serviceFee = serviceFeeDbl.ToString("###0.00");

                                inquiryResponseModel inqresmdl = new inquiryResponseModel()
                                {
                                    ResCode = resCode,
                                    ResDesc = resDesc,
                                    taxID = taxID,
                                    merchantname = merchantname,
                                    merchantlogo = merchantlogo,
                                    billername = billerName,
                                    billerlogo = billerLogo,
                                    ref1 = ref1,
                                    ref2 = detailJson.CustomerName,
                                    ref3 = ref3,
                                    ref4 = ref4,
                                    ref5 = string.Empty,
                                    ref1Name = ref1Name,
                                    ref2Name = ref2Name,
                                    ref3Name = string.Empty,
                                    ref4Name = ref4Name,
                                    ref5Name = string.Empty,
                                    amount = amount,
                                    serviceFee = serviceFee,
                                    status = status,
                                    expiry = expiry,
                                    productDescription = productdesc,
                                    imgUrl = imgURL,
                                };

                                return Utils.getInquiryRes(inqresmdl);
                            }
                            else
                            {
                                return Utils.getErrorRes(inqRes.ErrorCode, inqRes.ErrorMessage);
                            }
                        }
                        else
                        {
                            return Utils.getErrorRes("01", "Please update your application to use new version.");
                        }

                    }

                    #endregion

                    #region <-- Mother Finance -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["MotherFinanceTaxID"].ToString())
                    {
                        writeLog("This is Mother Finance.");
                        string ebaUrl = ConfigurationManager.AppSettings["MotherFinanceInquiryUrl"].ToString();
                        MotherFinanceModel.Detail detail = new MotherFinanceModel.Detail()
                        {
                            Id = ref1
                        };
                        MotherFinanceInquiryReq inqReq = new MotherFinanceInquiryReq()
                        {
                            Token = GetOAuthToken().Token,
                            PartnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString(),
                            BillerCode = ConfigurationManager.AppSettings["MotherFinanceBillerCode"].ToString(),
                            Detail = "{ 'Id' : '" + detail.Id + "' }"
                        };

                        string json = JsonConvert.SerializeObject(inqReq);

                        string res = Utils.PostEba(json, ebaUrl);

                        writeLog("Eba inquriy response for Mother Finance" + " : " + res);
                        MotherFinanceInquiryRes inqRes = new MotherFinanceInquiryRes();
                        inqRes = JsonConvert.DeserializeObject<MotherFinanceInquiryRes>(res);

                        if (!string.IsNullOrEmpty(res))
                        {
                            string resCode = inqRes.ErrorCode;
                            string resDesc = inqRes.ErrorMessage;
                            string detailStr = inqRes.Detail.Replace("\\", "");
                            MotherFinanceModel.Detail detailJson = JsonConvert.DeserializeObject<MotherFinanceModel.Detail>(detailStr);

                            string customerName = detailJson.CustomerName;
                            string loanCategoryDesc = detailJson.LoanCategoryDesc;
                            string loanCategoryId = detailJson.LoanCategoryId;
                            string paymentSchedule = detailJson.PaymentScheduleId;
                            string lateFee = detailJson.LateFee;
                            string id = detail.Id;
                            string isPartialPayment = detailJson.IsPartialPayment.ToString();
                            amount = inqRes.TransactionAmount;

                            serviceFeeDbl = Utils.getFee(double.Parse(string.IsNullOrEmpty(amount) ? "0.00" : amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                            serviceFee = serviceFeeDbl.ToString("###0.00");

                            inquiryResponseModel inqresmdl = new inquiryResponseModel()
                            {
                                ResCode = resCode,
                                ResDesc = resDesc,
                                taxID = taxID,
                                merchantname = merchantname,
                                merchantlogo = merchantlogo,
                                billername = billerName,
                                billerlogo = billerLogo,
                                ref1 = id,
                                ref2 = loanCategoryId + "|" + paymentSchedule + "|" + isPartialPayment,
                                ref3 = customerName,
                                ref4 = loanCategoryDesc,
                                ref5 = lateFee,
                                ref1Name = ref1Name,
                                ref2Name = "",
                                ref3Name = ref2Name,
                                ref4Name = ref3Name,
                                ref5Name = ref4Name,
                                amount = amount,
                                serviceFee = serviceFee,
                                status = status,
                                expiry = expiry,
                                productDescription = productdesc,
                                imgUrl = imgURL,
                            };

                            return Utils.getInquiryRes(inqresmdl);
                        }

                        return null;

                    }
                    #endregion

                    #region <--Easy MicroFinance->
                    else if (MapTaxID == BISConstants.EasyMicroFinanceTaxId)
                    {
                        var inquiryResponseModel = new inquiryResponseModel()
                        {
                            ResCode = rescode,
                            ResDesc = resdecs,
                            taxID = taxID,
                            merchantname = merchantname,
                            merchantlogo = merchantlogo,
                            billername = billerName,
                            billerlogo = billerLogo,
                            ref1 = ref1,
                            ref2 = ref2,
                            ref3 = ref3,
                            ref4 = ref4,
                            ref5 = ref5,
                            ref1Name = ref1Name,
                            ref2Name = ref2Name,
                            ref3Name = ref3Name,
                            ref4Name = ref4Name,
                            ref5Name = ref5Name,
                            amount = amount,
                            serviceFee = serviceFee,
                            status = status,
                            expiry = expiry,
                            productDescription = productdesc,
                            imgUrl = imgURL
                        };

                        return (new EasyMicrofinanceManager()).GetInquiryResponse(inquiryResponseModel);
                    }
                    #endregion

                    #region <--Hana MicroFinance->
                    else if (MapTaxID == ConfigurationManager.AppSettings["HanaMicrofinanceTaxId"].ToString())
                    {
                        var inquiryResponseModel = new inquiryResponseModel()
                        {
                            ResCode = rescode,
                            ResDesc = resdecs,
                            taxID = taxID,
                            merchantname = merchantname,
                            merchantlogo = merchantlogo,
                            billername = billerName,
                            billerlogo = billerLogo,
                            ref1 = ref1,
                            ref2 = ref2,
                            ref3 = ref3,
                            ref4 = ref4,
                            ref5 = ref5,
                            ref1Name = ref1Name,
                            ref2Name = ref2Name,
                            ref3Name = ref3Name,
                            ref4Name = ref4Name,
                            ref5Name = ref5Name,
                            amount = amount,
                            serviceFee = serviceFee,
                            status = status,
                            expiry = expiry,
                            productDescription = productdesc,
                            imgUrl = imgURL
                        };

                        return (new HanaMicrofinanceManager()).GetInquiryResponse(inquiryResponseModel);
                    }
                    #endregion


                    #region <-- OfflinePayment -->
                    if (MapTaxID == "0000000000021")
                    {
                        inquiryResponseModel inqresmdl = new inquiryResponseModel();
                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            writeLog("Simulator Y");


                            rescode = "00";
                            resdecs = "Success";
                            inqresmdl.ResCode = rescode;
                            inqresmdl.ResDesc = resdecs;
                            inqresmdl.taxID = taxID;
                            inqresmdl.merchantname = merchantname;
                            inqresmdl.merchantlogo = merchantlogo;
                            inqresmdl.billername = billerName;
                            inqresmdl.billerlogo = billerLogo;
                            inqresmdl.ref1 = ref1;
                            inqresmdl.ref2 = ref2;
                            inqresmdl.ref3 = ref3;
                            inqresmdl.ref4 = ref4;
                            inqresmdl.ref5 = ref5;
                            inqresmdl.ref1Name = ref1Name;
                            inqresmdl.ref2Name = ref2Name;
                            inqresmdl.ref3Name = ref3Name;
                            inqresmdl.ref4Name = ref4Name;
                            inqresmdl.ref5Name = ref5Name;
                            inqresmdl.amount = amount;
                            inqresmdl.serviceFee = serviceFee;
                            inqresmdl.status = status;
                            inqresmdl.expiry = expiry;
                            inqresmdl.productDescription = productdesc;
                            inqresmdl.imgUrl = imgURL;
                            return Utils.getInquiryRes(inqresmdl);

                        }
                        else
                        {
                            rescode = "00";
                            resdecs = "Success";
                            inqresmdl.ResCode = rescode;
                            inqresmdl.ResDesc = resdecs;
                            inqresmdl.taxID = taxID;
                            inqresmdl.merchantname = merchantname;
                            inqresmdl.merchantlogo = merchantlogo;
                            inqresmdl.billername = billerName;
                            inqresmdl.billerlogo = billerLogo;
                            inqresmdl.ref1 = ref1;
                            inqresmdl.ref2 = ref2;
                            inqresmdl.ref3 = ref3;
                            inqresmdl.ref4 = ref4;
                            inqresmdl.ref5 = ref5;
                            inqresmdl.ref1Name = ref1Name;
                            inqresmdl.ref2Name = ref2Name;
                            inqresmdl.ref3Name = ref3Name;
                            inqresmdl.ref4Name = ref4Name;
                            inqresmdl.ref5Name = ref5Name;
                            inqresmdl.amount = amount;
                            inqresmdl.serviceFee = serviceFee;
                            inqresmdl.status = status;
                            inqresmdl.expiry = expiry;
                            inqresmdl.productDescription = productdesc;
                            inqresmdl.imgUrl = imgURL;
                            return Utils.getInquiryRes(inqresmdl);
                        }
                    }
                    #endregion

                    #region <-- TitanSource Electric Meter Bills -->
                    if (MapTaxID == "0000000000022")
                    {
                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {

                            writeLog("This is Simulator Mode: status=" + "OK");
                            #region <-- Simulator -->

                            inquiryResponseModel inqRes = new inquiryResponseModel();
                            inqRes.ResCode = "00";
                            inqRes.ResDesc = "Success";
                            inqRes.taxID = taxID;
                            inqRes.merchantname = merchantname;
                            inqRes.merchantlogo = merchantlogo;
                            inqRes.billername = billerName;
                            inqRes.billerlogo = billerLogo;
                            inqRes.ref1 = ref1;
                            inqRes.ref2 = "Meter Bill Tester";
                            inqRes.ref3 = string.Empty;
                            inqRes.ref4 = string.Empty;
                            inqRes.ref5 = "CNP" + ":" + "300" + ":" + "0";
                            inqRes.ref1Name = ref1Name;
                            inqRes.ref2Name = ref3Name;
                            inqRes.ref3Name = string.Empty;
                            inqRes.ref4Name = string.Empty;
                            inqRes.ref5Name = string.Empty;
                            inqRes.amount = amount;
                            inqRes.serviceFee = serviceFee;
                            inqRes.status = "Success";
                            inqRes.expiry = "25-10-2030";
                            inqRes.productDescription = productdesc;
                            inqRes.imgUrl = imgURL;

                            return Utils.getInquiryRes(inqRes);
                            #endregion
                        }
                        else
                        {
                            writeLog("$$$$$$$ This YESC BILL $$$$$$$$$$");
                            DataSet ds = null;
                            string biller = string.Empty;
                            string UserName = ConfigurationManager.AppSettings["titalUserName"].ToString();
                            string ApiKey = ConfigurationManager.AppSettings["titanApiKey"].ToString();
                            string passPhrase = ConfigurationManager.AppSettings["titanpassPhrase"].ToString();
                            string inquiryUrl = ConfigurationManager.AppSettings["titanInquiryUrl"].ToString();
                            string inqResString = string.Empty;
                            ref2 = string.IsNullOrEmpty(ref2) ? "0" : ref2;
                            if (ref2 == "0")
                            {
                                biller = "CNP";
                            }
                            else if (_agentWCF.getMeterBillerByTownshipCode(ref2, out ds, out errMsg))
                            {
                                writeLog("This is check billerby township");
                                if (ds.Tables.Count > 0)
                                {
                                    if (ds.Tables[0].Rows.Count > 0)
                                    {
                                        biller = ds.Tables[0].Rows[0]["BILLER"] == DBNull.Value ? string.Empty : ds.Tables[0].Rows[0]["BILLER"].ToString();
                                        writeLog("MeterBiller :" + biller);
                                    }
                                }
                            }
                            else
                            {
                                biller = "CNP";
                            }
                            if (biller == "TITAN")
                            {
                                #region <-- TITAN -->Titan Inquiry

                                writeLog("$$$$$$$$ This Is Titan Inquiry$$$$$$$$$$$$$$$$$$$");

                                //For 1D
                                string temp = ApiKey + "," + ref1 + "," + amount;

                                writeLog("Titan Source Temp : " + temp);

                                string encodedKey = Utils.EncryptString(temp, passPhrase);

                                //For 1D barcode that allow user to insert barcode in Account Number Textbox.
                                string completeUrl = inquiryUrl + UserName + "/" + encodedKey;

                                HttpWebResponse titanresponse = null;
                                writeLog("Titan Inq Req:" + completeUrl);
                                // Get the stream containing content returned by the server.
                                Stream dataStream = Utils.CallTitanSourceApi(completeUrl, ref titanresponse);
                                // Open the stream using a StreamReader for easy access.
                                StreamReader reader = new StreamReader(dataStream);
                                // Read the content.
                                string responseXML = reader.ReadToEnd();
                                writeLog("Titan Response function :" + responseXML);
                                reader.Close();
                                reader.Dispose();
                                dataStream.Close();
                                dataStream.Dispose();
                                //Fatch Inquiry Response Date from response DataStream
                                TitanInquiryResultSet InquiryResult = Utils.MapTitanInquiryResponse(responseXML);

                                if (!string.IsNullOrEmpty(InquiryResult.Status) && InquiryResult.Status == "OK")
                                {
                                    #region <-- Inquiry to titan OK response back success inquiry response -->
                                    rescode = "00";
                                    resdecs = "Success";

                                    inquiryResponseModel inqres = new inquiryResponseModel();
                                    inqres.ResCode = rescode;
                                    inqres.ResDesc = resdecs;
                                    inqres.taxID = taxID;
                                    inqres.merchantname = merchantname;
                                    inqres.merchantlogo = merchantlogo;
                                    inqres.billerlogo = billerLogo;
                                    inqres.billername = billerName;
                                    inqres.ref1 = ref1;
                                    inqres.ref2 = InquiryResult.MeterNumber;
                                    inqres.ref3 = InquiryResult.ConsumerName;
                                    inqres.ref4 = InquiryResult.TotalUnitUsed;
                                    inqres.ref5 = biller + ":" + InquiryResult.Status + ":" + InquiryResult.TownshipCode + ":" + InquiryResult.ConsumerReferenceNo + ":" + InquiryResult.ConsumerName + ":" + InquiryResult.TotalUnitUsed;//TITANOrCNP:result (OK/insificent):townshipcode: ConsumerRefNo:Customer Name: TotalUnituse

                                    inqres.ref1Name = ref1Name;
                                    inqres.ref2Name = ref2Name;
                                    inqres.ref3Name = ref3Name;
                                    inqres.ref4Name = "Total Unit Use";
                                    inqres.ref5Name = string.Empty;
                                    inqres.amount = InquiryResult.Amount;
                                    inqres.serviceFee = serviceFee;
                                    inqres.status = "Success";
                                    inqres.expiry = InquiryResult.DueDate;
                                    inqres.productDescription = productdesc;
                                    inqres.imgUrl = imgURL;

                                    inqResString = Utils.getInquiryRes(inqres);

                                    writeLog("Inquiry Res:" + inqResString);
                                    return inqResString;
                                    #endregion

                                }
                                else
                                {
                                    writeLog("inquiry fail" + InquiryResult.Status);
                                    if (InquiryResult.Status.ToLower().Contains("paid"))
                                    {
                                        return Utils.getErrorRes("06", "Already Paid!");
                                    }
                                    return Utils.getErrorRes("06", InquiryResult.Status);
                                }
                                #endregion
                            }
                            else
                            {
                                writeLog("$$$$$$$$ This Is CNP Inquiry $$$$$$$$$$$$$$$$$$$");
                                BillPayment billpay = new BillPayment();
                                ReqBillAmount reqbilamt = new ReqBillAmount();
                                ResBillAmount resbillamt = new ResBillAmount();
                                ResError reserr = new ResError();
                                // double totalamt = 0;
                                string success = ConfigurationManager.AppSettings["payeesuccess"].ToString().Trim();
                                string fail = ConfigurationManager.AppSettings["payeefailed"].ToString().Trim();
                                string merchantcode = ConfigurationManager.AppSettings["YESCMerchantCode"].ToString().Trim();
                                reqbilamt.apiKey = ConfigurationManager.AppSettings["payeeApiKey"].ToString().Trim();
                                reqbilamt.billRefNo = ref1;
                                reqbilamt.custRefNo = ref1;
                                reqbilamt.locale = ConfigurationManager.AppSettings["payeelocale"].ToString().Trim();
                                reqbilamt.billingMerchantCode = merchantcode.Trim();
                                reqbilamt.currencyCode = ConfigurationManager.AppSettings["payeeCurrencyCode"].ToString().Trim();
                                BillPayment payment = new BillPayment();

                                if (MapTaxID == "0000000000022")
                                {
                                    writeLog("$$$$$$$$$ This Is YESC Checking Payment Due Date $$$$$$$$$$$$$$$");
                                    #region <-- If taxID is YESC Doing This Job To Check Payment Due Date -->
                                    payment.BillDetails(reqbilamt, out resbillamt, out reserr, out errMsg);
                                    if (!string.IsNullOrEmpty(resbillamt.status))
                                    {
                                        if (resbillamt.status == success)
                                        {

                                            writeLog("Payment DueDate Before Convert" + resbillamt.paymentDueDate + "Current Date Before Convert: " + DateTime.Now);
                                            DateTime DueDate;
                                            DateTime CurrentDate = DateTime.Now;
                                            if (ConfigurationManager.AppSettings["YescIsDeductDueDate"].ToString() == "N")
                                            {
                                                DueDate = DateTime.Parse(resbillamt.paymentDueDate);

                                            }
                                            else
                                            {
                                                writeLog("it is deduct Yes");
                                                string strDeduct = ConfigurationManager.AppSettings["YescTotalDeductDate"].ToString();
                                                writeLog("total deductday:" + strDeduct);
                                                int deduct = int.Parse(strDeduct);
                                                DueDate = (DateTime.Parse(resbillamt.paymentDueDate).AddDays(deduct));
                                                DueDate = new DateTime(DueDate.Date.Year, DueDate.Date.Month, DueDate.Date.Day, 15, 00, 00);
                                            }

                                            writeLog("Payment DueDate AFTER Convert" + DueDate + "Current Date AFTER Convert: " + CurrentDate);
                                            if (DueDate < CurrentDate)
                                            {

                                                writeLog("Payment Expired");
                                                rescode = "03";
                                                resdecs = "Expired Already";
                                                return Utils.getErrorRes(rescode, resdecs);
                                            }
                                            else
                                            {
                                                writeLog("Payment Due Date not expired yet");

                                                if (!string.IsNullOrEmpty(resbillamt.paidstatus))
                                                {
                                                    resbillamt.paidstatus = resbillamt.paidstatus.ToUpper();
                                                }
                                                writeLog("Paid Status:" + resbillamt.paidstatus);
                                                if (resbillamt.paidstatus == "YES" || resbillamt.paidstatus == "PENDING")//|| resbillamt.paidstatus.ToUpper().Trim() == "NULL" string.IsNullOrEmpty(resbillamt.paidstatus) ||
                                                {
                                                    rescode = "03";
                                                    resdecs = "Paid Already";
                                                    return Utils.getErrorRes(rescode, resdecs);
                                                }
                                                else if (string.IsNullOrEmpty(resbillamt.paidstatus) || resbillamt.paidstatus == "NULL")
                                                {
                                                    writeLog("Paid Status is Null Check Duplicated YESC customer ref in 1Stop DB");
                                                    if (_agentWCF.IsDuplicatedCNPYESCPayment(ref1, DueDate.AddDays(-30), DueDate, out errMsg))
                                                    {
                                                        writeLog("Customer Reference Number:" + ref1 + "Is already paid at 1STOP");
                                                        rescode = "03";
                                                        resdecs = "Paid Already";
                                                        return Utils.getErrorRes(rescode, resdecs);
                                                    }

                                                }


                                            }
                                        }
                                        else if (resbillamt.status == fail)
                                        {
                                            writeLog("Response From PayYee Amount Detail inquiry is fail status=" + resbillamt.status);
                                            writeLog("Error Code:" + reserr.errorCode);
                                            writeLog("Error Description:" + reserr.errorMessage);

                                            return Utils.getErrorRes(reserr.errorCode, getCNPErrMsg(reserr.errorCode));
                                        }
                                    }
                                    else
                                    {
                                        writeLog("Response From PayYee Amount Detail Inquiry status is empty");
                                        writeLog("Error Code:" + reserr.errorCode);
                                        writeLog("Error Description:" + reserr.errorMessage);

                                        return Utils.getErrorRes("06", getCNPErrMsg(reserr.errorCode));
                                    }
                                    #endregion
                                }


                                payment.EnquiryBillAmount(reqbilamt, out resbillamt, out reserr, out errMsg);

                                if (!string.IsNullOrEmpty(resbillamt.status))
                                {

                                    if (resbillamt.status == success)
                                    {
                                        if (!string.IsNullOrEmpty(amount))//Check Amount if CNP new version for old version no need to check 
                                        {
                                            if (double.Parse(amount) > 0)
                                            {
                                                writeLog("Request Amount:" + amount + "|CNP Amount:" + resbillamt.amount);
                                                if (double.Parse(amount) != double.Parse(resbillamt.amount))//Check Amount if CNP new version for old version no need to check 
                                                {
                                                    return Utils.getErrorRes("06", "Amount Missmatch");
                                                }
                                            }
                                        }
                                        writeLog("Response From PayYee Inquiry is success status=" + resbillamt.status);

                                        inquiryResponseModel inqRes = new inquiryResponseModel();
                                        inqRes.ResCode = "00";
                                        inqRes.ResDesc = "Success";
                                        inqRes.taxID = taxID;
                                        inqRes.merchantname = merchantname;
                                        inqRes.merchantlogo = merchantlogo;
                                        inqRes.billername = billerName;
                                        inqRes.billerlogo = billerLogo;
                                        inqRes.ref1 = ref1;
                                        inqRes.ref2 = resbillamt.name;
                                        inqRes.ref3 = string.Empty;
                                        inqRes.ref4 = string.Empty;
                                        inqRes.ref5 = biller + ":" + resbillamt.Camount + ":" + resbillamt.Coamount;
                                        inqRes.ref1Name = ref1Name;
                                        inqRes.ref2Name = ref3Name;
                                        inqRes.ref3Name = string.Empty;
                                        inqRes.ref4Name = string.Empty;
                                        inqRes.ref5Name = string.Empty;
                                        inqRes.amount = resbillamt.amount;
                                        inqRes.serviceFee = serviceFee;
                                        inqRes.status = status;
                                        inqRes.expiry = expiry;
                                        inqRes.productDescription = productdesc;
                                        inqRes.imgUrl = imgURL;

                                        return Utils.getInquiryRes(inqRes);
                                    }
                                    else if (resbillamt.status == fail)
                                    {
                                        writeLog("Response From PayYee Inquiry is fail status=" + resbillamt.status);
                                        writeLog("Response Code:" + resbillamt.failcode);
                                        writeLog("Response Message:" + resbillamt.message);
                                        return Utils.getErrorRes(resbillamt.failcode, getCNPErrMsg(resbillamt.failcode));

                                    }
                                }
                                else
                                {
                                    writeLog("Response From PayYee Inquiry status is empty");
                                    writeLog("Error Code:" + reserr.errorCode);
                                    writeLog("Error Description:" + reserr.errorMessage);
                                    return Utils.getErrorRes("06", getCNPErrMsg(reserr.errorCode));

                                }

                            }

                        }





                    }
                    #endregion

                    #region <-- Rent2Own -->
                    if (MapTaxID == "0000000000029")
                    {
                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            #region <-- Simulator Mode On -->
                            rescode = "00";
                            resdecs = "Success";

                            inquiryResponseModel inqres = new inquiryResponseModel();
                            inqres.ResCode = rescode;
                            inqres.ResDesc = resdecs;
                            inqres.taxID = taxID;
                            inqres.merchantname = merchantname;
                            inqres.merchantlogo = merchantlogo;
                            inqres.billerlogo = billerLogo;
                            inqres.billername = billerName;
                            inqres.ref1 = ref1;
                            inqres.ref2 = "Test User";
                            inqres.ref3 = "R2O Contract";
                            inqres.ref4 = "31-10-2020";
                            inqres.ref5 = "R2O Contract" + " " + "31-10-2020";
                            inqres.ref1Name = ref1Name;
                            inqres.ref2Name = ref2Name;
                            inqres.ref3Name = "Description";
                            inqres.ref4Name = "DueDate";
                            inqres.ref5Name = string.Empty;
                            inqres.amount = "400000";
                            inqres.serviceFee = serviceFee;
                            inqres.status = "Success";
                            inqres.expiry = "31-10-2020";
                            inqres.productDescription = string.Empty;// inqRes.ContractDescription;
                            inqres.imgUrl = imgURL;

                            string inqResString = Utils.getInquiryRes(inqres);
                            return inqResString;
                            #endregion
                        }
                        else
                        {
                            #region <-- Simulater Mode Off -->
                            string inqmethod = ConfigurationManager.AppSettings["Rent2OwnInquiry"].ToString();
                            string agncode = ConfigurationManager.AppSettings["Rent2OwnAgnCode"].ToString();
                            string rent2OwnKey = ConfigurationManager.AppSettings["Rent2OwnKey"].ToString();
                            string rent2Ownuri = ConfigurationManager.AppSettings["Rent2OwnUri"].ToString();
                            Rent2OwnInquiryRequest inqReq = new Rent2OwnInquiryRequest();
                            Rent2OwnInquiryResponse inqRes = new Rent2OwnInquiryResponse();
                            inqReq.ContractNumber = ref1;
                            inqReq.AgentCode = agncode;
                            inqReq.PaymentType = ref5;
                            inqReq.TimeStamp = DateTime.Now.ToString("yyyyMMddhhmmssffff");

                            writeLog("Rent2Own inqReq:");
                            writeLog("Rent2Own inqReq:" + inqReq);

                            inqReq.HashValue = Utils.generateHashValue((inqReq.ContractNumber + inqReq.TimeStamp + inqReq.AgentCode), rent2OwnKey).ToLower();
                            string jsonReq = JsonConvert.SerializeObject(inqReq, Newtonsoft.Json.Formatting.Indented, new JsonSerializerSettings { DefaultValueHandling = DefaultValueHandling.Ignore });
                            string uri = string.Empty;
                            uri = rent2Ownuri + inqmethod;
                            writeLog("Rent2Own inqRequest URL:" + uri);
                            writeLog("Rent2Own jsonRequest:");
                            writeLog("Rent2Own jsonRequest:" + jsonReq);
                            string jsonres = Utils.Rent2OwnRequest(jsonReq, uri);

                            string res = jsonres;
                            writeLog("Rent2Own InqRes:" + res);
                            var json_serializerres = new JavaScriptSerializer();
                            inqRes = json_serializerres.Deserialize<Rent2OwnInquiryResponse>(jsonres);
                            //ContractNumber + ContractDescription+ResponseCode+ResponseDescription+CustomerName+Amount+DueDate 
                            string temphash = inqRes.HashValue;
                            string HashCompare = Utils.generateHashValue((inqRes.ContractNumber + inqRes.ContractDescription + inqRes.ResponseCode + inqRes.ResponseDescription + inqRes.CustomerName + inqRes.Amount + inqRes.DueDate), rent2OwnKey).ToLower();
                            if (temphash == HashCompare)
                            {
                                if (inqRes.ResponseCode == "00")
                                {
                                    writeLog("Rent2Own  Response : Amount = " + amount);


                                    serviceFeeDbl = Utils.getFee(double.Parse(inqRes.Amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                                    serviceFee = serviceFeeDbl.ToString("###0.00");
                                    string inqResString = string.Empty;
                                    #region <-- Inquiry to titan OK response back success inquiry response -->
                                    rescode = "00";
                                    resdecs = "Success";

                                    inquiryResponseModel inqres = new inquiryResponseModel();
                                    inqres.ResCode = rescode;
                                    inqres.ResDesc = resdecs;
                                    inqres.taxID = taxID;
                                    inqres.merchantname = merchantname;
                                    inqres.merchantlogo = merchantlogo;
                                    inqres.billerlogo = billerLogo;
                                    inqres.billername = billerName;
                                    inqres.ref1 = ref1;
                                    inqres.ref2 = inqRes.CustomerName;
                                    inqres.ref3 = inqRes.ContractDescription;
                                    inqres.ref4 = inqRes.DueDate;
                                    inqres.ref5 = inqRes.ContractDescription.Replace(" ", "") + ":" + inqReq.PaymentType + " " + inqRes.DueDate;
                                    inqres.ref1Name = ref1Name;
                                    inqres.ref2Name = ref2Name;
                                    inqres.ref3Name = "Description";
                                    inqres.ref4Name = "DueDate";
                                    inqres.ref5Name = string.Empty;
                                    inqres.amount = inqRes.Amount;
                                    inqres.serviceFee = serviceFee;
                                    inqres.status = "Success";
                                    inqres.expiry = inqRes.DueDate;
                                    inqres.productDescription = string.Empty;// inqRes.ContractDescription;
                                    inqres.imgUrl = imgURL;

                                    inqResString = Utils.getInquiryRes(inqres);
                                    return inqResString;
                                    #endregion
                                }
                                else
                                {
                                    return Utils.getErrorRes(inqRes.ResponseCode, inqRes.ResponseDescription);
                                }
                            }
                            else
                            {
                                return Utils.getErrorRes(inqRes.ResponseCode, inqRes.ResponseDescription);

                            }
                            #endregion
                        }


                    }
                    #endregion

                    #region <-- Awba Repayment -->
                    else if (MapTaxID == "0000000000023")
                    {
                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            //if Simulator is on Do something Here
                            serviceFeeDbl = Utils.getFee(double.Parse("100000"), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                            serviceFee = serviceFeeDbl.ToString("###0.00");

                            code = "00";
                            desp = "Success";

                            inquiryResponseModel inqRes = new inquiryResponseModel();
                            inqRes.ResCode = code;
                            inqRes.ResDesc = desp;
                            inqRes.taxID = taxID;
                            inqRes.merchantname = string.Empty;
                            inqRes.merchantlogo = string.Empty;
                            inqRes.billername = billerName;
                            inqRes.billerlogo = billerLogo;
                            inqRes.ref1 = ref1;
                            inqRes.ref2 = ref2;
                            inqRes.ref3 = string.Empty;
                            inqRes.ref4 = string.Empty;
                            inqRes.ref5 = "100000";
                            inqRes.ref1Name = ref1Name;
                            inqRes.ref2Name = ref2Name;
                            inqRes.ref3Name = string.Empty;
                            inqRes.ref4Name = string.Empty;
                            inqRes.ref5Name = "Total Loan";
                            inqRes.amount = amount;
                            inqRes.serviceFee = serviceFee;
                            inqRes.status = status;
                            inqRes.expiry = DateTime.Now.Date.ToShortDateString();
                            inqRes.productDescription = "1000:10:OneYearLoan:YearlyLoan:12/12/2015";
                            inqRes.imgUrl = imgURL;

                            return Utils.getInquiryRes(inqRes);
                        }
                        else
                        {
                            if (ConfigurationManager.AppSettings["IsAwbaMIT"].ToString() == "Y")
                            {
                                writeLog("This Is Awba MIT MFI");
                                #region <-- Awba MIT -->
                                string awbaMitUrl = string.Empty;
                                string awbaMitInquiryMethod = "RepayInquiry";
                                awbaMitUrl = ConfigurationManager.AppSettings["MitAwbaUrl"].ToString() + awbaMitInquiryMethod;
                                string loanType = string.Empty;

                                string loandesc = string.Empty;
                                string amt = string.Empty;
                                string ref6 = string.Empty;
                                StringBuilder hb = new StringBuilder();

                                string tsp = System.DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss:fff");
                                // Version + TimeStamp + MessageID + CustomerID + SlipNo
                                string hashkeystr = Utils.GethashKeyawbaInqReq("1.0", tsp, messageid, ref2, ref1);

                                hb.Append("<InquiryReq>");
                                hb.Append("<Version>1.0</Version>");
                                hb.Append("<TimeStamp>" + tsp + "</TimeStamp>");
                                hb.Append("<MessageID>" + messageid + "</MessageID>");
                                hb.Append("<CustomerID>" + ref2 + "</CustomerID>");
                                hb.Append("<SlipNo>" + ref1 + "</SlipNo>");
                                hb.Append("<HashValue>" + hashkeystr + "</HashValue>");
                                hb.Append("</InquiryReq>");
                                writeLog("Inquiry Request To MFI Before Encrypt:" + hb.ToString());
                                SinaptIQPKCS7.PKCS7 pkcs7 = new SinaptIQPKCS7.PKCS7();
                                string encryptedMsg = pkcs7.encryptMessage(hb.ToString(), pkcs7.getPublicCert(ConfigurationManager.AppSettings["publicKeyPathawba"].ToString()));
                                writeLog("Inquiry Request To MFI After Encrypt:" + encryptedMsg);
                                string responsestr = string.Empty;
                                string decryptedresdata = string.Empty;
                               
                                SSLPost post = new SSLPost();
                                try
                                {
                                    if (!post.postToMitAwba(awbaMitUrl, encryptedMsg, out responsestr, out errMsg))
                                    {
                                        writeLog("cannot Post To Awba MIT:" + errMsg);
                                        return Utils.getErrorRes("99", "Null Response From MFI");
                                    }
                                }
                                catch (Exception ex)
                                {
                                    writeLog("Error Response From  MFI WCF:" + ex.Message);

                                    return Utils.getErrorRes("99", "Error Response From MFI");
                                }
                               
                                decryptedresdata = pkcs7.decryptMessage(responsestr, pkcs7.getPrivateCert(ConfigurationManager.AppSettings["privateKeyPathawba"].ToString(), ConfigurationManager.AppSettings["privateKeyPWDawba"].ToString()));
                                writeLog("Inquiry Response form awba after Decrypted:" + decryptedresdata);
                                Hashtable htt = Utils.getHTableFromXML(decryptedresdata);
                                try
                                {
                                    if (!IsValidateInquiryResAwba(htt, out rescode, out resdecs, out version, out messageid, out ref1, out ref2, out ref3, out ref4, out ref5, out ref6, out loanType, out loandesc, out hashvalue, out amt, out ts))
                                    {

                                        return Utils.getErrorRes(rescode, resdecs);
                                    }
                                    else
                                    {

                                        if (rescode != "00")
                                        {

                                            return Utils.getErrorRes(rescode, resdecs);
                                        }
                                        else
                                        {
                                            amt = Utils.getFrom12DigitToOrginal(amt);
                                            ref5 = Utils.getFrom12DigitToOrginal(ref5);
                                            ref6 = Utils.getFrom12DigitToOrginal(ref6);
                                            string totalloan = (double.Parse(amt) + double.Parse(ref5) + double.Parse(ref6)).ToString();
                                            serviceFeeDbl = Utils.getFee(double.Parse(totalloan), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                                            serviceFee = serviceFeeDbl.ToString("###0.00");

                                            writeLog("Total Loan:" + totalloan);
                                            inquiryResponseModel inqRes = new inquiryResponseModel();
                                            inqRes.ResCode = rescode;
                                            inqRes.ResDesc = resdecs;
                                            inqRes.taxID = taxID;
                                            inqRes.merchantname = string.Empty;
                                            inqRes.merchantlogo = string.Empty;
                                            inqRes.billername = billerName;
                                            inqRes.billerlogo = billerLogo;
                                            inqRes.ref1 = ref1;
                                            inqRes.ref2 = ref2;
                                            inqRes.ref3 = string.Empty;
                                            inqRes.ref4 = string.Empty;
                                            inqRes.ref5 = totalloan;
                                            inqRes.ref1Name = ref1Name;
                                            inqRes.ref2Name = ref2Name;
                                            inqRes.ref3Name = string.Empty;
                                            inqRes.ref4Name = string.Empty;
                                            inqRes.ref5Name = "Total Loan";
                                            inqRes.amount = string.Empty;
                                            inqRes.serviceFee = serviceFee;
                                            inqRes.status = status;
                                            inqRes.expiry = ref3;
                                            inqRes.productDescription = ref5 + ":" + ref6 + ":" + loanType + ":" + loandesc + ":" + ref3;
                                            inqRes.imgUrl = imgURL;
                                            return Utils.getInquiryRes(inqRes);
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    writeLog("Excepiton Error" + ex.Message);

                                    return Utils.getErrorRes("99", "System Error");
                                }
                                #endregion
                            }
                            else
                            {
                                #region <-- Awba ACE MFI -->
                                writeLog("This Is Awba ACE MFI");
                                string loanType = string.Empty;

                                string loandesc = string.Empty;
                                string amt = string.Empty;
                                string ref6 = string.Empty;
                                StringBuilder hb = new StringBuilder();
                                //Guid id = new Guid();

                                string tsp = System.DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss:fff");
                                // Version + TimeStamp + MessageID + CustomerID + SlipNo
                                string hashkeystr = Utils.GethashKeyawbaInqReq("1.0", tsp, messageid, ref2, ref1);

                                hb.Append("<InquiryReq>");
                                hb.Append("<Version>1.0</Version>");
                                hb.Append("<TimeStamp>" + tsp + "</TimeStamp>");
                                hb.Append("<MessageID>" + messageid + "</MessageID>");
                                hb.Append("<CustomerID>" + ref2 + "</CustomerID>");
                                hb.Append("<SlipNo>" + ref1 + "</SlipNo>");
                                hb.Append("<HashValue>" + hashkeystr + "</HashValue>");
                                hb.Append("</InquiryReq>");
                                writeLog("Inquiry Request To MFI Before Encrypt:" + hb.ToString());
                                SinaptIQPKCS7.PKCS7 pkcs7 = new SinaptIQPKCS7.PKCS7();
                                string encryptedMsg = pkcs7.encryptMessage(hb.ToString(), pkcs7.getPublicCert(ConfigurationManager.AppSettings["publicKeyPathawba"].ToString()));//Convert.ToBase64String(encodedEncryptedCms);
                                writeLog("Inquiry Request To MFI After Encrypt:" + encryptedMsg);
                                string responsestr = string.Empty;
                                string decryptedresdata = string.Empty;
                                MahaAwbaWCF.RouteWebServiceSoapClient mobilewcf = new MahaAwbaWCF.RouteWebServiceSoapClient();
                                try
                                {
                                    responsestr = mobilewcf.GetRepaymentInquiryInfo(encryptedMsg);
                                    writeLog("Response From MFI Before Decrypt:" + responsestr);
                                    if (string.IsNullOrEmpty(responsestr))
                                    {

                                        return Utils.getErrorRes("99", "Null Response From MFI");
                                    }
                                }
                                catch (Exception ex)
                                {
                                    writeLog("Error Response From MFI WCF:" + ex.Message);

                                    return Utils.getErrorRes("99", "Error Response From MFI");
                                }
                                string privatecer = ConfigurationManager.AppSettings["privateKeyPathawba"].ToString();
                                string pass = ConfigurationManager.AppSettings["privateKeyPWDawba"].ToString();
                                decryptedresdata = pkcs7.decryptMessage(responsestr, pkcs7.getPrivateCert(ConfigurationManager.AppSettings["privateKeyPathawba"].ToString(), ConfigurationManager.AppSettings["privateKeyPWDawba"].ToString()));
                                writeLog("Inquiry Response form awba after Decrypted:" + decryptedresdata);
                                Hashtable htt = Utils.getHTableFromXML(decryptedresdata);
                                try
                                {
                                    if (!IsValidateInquiryResAwba(htt, out rescode, out resdecs, out version, out messageid, out ref1, out ref2, out ref3, out ref4, out ref5, out ref6, out loanType, out loandesc, out hashvalue, out amt, out ts))
                                    {

                                        return Utils.getErrorRes(rescode, resdecs);
                                    }
                                    else
                                    {

                                        if (rescode != "00")
                                        {

                                            return Utils.getErrorRes(rescode, resdecs);
                                        }
                                        else
                                        {
                                            amt = Utils.getFrom12DigitToOrginal(amt);
                                            ref5 = Utils.getFrom12DigitToOrginal(ref5);
                                            ref6 = Utils.getFrom12DigitToOrginal(ref6);
                                            string totalloan = (double.Parse(amt) + double.Parse(ref5) + double.Parse(ref6)).ToString();
                                            serviceFeeDbl = Utils.getFee(double.Parse(totalloan), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                                            serviceFee = serviceFeeDbl.ToString("###0.00");

                                            writeLog("Total Loan:" + totalloan);
                                            inquiryResponseModel inqRes = new inquiryResponseModel();
                                            inqRes.ResCode = rescode;
                                            inqRes.ResDesc = resdecs;
                                            inqRes.taxID = taxID;
                                            inqRes.merchantname = string.Empty;
                                            inqRes.merchantlogo = string.Empty;
                                            inqRes.billername = billerName;
                                            inqRes.billerlogo = billerLogo;
                                            inqRes.ref1 = ref1;
                                            inqRes.ref2 = ref2;
                                            inqRes.ref3 = string.Empty;
                                            inqRes.ref4 = string.Empty;
                                            inqRes.ref5 = totalloan;
                                            inqRes.ref1Name = ref1Name;
                                            inqRes.ref2Name = ref2Name;
                                            inqRes.ref3Name = string.Empty;
                                            inqRes.ref4Name = string.Empty;
                                            inqRes.ref5Name = "Total Loan";
                                            inqRes.amount = string.Empty;
                                            inqRes.serviceFee = serviceFee;
                                            inqRes.status = status;
                                            inqRes.expiry = ref3;
                                            inqRes.productDescription = ref5 + ":" + ref6 + ":" + loanType + ":" + loandesc + ":" + ref3;
                                            inqRes.imgUrl = imgURL;
                                            return Utils.getInquiryRes(inqRes);
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    writeLog("Excepiton Error" + ex.Message);

                                    return Utils.getErrorRes("99", "System Error");
                                }
                                #endregion
                            }

                        }
                    }
                    #endregion



                    #region <-- Four TV -->
                    if (MapTaxID == "0000000000031")
                    {
                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            #region <-- Simulator Mode -->

                            writeLog("get 4TV Product Price List");
                            string fourTVProductPrice = ConfigurationManager.AppSettings["fourTVPrice"].ToString();//get ProductID:Price string set of 4TV.
                            writeLog("get 4TV Product Price List OK");
                            Hashtable fourTVProductPriceHt = Utils.getMerchantCodeHashtable(fourTVProductPrice);//Fatch productID and Price pair of 4TV

                            writeLog("get 4TV Product Price List");
                            string fourTVProductName = ConfigurationManager.AppSettings["fourTVProduct"].ToString();//get ProductID:Price string set of 4TV.
                            writeLog("get 4TV Product Price List OK");
                            Hashtable fourTVProductNameHt = Utils.getMerchantCodeHashtable(fourTVProductName);//Fatch productID and Price pair of 4TV
                            string productName = string.Empty;
                            string viewername = "4TV Tester";
                            if (fourTVProductPriceHt.ContainsKey(ref3))
                            {
                                amount = fourTVProductPriceHt[ref3].ToString();
                                writeLog("productPirce" + amount);
                                serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                                serviceFee = serviceFeeDbl.ToString("###0.00");
                                if (!(double.Parse(amount) > 0))
                                {
                                    writeLog("Amount is 0 Need to check Config at fourTVPrice tag and fourTVProduct tag that productid and price pair are correct or not");
                                    Utils.getErrorRes("06", "Price Not Avaliable");
                                }



                            }

                            if (fourTVProductNameHt.Contains(ref3))
                            {
                                productName = fourTVProductNameHt[ref3].ToString();
                            }

                            string inqResString = string.Empty;
                            rescode = "00";
                            resdecs = "Success";

                            inquiryResponseModel inqres = new inquiryResponseModel();
                            inqres.ResCode = rescode;
                            inqres.ResDesc = resdecs;
                            inqres.taxID = taxID;
                            inqres.merchantname = merchantname;
                            inqres.merchantlogo = merchantlogo;
                            inqres.billerlogo = billerLogo;
                            inqres.billername = billerName;
                            inqres.ref1 = ref1;
                            inqres.ref2 = viewername;
                            inqres.ref3 = productName;
                            inqres.ref4 = string.Empty;
                            inqres.ref5 = ref3 + ":" + productName;
                            inqres.ref1Name = ref1Name;
                            inqres.ref2Name = ref2Name;
                            inqres.ref3Name = "Product";
                            inqres.ref4Name = string.Empty;
                            inqres.ref5Name = string.Empty;
                            inqres.amount = amount;
                            inqres.serviceFee = serviceFee;
                            inqres.status = "Success";
                            inqres.expiry = string.Empty;
                            inqres.productDescription = string.Empty;// inqRes.ContractDescription;
                            inqres.imgUrl = imgURL;

                            inqResString = Utils.getInquiryRes(inqres);
                            return inqResString;


                            #endregion

                        }
                        else
                        {
                            #region <-- Simulator Mode Off -->
                            string username = ConfigurationManager.AppSettings["fourTVUserID"].ToString();
                            string pas = ConfigurationManager.AppSettings["fourTVPass"].ToString();
                            string parameter = "username=" + username + "&password=" + pas + "&viewers_smartcard_id=" + ref1;
                            // string parameter = ref1;
                            string url = ConfigurationManager.AppSettings["fourTVUri"].ToString();
                            url = url + "viewer.php";
                            string responseData = string.Empty;
                            string viewerstatus = string.Empty;
                            string viewername = string.Empty;

                            string productName = string.Empty;
                            writeLog("Request URL:" + url);
                            writeLog("Request Parameter:" + parameter);
                            SSLPost post = new SSLPost();
                            if (post.postData(url, parameter, out responseData, out errMsg))
                            {
                                writeLog("fourTV inqRes:" + responseData);
                                fourTVViewerListRes fourTVRes = new fourTVViewerListRes(responseData);
                                // StringBuilder sb = new StringBuilder();
                                if (fourTVRes.status == 1 && fourTVRes.responseDetail.Count == 1)
                                {
                                    foreach (var data in fourTVRes.responseDetail)
                                    {
                                        viewername = data.Value.viewerfirstname + " " + data.Value.viewerlastname;

                                        viewerstatus = data.Value.vieweractive;

                                    }
                                    if (viewerstatus == "1")//if viewer is active user do here.
                                    {

                                        writeLog("get 4TV Product Price List");
                                        string fourTVProductPrice = ConfigurationManager.AppSettings["fourTVPrice"].ToString();//get ProductID:Price string set of 4TV.
                                        writeLog("get 4TV Product Price List OK");
                                        Hashtable fourTVProductPriceHt = Utils.getMerchantCodeHashtable(fourTVProductPrice);//Fatch productID and Price pair of 4TV

                                        writeLog("get 4TV Product Price List");
                                        string fourTVProductName = ConfigurationManager.AppSettings["fourTVProduct"].ToString();//get ProductID:Price string set of 4TV.
                                        writeLog("get 4TV Product Price List OK");
                                        Hashtable fourTVProductNameHt = Utils.getMerchantCodeHashtable(fourTVProductName);//Fatch productID and Price pair of 4TV


                                        if (fourTVProductPriceHt.ContainsKey(ref3))
                                        {
                                            amount = fourTVProductPriceHt[ref3].ToString();
                                            writeLog("productPirce" + amount);
                                            serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                                            serviceFee = serviceFeeDbl.ToString("###0.00");

                                            if (double.Parse(amount) > 0)
                                            {
                                                writeLog("checking productPirce is :" + amount);

                                            }
                                            else
                                            {
                                                Utils.getErrorRes("06", "Invalid PriceType");
                                            }
                                        }

                                        if (fourTVProductNameHt.Contains(ref3))
                                        {
                                            productName = fourTVProductNameHt[ref3].ToString();
                                        }

                                        string inqResString = string.Empty;
                                        rescode = "00";
                                        resdecs = "Success";

                                        inquiryResponseModel inqres = new inquiryResponseModel();
                                        inqres.ResCode = rescode;
                                        inqres.ResDesc = resdecs;
                                        inqres.taxID = taxID;
                                        inqres.merchantname = merchantname;
                                        inqres.merchantlogo = merchantlogo;
                                        inqres.billerlogo = billerLogo;
                                        inqres.billername = billerName;
                                        inqres.ref1 = ref1;
                                        inqres.ref2 = viewername;
                                        inqres.ref3 = productName;
                                        inqres.ref4 = string.Empty;
                                        inqres.ref5 = ref3 + ":" + productName;
                                        inqres.ref1Name = ref1Name;
                                        inqres.ref2Name = ref2Name;
                                        inqres.ref3Name = "Product";
                                        inqres.ref4Name = string.Empty;
                                        inqres.ref5Name = string.Empty;
                                        inqres.amount = amount;
                                        inqres.serviceFee = serviceFee;
                                        inqres.status = "Success";
                                        inqres.expiry = string.Empty;
                                        inqres.productDescription = string.Empty;// inqRes.ContractDescription;
                                        inqres.imgUrl = imgURL;

                                        inqResString = Utils.getInquiryRes(inqres);
                                        return inqResString;

                                    }
                                    else
                                    {
                                        return Utils.getErrorRes("06", "Invalid Card Number");
                                    }
                                }
                                else
                                {
                                    return Utils.getErrorRes("06", "Invalid Card Number");
                                }

                                string product = sb.ToString();
                            }
                            else
                            {
                                writeLog("Error Posting To 4TV:" + errMsg);
                                return Utils.getErrorRes("06", "System Busy!");
                            }

                            #endregion
                        }
                    }
                    #endregion

                    #region <-- 123Remit_CashIn -->


                    if (MapTaxID.Trim() == "0000000000032")
                    {
                        writeLog("123Remit CashIn Inquiry AgentCode:" + agentCode);

                        writeLog("Amount" + amount + "servicePercent" + servicePercent + "serviceFlatFee" + serviceFlatFee);
                        productdesc = "123Remit CashIn";
                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {

                            #region <-- Inquiry Response When simulator is turn on -->
                            writeLog("Simulator Y");
                            agentFee = "000000030000";
                            status = "PE";
                            serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));//double.Parse((double.Parse(agentFee)).ToString("#,##0.00"));
                            serviceFee = serviceFeeDbl.ToString("###0.00");
                            inquiryResponseModel responseCashIn = new inquiryResponseModel();
                            responseCashIn.ResCode = code;
                            responseCashIn.ResDesc = desp;
                            responseCashIn.taxID = taxID;
                            responseCashIn.billername = agentName;
                            responseCashIn.billerlogo = billerLogo;
                            responseCashIn.productDescription = productdesc;
                            string responseXML = Utils.getInquiryRes(responseCashIn);
                            writeLog("RES XML : " + responseXML);
                            return responseXML;
                            #endregion

                        }
                        else
                        {

                            #region <-- If Simulator is turn off -->
                            if (IsTokenNullOrExpire(Token))
                            {
                                Token = GetOAuthToken();
                            }
                            CashInInquiryRequest cashinRequest = new CashInInquiryRequest();

                            cashinRequest.Token = Token.Token;
                            cashinRequest.Channel = ConfigurationManager.AppSettings["123RemitChannelCode"].ToString();
                            writeLog("Payee Info " + ref4);
                            string[] strPayee = ref4.Split('-');
                            cashinRequest.PayerName = ref2;
                            cashinRequest.PayerEmail = string.Empty;
                            cashinRequest.PayerPhone = ref3;
                            cashinRequest.PayerNRC = string.Empty;
                            cashinRequest.PayeeName = strPayee[0].ToString();
                            cashinRequest.PayeeEmail = string.Empty;
                            cashinRequest.PayeePhone = strPayee[1].ToString();
                            cashinRequest.PayeeNRC = strPayee[2].ToString();
                            cashinRequest.Amount = amount;
                            cashinRequest.Remark = strPayee[3].ToString();
                            cashinRequest.PaidBy = ref5;
                            cashinRequest.BranchID = strPayee[4].ToString();
                            cashinRequest.DivisionID = strPayee[5].ToString();
                            cashinRequest.TownshipID = strPayee[6].ToString();

                            string API = ConfigurationManager.AppSettings["123RemitCashInInquiryUrl"].ToString();

                            var json_serializer1 = new JavaScriptSerializer();


                            string jsonReq = json_serializer1.Serialize(cashinRequest);

                            writeLog("123 Remit CashIn request:" + jsonReq);

                            string cashinResponseJson = SSLPost.SendRequestJson(jsonReq, API);

                            writeLog("123 Remit CashIn response:" + cashinResponseJson);

                            var json_serializerpinres = new JavaScriptSerializer();

                            GetInquiryCashInResult InquiryCashInResult = json_serializerpinres.Deserialize<GetInquiryCashInResult>(cashinResponseJson);

                            CashInInquiryResponse cashinResponse = InquiryCashInResult.InquiryCashInResult;

                            if (cashinResponse.ResponseCode != "0")
                            {
                                ErrorResponse errResponse = new ErrorResponse();
                                errResponse.ResCode = cashinResponse.ResponseCode;
                                errResponse.ResDesc = VerificationRemittanceResponse.VerifyResponse(Convert.ToInt16(cashinResponse.ResponseCode));
                                string apiResponse = Utils.getErrorRes(errResponse.ResCode, errResponse.ResDesc);
                                return apiResponse;

                            }
                            else
                            {
                                cashinResponse = DecryptionResponse.DecryptCashinInInquiryResponse(cashinResponse);

                                writeLog("Amount : " + cashinResponse.Amount + " | Payer Fee : " + cashinResponse.PayerFee + " | Payee Fee : " + cashinResponse.PayeeFee + "......");
                                status = "PE";
                                //serviceFeeDbl = Utils.getFee(double.Parse(amount),
                                //    float.Parse(servicePercent), double.Parse(serviceFlatFee));//double.Parse((double.Parse(agentFee)).ToString("#,##0.00"));                           
                                //serviceFee = serviceFeeDbl.ToString("###0.00");
                                //BillerInfo billerinfo = GetBillerFee(ConfigurationManager.AppSettings["123RemitCashOut"].ToString(), agentID, email);
                                //double cashoutfee = Utils.getFee(double.Parse(amount),
                                //  float.Parse(billerinfo.ServicePercent), double.Parse(billerinfo.ServiceFlatFee));//double.Parse((double.Parse(agentFee)).ToString("#,##0.00"));     
                                //amount = OneTwoThreeRemit.GetTransactionAmount(Convert.ToDecimal(amount), Convert.ToDecimal(serviceFeeDbl), Convert.ToDecimal(cashoutfee), Convert.ToInt16(cashinRequest.PaidBy), 1).ToString();
                                //serviceFee = OneTwoThreeRemit.GetServiceFee(Convert.ToDecimal(serviceFeeDbl), Convert.ToDecimal(cashoutfee), Convert.ToInt16(cashinRequest.PaidBy), 1).ToString("###0.00"); // 1 is CashIn
                                serviceFee = OneTwoThreeRemit.GetServiceFee(Convert.ToDecimal(cashinResponse.PayerFee), Convert.ToDecimal(cashinResponse.PayeeFee), Convert.ToInt16(cashinRequest.PaidBy), 1).ToString("###0.00");
                                writeLog("serviceFee : " + serviceFee);
                                inquiryResponseModel inquiryResponse = new inquiryResponseModel();
                                inquiryResponse.ResCode = "00";
                                inquiryResponse.ResDesc = "Success";
                                inquiryResponse.taxID = taxID;
                                inquiryResponse.billername = billerName;
                                inquiryResponse.billerlogo = billerLogo;
                                inquiryResponse.ref1 = cashinRequest.PayerName;
                                inquiryResponse.ref2 = cashinRequest.PayeeName;
                                inquiryResponse.ref3 = cashinRequest.PayeePhone;
                                inquiryResponse.ref4 = cashinRequest.PayeeNRC;
                                inquiryResponse.ref5 = cashinRequest.PayerPhone; ;
                                inquiryResponse.ref6 = cashinResponse.TxnRef + "-" + cashinRequest.PaidBy + "-" + cashinRequest.BranchID;
                                inquiryResponse.ref1Name = "Payer Name";
                                inquiryResponse.ref2Name = "Payee Name";
                                inquiryResponse.ref3Name = "Payee Mobile";
                                inquiryResponse.ref4Name = "Payee NRC";
                                inquiryResponse.ref5Name = "Payer Mobile";
                                inquiryResponse.ref6Name = string.Empty;
                                inquiryResponse.amount = amount;
                                inquiryResponse.serviceFee = serviceFee;
                                inquiryResponse.status = status;
                                inquiryResponse.expiry = System.DateTime.Now.AddYears(1).ToString("yyyyMMddhhmmssffff");
                                inquiryResponse.productDescription = productdesc;
                                inquiryResponse.imgUrl = imgURL;
                                string inquiryRes = Utils.getInquiryReswithRef6(inquiryResponse);
                                writeLog("RES XML : " + inquiryRes);
                                return inquiryRes;

                            }

                            #endregion
                        }
                    }



                    #endregion

                    #region <-- 123Remit_CashOut -->

                    if (MapTaxID.Trim() == "0000000000033")
                    {
                        writeLog("123 Remit CashOut :" + agentCode);

                        DataSet dsAgent = null;
                        string agentBranchCode = string.Empty;
                        string agentDivision = string.Empty;
                        string agentTownship = string.Empty;


                        if (_agentWCF.checkAgentInfoforCashOut(agentID, email, out dsAgent, out errmsg))
                        {
                            if (dsAgent.Tables[0].Rows.Count > 0)
                            {
                                agentBranchCode = dsAgent.Tables[0].Rows[0]["AGENTBRANCHID"].ToString();
                                agentDivision = dsAgent.Tables[0].Rows[0]["Division"].ToString();
                                agentTownship = dsAgent.Tables[0].Rows[0]["Township"].ToString();
                            }
                        }

                        productdesc = "123Remit CashOut";
                        writeLog("Amount" + amount + "servicePercent" + servicePercent + "serviceFlatFee" + serviceFlatFee);

                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {

                            #region <-- Enquiry Response When simulator is turn on -->
                            writeLog("Simulator Y");
                            agentFee = "000000030000";
                            status = "PE";
                            productdesc = "123 Remit Cash Out";

                            serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));//double.Parse((double.Parse(agentFee)).ToString("#,##0.00"));
                            serviceFee = serviceFeeDbl.ToString("###0.00");
                            inquiryResponseModel responseCashIn = new inquiryResponseModel();

                            responseCashIn.ResCode = code;
                            responseCashIn.ResDesc = desp;
                            responseCashIn.taxID = taxID;
                            responseCashIn.billername = agentName;
                            responseCashIn.billerlogo = billerLogo;
                            responseCashIn.productDescription = productdesc;
                            string responseXML = Utils.getInquiryReswithRef6(responseCashIn);// APIResponse.GetInquiryResponse(responseCashIn);

                            return responseXML;

                            #endregion

                        }
                        else
                        {

                            #region <-- If Simulator is turn off -->
                            if (IsTokenNullOrExpire(Token))
                            {
                                Token = GetOAuthToken();
                            }
                            CashOutInquiryRequest cashoutRequest = new CashOutInquiryRequest();
                            cashoutRequest.Token = Token.Token;
                            cashoutRequest.Channel = ConfigurationManager.AppSettings["123RemitChannelCode"].ToString();
                            // cashoutRequest.DigitalCode = ref2;
                            cashoutRequest.DigitalCode = ref1;
                            cashoutRequest.TownshipID = agentTownship;
                            cashoutRequest.BranchCode = agentBranchCode;
                            cashoutRequest.DivisionID = agentDivision;
                            string API = ConfigurationManager.AppSettings["123RemitCashOutInquiryUrl"].ToString();

                            var json_serializer1 = new JavaScriptSerializer();

                            string jsonReq = json_serializer1.Serialize(cashoutRequest);

                            writeLog("123 Remit CashOut request:" + jsonReq);

                            string cashoutResponseJson = SSLPost.SendRequestJson(jsonReq, API);

                            writeLog("123 Remit CashOut response:" + cashoutResponseJson);


                            var json_serializerpinres = new JavaScriptSerializer();

                            GetInquiryCashOutResult InquiryCashOutResult = json_serializerpinres.Deserialize<GetInquiryCashOutResult>(cashoutResponseJson);

                            CashOutInquiryResponse cashoutResponse = InquiryCashOutResult.InquiryCashOutResult;

                            if (cashoutResponse.ResponseCode != "0")
                            {
                                ErrorResponse errResponse = new ErrorResponse();
                                errResponse.Version = "1.0";
                                errResponse.TimeStamp = System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                                errResponse.ResCode = cashoutResponse.ResponseCode;
                                errResponse.ResDesc = VerificationRemittanceResponse.VerifyResponse(Convert.ToInt16(cashoutResponse.ResponseCode));
                                string apiResponse = Utils.getErrorRes(errResponse.ResCode, errResponse.ResDesc);// APIResponse.GetErrorResponse(errResponse);

                                return apiResponse;

                            }
                            else
                            {
                                cashoutResponse = DecryptionResponse.DecryptCashinOutInquiryResponse(cashoutResponse);

                                writeLog("Amount : " + cashoutResponse.Amount + " | Payer Fee : " + cashoutResponse.PayerFee + " | Payee Fee : " + cashoutResponse.PayeeFee + "......");
                                status = "PE";
                                serviceFee = OneTwoThreeRemit.GetServiceFee(Convert.ToDecimal(cashoutResponse.PayerFee), Convert.ToDecimal(cashoutResponse.PayeeFee), Convert.ToInt16(cashoutResponse.PaidBy), 2).ToString("###0.00");
                                inquiryResponseModel inquiryResponse = new inquiryResponseModel();
                                inquiryResponse.ResCode = "00";
                                inquiryResponse.ResDesc = "Success";
                                inquiryResponse.taxID = taxID;
                                inquiryResponse.billername = billerName;
                                inquiryResponse.billerlogo = billerLogo;
                                inquiryResponse.ref1 = cashoutResponse.PayerName;
                                inquiryResponse.ref2 = cashoutResponse.PayerPhone;
                                inquiryResponse.ref3 = cashoutResponse.PayeeName;
                                inquiryResponse.ref4 = cashoutResponse.PayeeNRC;
                                inquiryResponse.ref5 = cashoutResponse.PayeePhone;
                                inquiryResponse.ref6 = cashoutResponse.TxnRef + "-" + ref1 + "-" + cashoutResponse.PaidBy;
                                inquiryResponse.ref1Name = "Payer Name";
                                inquiryResponse.ref2Name = "Payer Mobile";
                                inquiryResponse.ref3Name = "Payee Name";
                                inquiryResponse.ref4Name = "Payee NRC";
                                inquiryResponse.ref5Name = "Mobile No";
                                inquiryResponse.ref6Name = string.Empty;
                                inquiryResponse.amount = cashoutResponse.Amount;
                                inquiryResponse.serviceFee = serviceFee;
                                inquiryResponse.status = status;
                                inquiryResponse.expiry = System.DateTime.Now.AddYears(1).ToString("yyyyMMddhhmmssffff");
                                inquiryResponse.productDescription = productdesc;
                                inquiryResponse.imgUrl = imgURL;
                                string inquiryRes = Utils.getInquiryReswithRef6(inquiryResponse);//APIResponse.GetInquiryResponse(inquiryResponse);

                                return inquiryRes;

                            }

                            #endregion
                        }
                    }



                    #endregion

                    #region <-- Zala By Tz 13-Dec-2016 -->
                    else if (MapTaxID == "0000000000050") ////Zala
                    {
                        writeLog("This is Zala.");

                        DataSet ds = null;
                        //writeLog("*********Ref1************************ :" + ref1);
                        _agentWCF.getAgentNameByAgentCode(ref1, out ds, out errmsg); //Ref1 is agentCode
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            if (ds.Tables[0].Rows[0]["AGREEMENTTYPE"].ToString() != "Y")
                            {

                                inquiryResponseModel inqRes = new inquiryResponseModel();
                                inqRes.ResCode = "00";
                                inqRes.ResDesc = "Success";
                                inqRes.taxID = taxID;
                                inqRes.merchantname = merchantname;
                                inqRes.merchantlogo = merchantlogo;
                                inqRes.billername = billerName;
                                inqRes.billerlogo = billerLogo;
                                inqRes.ref1 = ref1;
                                inqRes.ref2 = ds.Tables[0].Rows[0]["AGENTNAME"].ToString();
                                inqRes.ref3 = ref3;
                                inqRes.ref4 = ref4;
                                inqRes.ref5 = ref5;
                                inqRes.ref1Name = ref1Name;
                                inqRes.ref2Name = ref2Name;
                                inqRes.ref3Name = ref3Name;
                                inqRes.ref4Name = ref4Name;
                                inqRes.ref5Name = ref5Name;
                                inqRes.amount = amount;
                                inqRes.serviceFee = serviceFee;
                                inqRes.status = status;
                                inqRes.expiry = expiry;
                                inqRes.productDescription = productdesc;
                                inqRes.imgUrl = imgURL;

                                return Utils.getInquiryRes(inqRes);
                            }
                            else
                            {
                                rescode = "01";
                                resdecs = "Agent NOT Applicable";
                                return Utils.getErrorRes(rescode, resdecs);
                            }
                        }
                        else
                        {

                            rescode = "01";
                            resdecs = "Agent NOT Found";

                            return Utils.getErrorRes(rescode, resdecs);
                        }
                        //}
                    }
                    #endregion

                    #region <-- Viber out By Tz 24-Feb-2017 -->

                    else if (MapTaxID == ConfigurationManager.AppSettings["ViberOutTaxId"].ToString())
                    {
                        string billercode = GetBillerCode(MapTaxID);
                        var inquiryResponseModel = new inquiryResponseModel()
                        {
                            ResCode = rescode,
                            ResDesc = resdecs,
                            taxID = taxID,
                            merchantname = merchantname,
                            merchantlogo = merchantlogo,
                            billername = billerName,
                            billerlogo = billerLogo,
                            ref1 = ref1,
                            ref2 = ref2,
                            ref3 = ref3,
                            ref4 = ref4,
                            ref5 = ref5,
                            ref1Name = ref1Name,
                            ref2Name = ref2Name,
                            ref3Name = ref3Name,
                            ref4Name = ref4Name,
                            ref5Name = ref5Name,
                            amount = amount,
                            serviceFee = serviceFee,
                            status = status,
                            expiry = expiry,
                            productDescription = productdesc,
                            imgUrl = imgURL
                        };

                        return (new EBAGiftCardEPinManager()).getInquiryResponse(inquiryResponseModel, messageid, billercode);

                    }

                    #endregion

                    #region <-- 663 CashIn/Load By Tz 22-Sep-2017 -->

                    // taxID == "0000000000009" CashOut || taxID == "0000000000008"Load Balance/CashIn || taxID == "0000000000007" ||
                    //                <InquiryReq>
                    //<Version>1.0</Version>
                    //<TimeStamp>yyyyMMddhhmmssffff</TimeStamp>
                    //<MessageID>768866yyhhhhhh</MessageID>
                    //<Email>user@agent.com</Email>
                    //<Password>xxxxxxxxxx</Password>
                    //<RequestedBy>user@agent.com</RequestedBy>
                    //<Taxid>1230000000000</Taxid>//Tax ID is bound by Biller ID
                    //<IsQR></IsQR> //For QR Scan Request
                    //<Ref1>Receiver Mobile No</Ref1> // Mandatory
                    //<Ref2></Ref2> // Mandatory or Optional dependent on Biller
                    //<Ref3></Ref3> // Mandatory or Optional dependent on Biller
                    //<Ref4></Ref4> // Mandatory or Optional dependent on Biller
                    //<Ref5></Ref5> // Mandatory or Optional dependent on Biller
                    //<Amount>Amount</Amount>
                    //</InquiryReq>

                    if (MapTaxID == "0000000000008")
                    {
                        writeLog("$$$$$$$$$$$$$$$$$$$$$$$$$$$$ This Is 663 CashIn/Load $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
                        productdesc = "663 Load";
                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            writeLog("Simulator Y");


                            serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));//double.Parse((double.Parse(agentFee)).ToString("#,##0.00"));
                            serviceFee = serviceFeeDbl.ToString("###0.00");
                            inquiryResponseModel inqRes663CashIn = new inquiryResponseModel();
                            inqRes663CashIn.ref1Name = ref1Name;
                            inqRes663CashIn.ref1 = ref1;
                            inqRes663CashIn.ResCode = code;
                            inqRes663CashIn.ResDesc = desp;
                            inqRes663CashIn.taxID = taxID;
                            inqRes663CashIn.billername = billerName;
                            inqRes663CashIn.billerlogo = billerLogo;
                            inqRes663CashIn.productDescription = productdesc;
                            inqRes663CashIn.amount = amount;
                            inqRes663CashIn.serviceFee = serviceFee;
                            string responseXML = Utils.getInquiryRes(inqRes663CashIn);

                            return responseXML;
                        }
                        else
                        {
                            Request663 request663 = new Request663();
                            Response663 response663 = new Response663();
                            request663.transactionType = ConfigurationManager.AppSettings["663UserInfoPrefix"].ToString();
                            request663.receiverMobileNo = ref1;
                            response663 = confirmRequestTo663(request663);
                            if (response663.Result)
                            {
                                serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));//double.Parse((double.Parse(agentFee)).ToString("#,##0.00"));
                                serviceFee = serviceFeeDbl.ToString("###0.00");
                                inquiryResponseModel inqRes663CashIn = new inquiryResponseModel();
                                inqRes663CashIn.ref1Name = ref1Name;
                                inqRes663CashIn.ref1 = ref1;
                                inqRes663CashIn.ResCode = code;
                                inqRes663CashIn.ResDesc = desp;
                                inqRes663CashIn.taxID = taxID;
                                inqRes663CashIn.billername = billerName;
                                inqRes663CashIn.billerlogo = billerLogo;
                                inqRes663CashIn.amount = amount;
                                inqRes663CashIn.serviceFee = serviceFee;
                                inqRes663CashIn.productDescription = productdesc;
                                string responseXML = Utils.getInquiryRes(inqRes663CashIn);

                                return responseXML;
                            }
                            else
                            {
                                writeLog("CashIn user is not registered or Inactive at 663");
                                return Utils.getErrorRes("06", "Invalid/Inactive 663 User.");
                            }
                        }
                    }


                    #endregion

                    #region <-- Viber out By Tz 24-Feb-2017 -->

                    else if (MapTaxID == ConfigurationManager.AppSettings["ViberOutTaxId"].ToString())
                    {
                        string billercode = GetBillerCode(MapTaxID);
                        var inquiryResponseModel = new inquiryResponseModel()
                        {
                            ResCode = rescode,
                            ResDesc = resdecs,
                            taxID = taxID,
                            merchantname = merchantname,
                            merchantlogo = merchantlogo,
                            billername = billerName,
                            billerlogo = billerLogo,
                            ref1 = ref1,
                            ref2 = ref2,
                            ref3 = ref3,
                            ref4 = ref4,
                            ref5 = ref5,
                            ref1Name = ref1Name,
                            ref2Name = ref2Name,
                            ref3Name = ref3Name,
                            ref4Name = ref4Name,
                            ref5Name = ref5Name,
                            amount = amount,
                            serviceFee = serviceFee,
                            status = status,
                            expiry = expiry,
                            productDescription = productdesc,
                            imgUrl = imgURL
                        };

                        return (new EBAGiftCardEPinManager()).getInquiryResponse(inquiryResponseModel, messageid, billercode);

                    }

                    #endregion

                    #region <-- 663 Remmit/Send -->

                    if (MapTaxID == "0000000000007")
                    {
                        writeLog("$$$$$$$$$$$$$$$$$$$$$$ This Is 663 Remitt $$$$$$$$$$$$$$$$$$$$$$$");
                        DataSet ds = new DataSet();
                        string minAmount = string.Empty;
                        string maxAmount = string.Empty;
                        string txnFee = string.Empty;
                        string serviceCharge = string.Empty;
                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            writeLog("Simulator Y");
                            if (_agentWCF.get663FeesByAmount(int.Parse(billerid), decimal.Parse(amount), out ds, out errmsg))
                            {
                                minAmount = ds.Tables[0].Rows[0]["MINAMOUNT"].ToString();
                                maxAmount = ds.Tables[0].Rows[0]["MAXAMOUNT"].ToString();
                                txnFee = ds.Tables[0].Rows[0]["TRANSACTIONFEES"].ToString();
                                serviceCharge = ds.Tables[0].Rows[0]["SERVICECHARGE"].ToString();

                                writeLog("amount range:" + minAmount + "to" + maxAmount + "|TransactionFees:" + txnFee + "|ServiceCharge:" + serviceCharge);
                                serviceFeeDbl = (double.Parse(txnFee) + double.Parse(serviceCharge));
                                serviceFee = serviceFeeDbl.ToString("###0.00");

                                inquiryResponseModel inqRes663Remit = new inquiryResponseModel();
                                inqRes663Remit.ref1Name = ref1Name;
                                inqRes663Remit.ref2Name = ref2Name;
                                inqRes663Remit.ref3Name = ref5Name;
                                inqRes663Remit.ref4Name = ref4Name;
                                inqRes663Remit.ref5Name = ref3Name;
                                inqRes663Remit.ref1 = ref1;
                                inqRes663Remit.ref2 = ref2;
                                inqRes663Remit.ref3 = ref3;
                                inqRes663Remit.ref5 = ref5;
                                inqRes663Remit.ResCode = code;
                                inqRes663Remit.ResDesc = desp;
                                inqRes663Remit.taxID = taxID;
                                inqRes663Remit.billername = billerName;
                                inqRes663Remit.billerlogo = billerLogo;
                                inqRes663Remit.productDescription = productdesc;
                                inqRes663Remit.amount = amount;
                                inqRes663Remit.serviceFee = serviceFee;
                                string responseXML = Utils.getInquiryRes(inqRes663Remit);

                                return responseXML;
                                //    RemitReq
                                //<ref1>toMobileNo</ref1>
                                //<ref2>toData(toName:toNrc)</ref2>
                                //<ref3>fromMobileNo</ref3>
                                //<ref4></ref4>
                                //<ref5>fromData(fromName:fromNrc)</ref5>

                                //RemitRes
                                //<ref1>09xxxxxxxxx</ref1>
                                //<ref2>Lu Lu:10/ABC(N)000000</ref2>
                                //<ref3>09xxxxxxxxx</ref3>
                                //<ref4></ref4>
                                //<ref5>Thet Zaw:11/CBA(N)111111</ref5>
                                //<ref1Name>To Mobile No.</ref1Name>
                                //<ref2Name>Name/NRC (To)</ref2name>
                                //<ref3Name>From Mobile No.</ref3Name>
                                //<ref4Name></ref4Name>
                                //<ref5Name>Name/NRC (From)</ref5Name>
                            }
                            else
                            {
                                return Utils.getErrorRes("06", "Invalid Amount");
                            }
                        }
                        else
                        {
                            if (_agentWCF.get663FeesByAmount(int.Parse(billerid), decimal.Parse(amount), out ds, out errmsg))
                            {
                                minAmount = ds.Tables[0].Rows[0]["MINAMOUNT"].ToString();
                                maxAmount = ds.Tables[0].Rows[0]["MAXAMOUNT"].ToString();
                                txnFee = ds.Tables[0].Rows[0]["TRANSACTIONFEES"].ToString();
                                serviceCharge = ds.Tables[0].Rows[0]["SERVICECHARGE"].ToString();

                                writeLog("amount range:" + minAmount + "to" + maxAmount + "|TransactionFees:" + txnFee + "|ServiceCharge:" + serviceCharge);
                                serviceFeeDbl = (double.Parse(txnFee) + double.Parse(serviceCharge));
                                serviceFee = serviceFeeDbl.ToString("###0.00");

                                inquiryResponseModel inqRes663Remit = new inquiryResponseModel();
                                inqRes663Remit.ref1Name = ref1Name;
                                inqRes663Remit.ref2Name = ref2Name;
                                inqRes663Remit.ref3Name = ref5Name;
                                inqRes663Remit.ref4Name = ref4Name;
                                inqRes663Remit.ref5Name = ref3Name;
                                inqRes663Remit.ref1 = ref1;
                                inqRes663Remit.ref2 = ref2;
                                inqRes663Remit.ref3 = ref3;
                                inqRes663Remit.ref5 = ref5;
                                inqRes663Remit.ResCode = code;
                                inqRes663Remit.ResDesc = desp;
                                inqRes663Remit.taxID = taxID;
                                inqRes663Remit.billername = billerName;
                                inqRes663Remit.billerlogo = billerLogo;
                                inqRes663Remit.productDescription = productdesc;
                                inqRes663Remit.amount = amount;
                                inqRes663Remit.serviceFee = serviceFee;
                                string responseXML = Utils.getInquiryRes(inqRes663Remit);

                                return responseXML;
                            }
                            else
                            {
                                return Utils.getErrorRes("06", "Invalid Amount");
                            }
                        }
                    }



                    #endregion

                    #region <-- 663 CashOut -->
                    //<InquiryReq>
                    //<Version>1.0</Version>
                    //<TimeStamp>201710061246274860</TimeStamp>
                    //<MessageID>6e93675e-d1d9-4b67-b2c6-37469e84a0b1</MessageID>
                    //<Email>lulunb1u1</Email>
                    //<Password>NiS2foLhEzocRWp/g7e2Zhna0P9sdWx1bmIxdTE=</Password>
                    //<RequestedBy>lulunb1u1</RequestedBy>
                    //<TaxID>0000000000009</TaxID>
                    //<Ref1>XKJI</Ref1>
                    //<Ref2>thetzawwin</Ref2>
                    //<Ref3>09254051624</Ref3>
                    //<Ref4>10mlm</Ref4>
                    //<Ref5></Ref5>
                    //<Amount>10000</Amount>
                    //<TopupType>S</TopupType>
                    //<IsQR></IsQR>
                    //</InquiryReq> 
                    if (MapTaxID == "0000000000009")
                    {
                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            writeLog("Simulator Y");

                            inquiryResponseModel inqRes663CashOut = new inquiryResponseModel();
                            inqRes663CashOut.ref1Name = ref1Name;
                            inqRes663CashOut.ref1 = ref1;
                            inqRes663CashOut.ref2Name = ref2Name;
                            inqRes663CashOut.ref2 = ref2;
                            inqRes663CashOut.ref3Name = "";
                            inqRes663CashOut.ref3 = "";
                            inqRes663CashOut.ref4Name = ref4Name;
                            inqRes663CashOut.ref4 = ref4;
                            inqRes663CashOut.ref5 = ref5;
                            inqRes663CashOut.ref5Name = ref3Name;
                            inqRes663CashOut.ResCode = code;
                            inqRes663CashOut.ResDesc = desp;
                            inqRes663CashOut.taxID = taxID;
                            inqRes663CashOut.billername = billerName;
                            inqRes663CashOut.billerlogo = billerLogo;
                            inqRes663CashOut.productDescription = productdesc;
                            inqRes663CashOut.amount = amount;
                            inqRes663CashOut.serviceFee = serviceFee;
                            string responseXML = Utils.getInquiryRes(inqRes663CashOut);

                            return responseXML;
                        }
                        else
                        {
                            inquiryResponseModel inqRes663CashOut = new inquiryResponseModel();
                            inqRes663CashOut.ref1Name = ref1Name;
                            inqRes663CashOut.ref1 = ref1;
                            inqRes663CashOut.ref2Name = ref2Name;
                            inqRes663CashOut.ref2 = ref2;
                            inqRes663CashOut.ref3Name = string.Empty;
                            inqRes663CashOut.ref3 = string.Empty;
                            inqRes663CashOut.ref4Name = ref4Name;
                            inqRes663CashOut.ref4 = ref4;
                            inqRes663CashOut.ref5 = ref5;
                            inqRes663CashOut.ref5Name = ref3Name;
                            inqRes663CashOut.ResCode = code;
                            inqRes663CashOut.ResDesc = desp;
                            inqRes663CashOut.taxID = taxID;
                            inqRes663CashOut.billername = billerName;
                            inqRes663CashOut.billerlogo = billerLogo;
                            inqRes663CashOut.productDescription = productdesc;
                            inqRes663CashOut.amount = amount;
                            inqRes663CashOut.serviceFee = serviceFee;
                            string responseXML = Utils.getInquiryRes(inqRes663CashOut);

                            return responseXML;
                        }
                    }
                    #endregion

                    #region <-- Canal-Plus -->
                    if (MapTaxID == ConfigurationManager.AppSettings["CanalPlusTaxId"].ToString())
                    {
                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            #region <-- Simulator Mode -->

                            string inqResString = string.Empty;
                            rescode = "00";
                            resdecs = "Success";

                            inquiryResponseModelCanalPlus inqres = new inquiryResponseModelCanalPlus();
                            inqres.ResCode = rescode;
                            inqres.ResDesc = resdecs;
                            inqres.taxID = taxID;
                            inqres.ref1 = ref1;
                            inqres.ref2 = "Ref2"; //viewername;
                            inqres.ref3 = "T2-HD (12 months)"; //productName;
                            inqres.ref4 = string.Empty;
                            inqres.ref5 = ref3 + ":" + "T2-HD (12 months)"; //productName;
                            inqres.ref1Name = ref1Name;
                            inqres.ref2Name = ref2Name;
                            inqres.ref3Name = "Product/Duration";
                            inqres.ref4Name = "Ref4Name";
                            inqres.ref5Name = "Ref5Name";
                            inqres.amount = amount;
                            inqres.serviceFee = serviceFee;
                            inqres.status = "Success";
                            inqres.expiry = "13-05-2018";
                            inqres.productDescription = "Product Desp";// inqRes.ContractDescription;
                            inqres.imgUrl = imgURL;
                            inqres.billerName = "CanalPlus";
                            inqres.billerLogo = billerLogo;

                            inqResString = Utils.getInquiryResCanalPlus(inqres);
                            return inqResString;

                            #endregion
                        }
                        else
                        {
                            #region <-- Simulator Mode Off -->
                            writeLog(messageid + " Start CanalPlus Inquiry request region");
                            var inquiryResponseModel = new inquiryResponseModel()
                            {
                                ResCode = rescode,
                                ResDesc = resdecs,
                                taxID = taxID,
                                merchantname = merchantname,
                                merchantlogo = merchantlogo,
                                billername = billerName,
                                billerlogo = billerLogo,
                                ref1 = ref1,
                                ref2 = ref2,
                                ref3 = ref3,
                                ref4 = ref4,
                                ref5 = ref5,
                                ref1Name = ref1Name,
                                ref2Name = ref2Name,
                                ref3Name = ref3Name,
                                ref4Name = ref4Name,
                                ref5Name = ref5Name,
                                amount = amount,
                                serviceFee = serviceFee,
                                status = status,
                                expiry = expiry,
                                productDescription = productdesc,
                                imgUrl = imgURL
                            };

                            return (new CanalPlusManager()).getInquiryRes(inquiryResponseModel, canalPlusReqType, messageid, servicePercent, serviceFlatFee, sessionID);
                            #endregion
                        }
                    }
                    #endregion

                    #region <-- Solar Home -->
                    if (MapTaxID == "0000000000053")
                    {
                        string apiUrl = ConfigurationManager.AppSettings["SolarHomeAPI"].ToString() + "device";
                        string apiKey = ConfigurationManager.AppSettings["SolarHomeAPIKey"].ToString();

                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {

                        }
                        else
                        {

                        }
                        writeLog("$$$$$$$$$$$$ SolarHome inqReq: $$$$$$$$$$$$");

                        string jsonParam = "{\"api_key\": \"" + apiKey + "\",\"account_number\":" + "\"" + ref1 + "\"}";

                        writeLog("SolarHome inqReq: " + jsonParam);
                        var json_serializerpinres = new JavaScriptSerializer();
                        SSLPost post = new SSLPost();
                        string respData = "";
                        SolarHomeInquiryRes solarHomeInqRes = new SolarHomeInquiryRes();
                        List<SolarHomeInquiryRes> lstSolarHomeInqRes = new List<SolarHomeInquiryRes>();
                        //-999 txnId means inquiry
                        var txnIdForInquiry = -999;
                        if (post.postDateSolarHome(apiUrl, jsonParam, txnIdForInquiry, out respData))
                        {
                            writeLog("SolarHome inqRes: " + respData);

                            //respData = "{\"test_account\":true,\"date_input\":\"2017-01-12T03:43:01\",\"name\":\"OmniVoltaic Sample\",\"account_number\":\"2800514\",\"device_type\":\"Smart box\",\"description\":\"test Smart\",\"active\":true}";
                            lstSolarHomeInqRes = json_serializerpinres.Deserialize<List<SolarHomeInquiryRes>>(respData);
                            if (lstSolarHomeInqRes.Count < 1)
                            {
                                writeLog("Error : Invalid Account Number");
                                return Utils.getErrorRes("404", "Invalid Account Number");
                            }
                            solarHomeInqRes = lstSolarHomeInqRes[0];
                            solarHomeInqRes.ResponseCode = "0";
                            solarHomeInqRes.ResponseDescription = "Success";
                            if (solarHomeInqRes.ResponseCode == "0")
                            {
                                bool isActive = Convert.ToBoolean(solarHomeInqRes.Active.ToString().ToLower());
                                bool isTestAcc = Convert.ToBoolean(solarHomeInqRes.Test_Account.ToString().ToLower());
                                if (isActive) //&& !isTestAcc
                                {
                                    string inqResString = string.Empty;
                                    rescode = "00";
                                    resdecs = "Success";
                                    inquiryResponseModelSolarHome inqres = new inquiryResponseModelSolarHome();
                                    inqres.ResCode = rescode;
                                    inqres.ResDesc = resdecs;
                                    inqres.taxID = taxID;
                                    inqres.amount = amount;
                                    inqres.serviceFee = serviceFee;
                                    inqres.ref1 = ref1;
                                    inqres.ref2 = ref2;
                                    inqres.ref3 = solarHomeInqRes.Device_Type;
                                    inqres.ref4 = ref4;
                                    inqres.ref5 = ref5;
                                    inqres.ref1Name = ref1Name;
                                    inqres.ref2Name = ref2Name;
                                    inqres.ref3Name = ref3Name;
                                    inqres.ref4Name = ref4Name;
                                    inqres.ref5Name = ref5Name;
                                    inqres.Active = solarHomeInqRes.Active;
                                    inqres.Description = solarHomeInqRes.Description;
                                    inqres.Name = solarHomeInqRes.Name;
                                    inqres.TestAccount = solarHomeInqRes.Test_Account;
                                    inqres.billerName = "SolarHome";
                                    inqres.billerLogo = billerLogo;
                                    inqres.imgUrl = imgURL;
                                    inqResString = Utils.getInquiryResSolarHome(inqres);
                                    writeLog("Solar Home Inquiry Response String : " + inqResString);
                                    return inqResString;
                                }
                                else
                                {
                                    writeLog("Subscriber Number Not Found:" + errMsg);
                                    return Utils.getErrorRes("06", "Subscriber Number Not Found!");
                                }
                            }
                            else
                            {
                                writeLog("Response Fail:" + errMsg);
                                return Utils.getErrorRes("06", solarHomeInqRes.ResponseDescription);
                            }
                        }
                        else
                        {
                            writeLog("Error Posting To SolarHome:" + errMsg);
                            return Utils.getErrorRes("06", solarHomeInqRes.ResponseDescription);
                        }
                    }
                    #endregion

                    #region <-- Phatama Group -->
                    if (MapTaxID == "0000000000056")
                    {
                        string apiUrl = ConfigurationManager.AppSettings["PhatamaGroupAPI"].ToString() + "GetPendingInvoiceByCustomerId";
                        string apiKey = ConfigurationManager.AppSettings["PhatamaGroupAPIKey"].ToString();

                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {

                        }
                        else
                        {

                        }
                        writeLog("$$$$$$$$$$$$ Phatama Group inqReq: $$$$$$$$$$$$");

                        PgToken = GetPGOAuthToken();

                        var json_serializer1 = new JavaScriptSerializer();
                        var json_serializerpinres = new JavaScriptSerializer();

                        SSLPost post = new SSLPost();

                        PGPendingInvoiceRequest pgPendingInvoiceReq = new PGPendingInvoiceRequest();
                        pgPendingInvoiceReq.Token = PgToken.Token;
                        pgPendingInvoiceReq.PartnerCode = System.Configuration.ConfigurationManager.AppSettings["1StopPGPartnerCode"]; //ref1;
                        pgPendingInvoiceReq.CustomerID = ref2;

                        string parameter = json_serializer1.Serialize(pgPendingInvoiceReq);
                        writeLog("Phatama Group inqReq: " + parameter);

                        PGPendingInvoiceResponse pgPendingInvoiceResp = new PGPendingInvoiceResponse();
                        string responseData = string.Empty;

                        if (post.postDataPG(apiUrl, parameter, pgPendingInvoiceReq.Token, out responseData, out errMsg))
                        {
                            writeLog("Phatama Group inqRes:" + responseData);

                            pgPendingInvoiceResp = json_serializerpinres.Deserialize<PGPendingInvoiceResponse>(responseData);

                            if (pgPendingInvoiceResp.ErrorCode.Equals("0"))
                            {
                                if (!string.IsNullOrEmpty(pgPendingInvoiceResp.CustomerID))
                                {
                                    if (pgPendingInvoiceResp.FailReason != "There is no pending invoices")
                                    {
                                        DataSet ds = new DataSet();
                                        if (_agentWCF.getCustomerAndInvoiceInfo(0, pgPendingInvoiceResp.CustomerID, out ds, out errMsg))
                                        {
                                            if (ds.Tables[0].Rows.Count > 0)
                                            {
                                                foreach (DataRow dr in ds.Tables[0].Rows)
                                                {
                                                    if (dr["PAYMENTMETHOD"].ToString() != "MPU")
                                                    {
                                                        string invoiceNo = dr["INVOICENUMBER"].ToString();
                                                        pgPendingInvoiceResp.Invoices.RemoveAll(x => x.InvoiceNumber == invoiceNo);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        pgPendingInvoiceResp.Invoices = new List<PGInvoice>();
                                    }

                                    pgPendingInvoiceResp.Invoices.RemoveAll(x => x.Amount == "0.00");

                                    pgPendingInvoiceResp.ref1Name = "Partner Code";
                                    pgPendingInvoiceResp.ref2Name = "Customer ID";
                                    pgPendingInvoiceResp.Amount = amount;
                                    pgPendingInvoiceResp.ServiceFee = serviceFee;
                                    pgPendingInvoiceResp.AgentCode = agentCode;
                                    return Utils.getPendingInvoiceByCustomerIDResPG(pgPendingInvoiceResp);
                                }
                            }
                            if (pgPendingInvoiceResp.ErrorCode.Equals("1"))
                            {
                                pgPendingInvoiceResp.Invoices = new List<PGInvoice>();
                                pgPendingInvoiceResp.ref1Name = "Partner Code";
                                pgPendingInvoiceResp.ref2Name = "Customer ID";
                                return Utils.getErrorRes("01", pgPendingInvoiceResp.FailReason);
                            }
                            else
                            {
                                writeLog("Response Fail: " + errMsg);
                                return Utils.getErrorRes("06", pgPendingInvoiceResp.FailReason);
                            }
                        }
                        else
                        {
                            writeLog("Response Fail: " + errMsg);
                            return Utils.getErrorRes("06", errMsg);
                        }
                    }
                    #endregion

                    #region OoredooFtth
                    else if (MapTaxID == ConfigurationManager.AppSettings["OoredooFtth"].ToString())
                    {
                        writeLog("This is OoredooFtth.");
                        inquiryResponseModel inqresmdl = new inquiryResponseModel();
                        rescode = "00";
                        resdecs = "Success";
                        inqresmdl.ResCode = rescode;
                        inqresmdl.ResDesc = resdecs;
                        inqresmdl.taxID = taxID;
                        inqresmdl.merchantname = merchantname;
                        inqresmdl.merchantlogo = merchantlogo;
                        inqresmdl.billername = billerName;
                        inqresmdl.billerlogo = billerLogo;
                        inqresmdl.ref1 = Utils.ReplaceAmpersandString(ref1);
                        inqresmdl.ref2 = Utils.ReplaceAmpersandString(ref2);
                        inqresmdl.ref3 = string.Empty;
                        inqresmdl.ref4 = Utils.ReplaceAmpersandString(ref4);
                        inqresmdl.ref5 = Utils.ReplaceAmpersandString(ref5);
                        inqresmdl.ref1Name = ref1Name;
                        inqresmdl.ref2Name = ref2Name;
                        inqresmdl.ref3Name = string.Empty;
                        inqresmdl.ref4Name = ref4Name;
                        inqresmdl.ref5Name = string.Empty;
                        inqresmdl.amount = amount;
                        inqresmdl.serviceFee = serviceFee;
                        inqresmdl.status = status;
                        inqresmdl.expiry = expiry;
                        inqresmdl.productDescription = productdesc;
                        inqresmdl.imgUrl = imgURL;
                        return Utils.getInquiryRes(inqresmdl);
                    }

                    #endregion

                    #region MinTheinKha
                    else if (MapTaxID == ConfigurationManager.AppSettings["MinTheinKha"].ToString())
                    {
                        writeLog("This is MinTheinKha.");
                        inquiryResponseModel inqresmdl = new inquiryResponseModel();
                        rescode = "00";
                        resdecs = "Success";
                        inqresmdl.ResCode = rescode;
                        inqresmdl.ResDesc = resdecs;
                        inqresmdl.taxID = taxID;
                        inqresmdl.merchantname = merchantname;
                        inqresmdl.merchantlogo = merchantlogo;
                        inqresmdl.billername = billerName;
                        inqresmdl.billerlogo = billerLogo;
                        inqresmdl.ref1 = ref1;
                        inqresmdl.ref2 = ref2;
                        inqresmdl.ref3 = ref3;
                        inqresmdl.ref4 = ref4;
                        inqresmdl.ref5 = ref5;
                        inqresmdl.ref1Name = ref1Name;
                        inqresmdl.ref2Name = ref2Name;
                        inqresmdl.ref3Name = ref3Name;
                        inqresmdl.ref4Name = ref4Name;
                        inqresmdl.ref5Name = ref5Name;
                        inqresmdl.amount = amount;
                        inqresmdl.serviceFee = serviceFee;
                        inqresmdl.status = status;
                        inqresmdl.expiry = expiry;
                        inqresmdl.productDescription = productdesc;
                        inqresmdl.imgUrl = imgURL;
                        return Utils.getInquiryRes(inqresmdl);
                    }

                    #endregion

                    #region <-- MESC -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["MescTaxId"].ToString())
                    {
                        writeLog("This is Mesc Inquiry.");

                        if (!string.IsNullOrEmpty(ref3))
                        {
                            string billingMonth = ref3.Split(' ')[0];
                            string billingYear = ref3.Split(' ')[1];
                            string ebaUrl = ConfigurationManager.AppSettings["MescInquiryUrl"].ToString();
                            MescDetail detail = new MescDetail()
                            {
                                UniqueId = ref1,
                                Townshipcode = ref2
                            };
                            EbaInquiryReq inqReq = new EbaInquiryReq()
                            {
                                Token = GetOAuthToken().Token,
                                PartnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString(),
                                BillerCode = ConfigurationManager.AppSettings["MescBillerCode"].ToString(),
                                Detail = "{ 'Townshipcode' : '" + detail.Townshipcode + "', 'BillingMonth' : '" + billingMonth + "', 'BillingYear' : '" + billingYear + "', 'LedgerNo' : '', 'MeterNo' : '', 'UniqueId' : '" + detail.UniqueId + "' }"
                            };

                            string json = JsonConvert.SerializeObject(inqReq);

                            writeLog("Eba inquriy request for MESC" + " : " + json);

                            string res = Utils.PostEba(json, ebaUrl);

                            writeLog("Eba inquriy response for MESC" + " : " + res);
                            EbaInquiryRes inqRes = new EbaInquiryRes();
                            inqRes = JsonConvert.DeserializeObject<EbaInquiryRes>(res);

                            if (!string.IsNullOrEmpty(res) & inqRes.ErrorCode == "00")
                            {
                                string resCode = inqRes.ErrorCode;
                                string resDesc = inqRes.ErrorMessage;
                                string detailStr = inqRes.Detail.Replace("\\", "");
                                MescDetail detailJson = JsonConvert.DeserializeObject<MescDetail>(detailStr);

                                string uniqueCode = detailJson.UniqueId;
                                string meterNo = detailJson.MeterNo;
                                string ledgerNo = detailJson.LedgerNo;
                                string dueDate = DateTime.Parse(detailJson.DueDate).ToString("dd/MM/yyyy");
                                string epcRefNo = detailJson.EpcRefNo;
                                amount = inqRes.TransactionAmount;

                                serviceFeeDbl = Utils.getFee(double.Parse(string.IsNullOrEmpty(amount) ? "0.00" : amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                                serviceFee = serviceFeeDbl.ToString("###0.00");

                                inquiryResponseModel inqresmdl = new inquiryResponseModel()
                                {
                                    ResCode = resCode,
                                    ResDesc = resDesc,
                                    taxID = taxID,
                                    merchantname = merchantname,
                                    merchantlogo = merchantlogo,
                                    billername = billerName,
                                    billerlogo = billerLogo,
                                    ref1 = uniqueCode,
                                    ref2 = meterNo + "|" + ref3,
                                    ref3 = ledgerNo,
                                    ref4 = dueDate,
                                    ref5 = epcRefNo,
                                    ref1Name = ref1Name,
                                    ref2Name = ref2Name.Split('|')[1],
                                    ref3Name = "",
                                    ref4Name = ref4Name,
                                    ref5Name = "",
                                    amount = amount,
                                    serviceFee = serviceFee,
                                    status = status,
                                    expiry = expiry,
                                    productDescription = productdesc,
                                    imgUrl = imgURL,
                                };

                                return Utils.getInquiryRes(inqresmdl);
                            }
                            else
                            {
                                return Utils.getErrorRes(inqRes.ErrorCode, inqRes.ErrorMessage);
                            }
                        }
                        else
                        {
                            return Utils.getErrorRes("01", "Please update your application to use new version.");
                        }

                    }

                    #endregion

                    #region <-- 5BB FTH -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["5BBTaxId"].ToString())
                    {
                        writeLog("This is 5BB FTH Inquiry.");
                        inquiryResponseModel inqresmdl = new inquiryResponseModel();
                        rescode = "00";
                        resdecs = "Success";
                        inqresmdl.ResCode = rescode;
                        inqresmdl.ResDesc = resdecs;
                        inqresmdl.taxID = taxID;
                        inqresmdl.merchantname = merchantname;
                        inqresmdl.merchantlogo = merchantlogo;
                        inqresmdl.billername = billerName;
                        inqresmdl.billerlogo = billerLogo;
                        inqresmdl.ref1 = ref1;
                        inqresmdl.ref2 = ref2;
                        inqresmdl.ref3 = ref3;
                        inqresmdl.ref4 = ref4;
                        inqresmdl.ref5 = ref5;
                        inqresmdl.ref1Name = ref1Name;
                        inqresmdl.ref2Name = ref2Name;
                        inqresmdl.ref3Name = ref3Name;
                        inqresmdl.ref4Name = ref4Name;
                        inqresmdl.ref5Name = ref5Name;
                        inqresmdl.amount = amount;
                        inqresmdl.serviceFee = serviceFee;
                        inqresmdl.status = status;
                        inqresmdl.expiry = expiry;
                        inqresmdl.productDescription = productdesc;
                        inqresmdl.imgUrl = imgURL;
                        return Utils.getInquiryRes(inqresmdl);
                    }

                    #endregion

                    #region <-- Mahar Bawga - MBF -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["MBFTaxId"].ToString())
                    {
                        writeLog("This is MBF Inquiry.");
                        inquiryResponseModel inqresmdl = new inquiryResponseModel();
                        rescode = "00";
                        resdecs = "Success";
                        inqresmdl.ResCode = rescode;
                        inqresmdl.ResDesc = resdecs;
                        inqresmdl.taxID = taxID;
                        inqresmdl.merchantname = merchantname;
                        inqresmdl.merchantlogo = merchantlogo;
                        inqresmdl.billername = billerName;
                        inqresmdl.billerlogo = billerLogo;
                        inqresmdl.ref1 = ref1;
                        inqresmdl.ref2 = ref2;
                        inqresmdl.ref3 = ref3;
                        inqresmdl.ref4 = ref4;
                        inqresmdl.ref5 = ref5;
                        inqresmdl.ref1Name = ref1Name;
                        inqresmdl.ref2Name = ref2Name;
                        inqresmdl.ref3Name = ref3Name;
                        inqresmdl.ref4Name = ref4Name;
                        inqresmdl.ref5Name = ref5Name;
                        inqresmdl.amount = amount;
                        inqresmdl.serviceFee = serviceFee;
                        inqresmdl.status = status;
                        inqresmdl.expiry = expiry;
                        inqresmdl.productDescription = productdesc;
                        inqresmdl.imgUrl = imgURL;
                        return Utils.getInquiryRes(inqresmdl);
                    }

                    #endregion

                    #region<-- OnDoctor -->

                    else if (MapTaxID == ConfigurationManager.AppSettings["OnDoctorTaxId"].ToString())
                    {
                        writeLog("This is OnDoctor Inquiry.");
                        inquiryResponseModel inqresmdl = new inquiryResponseModel();
                        rescode = "00";
                        resdecs = "Success";
                        inqresmdl.ResCode = rescode;
                        inqresmdl.ResDesc = resdecs;
                        inqresmdl.taxID = taxID;
                        inqresmdl.merchantname = merchantname;
                        inqresmdl.merchantlogo = merchantlogo;
                        inqresmdl.billername = billerName;
                        inqresmdl.billerlogo = billerLogo;
                        inqresmdl.ref1 = ConfigurationManager.AppSettings["OnDoctorCardType"].ToString();
                        inqresmdl.ref2 = ref2;
                        inqresmdl.ref3 = ref3;
                        inqresmdl.ref4 = ref4;
                        inqresmdl.ref5 = ref5;
                        inqresmdl.ref1Name = ref1Name;
                        inqresmdl.ref2Name = ref2Name;
                        inqresmdl.ref3Name = string.Empty;
                        inqresmdl.ref4Name = string.Empty;
                        inqresmdl.ref5Name = string.Empty;
                        inqresmdl.amount = amount;
                        inqresmdl.serviceFee = serviceFee;
                        inqresmdl.status = status;
                        inqresmdl.expiry = expiry;
                        inqresmdl.productDescription = productdesc;
                        inqresmdl.imgUrl = imgURL;
                        return Utils.getInquiryRes(inqresmdl);
                    }

                    #endregion

                    #region <-- YESC -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["YescTaxId"].ToString())
                    {
                        writeLog("This is Yesc Inquiry.");
                        string ebaUrl = ConfigurationManager.AppSettings["YescInquiryUrl"].ToString();
                        YescDetail detail = new YescDetail()
                        {
                            MeterRefNo = ref1,
                        };
                        EbaInquiryReq inqReq = new EbaInquiryReq()
                        {
                            Token = GetOAuthToken().Token,
                            PartnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString(),
                            BillerCode = ConfigurationManager.AppSettings["YescBillerCode"].ToString(),
                            Detail = "{ 'MeterRefNo' : '" + detail.MeterRefNo + "' }"
                        };

                        string json = JsonConvert.SerializeObject(inqReq);

                        string res = Utils.PostEba(json, ebaUrl);

                        writeLog("Eba inquriy response for YESC" + " : " + res);
                        EbaInquiryRes inqRes = new EbaInquiryRes();
                        inqRes = JsonConvert.DeserializeObject<EbaInquiryRes>(res);

                        if (!string.IsNullOrEmpty(res) & inqRes.ErrorCode == "00")
                        {
                            string resCode = inqRes.ErrorCode;
                            string resDesc = inqRes.ErrorMessage;
                            string detailStr = inqRes.Detail.Replace("\\", "");
                            YescDetail detailJson = JsonConvert.DeserializeObject<YescDetail>(detailStr);

                            string meterBillDetailId = detailJson.MeterBillDetailId;
                            string meterNo = detailJson.MeterNo;
                            string ledgerNo = detailJson.LedgerNo;
                            string dueDate = DateTime.Parse(detailJson.DueDate).ToString("dd/MM/yyyy");
                            string meterRefNo = detailJson.MeterRefNo;
                            string meterBillAmount = detailJson.Amount;
                            amount = inqRes.TransactionAmount;

                            serviceFeeDbl = Utils.getFee(double.Parse(string.IsNullOrEmpty(amount) ? "0.00" : amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                            serviceFee = serviceFeeDbl.ToString("###0.00");

                            inquiryResponseModel inqresmdl = new inquiryResponseModel()
                            {
                                ResCode = resCode,
                                ResDesc = resDesc,
                                taxID = taxID,
                                merchantname = merchantname,
                                merchantlogo = merchantlogo,
                                billername = billerName,
                                billerlogo = billerLogo,
                                ref1 = meterRefNo,
                                ref2 = meterNo,
                                ref3 = ledgerNo,
                                ref4 = dueDate,
                                ref5 = meterBillDetailId + "|" + meterBillAmount,
                                ref1Name = ref1Name,
                                ref2Name = "",
                                ref3Name = "",
                                ref4Name = ref4Name,
                                ref5Name = "",
                                amount = amount,
                                serviceFee = serviceFee,
                                status = status,
                                expiry = expiry,
                                productDescription = productdesc,
                                imgUrl = imgURL,
                            };

                            return Utils.getInquiryRes(inqresmdl);
                        }
                        else
                        {
                            return Utils.getErrorRes(inqRes.ErrorCode, inqRes.ErrorMessage);
                        }
                    }

                    #endregion

                    #region<-- SaiSai Pay -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["SaiSaiPayTaxId"].ToString())
                    {
                        writeLog("This is SaiSai Pay Inquiry.");
                        string ebaUrl = ConfigurationManager.AppSettings["SaiSaiPayInquiryUrl"].ToString();
                        SaiSaiPayDetail detail = new SaiSaiPayDetail()
                        {
                            Type = ConfigurationManager.AppSettings["SaiSaiPayType"].ToString(),
                            MobileNumber = ref1
                        };
                        EbaInquiryReq inqReq = new EbaInquiryReq()
                        {
                            Token = GetOAuthToken().Token,
                            PartnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString(),
                            BillerCode = ConfigurationManager.AppSettings["SaiSaiPayBillerCode"].ToString(),
                            Detail = "{ 'Type' : '" + detail.Type + "', 'MobileNumber' : '" + detail.MobileNumber + "' }"
                        };

                        string json = JsonConvert.SerializeObject(inqReq);

                        string res = Utils.PostEba(json, ebaUrl);

                        writeLog("Eba inquriy response for SaiSai Pay" + " : " + res);
                        EbaInquiryRes inqRes = new EbaInquiryRes();
                        inqRes = JsonConvert.DeserializeObject<EbaInquiryRes>(res);

                        if (!string.IsNullOrEmpty(res) & inqRes.ErrorCode == "00")
                        {
                            string resCode = inqRes.ErrorCode;
                            string resDesc = inqRes.ErrorMessage;
                            string detailStr = inqRes.Detail.Replace("\\", "");
                            SaiSaiPayDetail detailJson = JsonConvert.DeserializeObject<SaiSaiPayDetail>(detailStr);

                            string userName = detailJson.UserName;

                            serviceFeeDbl = Utils.getFee(double.Parse(string.IsNullOrEmpty(amount) ? "0.00" : amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                            serviceFee = serviceFeeDbl.ToString("###0.00");

                            inquiryResponseModel inqresmdl = new inquiryResponseModel()
                            {
                                ResCode = resCode,
                                ResDesc = resDesc,
                                taxID = taxID,
                                merchantname = merchantname,
                                merchantlogo = merchantlogo,
                                billername = billerName,
                                billerlogo = billerLogo,
                                ref1 = ref1,
                                ref2 = userName,
                                ref3 = "",
                                ref4 = "",
                                ref5 = "",
                                ref1Name = ref1Name,
                                ref2Name = ref2Name,
                                ref3Name = "",
                                ref4Name = "",
                                ref5Name = "",
                                amount = amount,
                                serviceFee = serviceFee,
                                status = status,
                                expiry = expiry,
                                productDescription = productdesc,
                                imgUrl = imgURL,
                            };

                            return Utils.getInquiryRes(inqresmdl);
                        }
                        else
                        {
                            return Utils.getErrorRes(inqRes.ErrorCode, inqRes.ErrorMessage);
                        }
                    }
                    #endregion

                    #region Infinite
                    else if (MapTaxID == ConfigurationManager.AppSettings["InfiniteTaxId"].ToString())
                    {
                        writeLog("This is Infinite Inquiry..");
                        inquiryResponseModel inqresmdl = new inquiryResponseModel();

                        rescode = "00";
                        resdecs = "Success";

                        inqresmdl.ref1 = ref1;
                        inqresmdl.ref2 = ref2;

                        inqresmdl.ResCode = rescode;
                        inqresmdl.ResDesc = resdecs;
                        inqresmdl.taxID = taxID;
                        inqresmdl.merchantname = merchantname;
                        inqresmdl.merchantlogo = merchantlogo;
                        inqresmdl.billername = billerName;
                        inqresmdl.billerlogo = billerLogo;
                        inqresmdl.ref1 = ref1;
                        inqresmdl.ref2 = ref2;
                        inqresmdl.ref3 = string.Empty;
                        inqresmdl.ref4 = string.Empty;
                        inqresmdl.ref5 = ref5;
                        inqresmdl.ref1Name = ref1Name;
                        inqresmdl.ref2Name = ref2Name;
                        inqresmdl.ref3Name = string.Empty;
                        inqresmdl.ref4Name = string.Empty;
                        inqresmdl.ref5Name = ref5Name;
                        inqresmdl.amount = amount;
                        inqresmdl.serviceFee = serviceFee;
                        inqresmdl.status = status;
                        inqresmdl.expiry = expiry;
                        inqresmdl.productDescription = productdesc;
                        inqresmdl.imgUrl = imgURL;
                        return Utils.getInquiryRes(inqresmdl);
                    }

                    #endregion

                    #region <-- MSP Topup -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["MSPTopUpTaxId"].ToString())
                    {
                        writeLog("This is MSP TopUp Inquiry.");
                        string ebaUrl = ConfigurationManager.AppSettings["MSPTopUpInquiryUrl"].ToString();
                        EbaInquiryReq inqReq = new EbaInquiryReq()
                        {
                            Token = GetOAuthToken().Token,
                            PartnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString(),
                            BillerCode = ConfigurationManager.AppSettings["MSPTopUpBillerCode"].ToString(),
                            Detail = "{ 'AccountId' : '" + ref1 + "' }"
                        };

                        string json = JsonConvert.SerializeObject(inqReq);

                        string res = Utils.PostEba(json, ebaUrl);

                        writeLog("Eba inquriy response for MSPTopUp" + " : " + res);
                        EbaInquiryRes inqRes = new EbaInquiryRes();
                        inqRes = JsonConvert.DeserializeObject<EbaInquiryRes>(res);

                        if (!string.IsNullOrEmpty(res) & inqRes.ErrorCode == "00")
                        {
                            string resCode = inqRes.ErrorCode;
                            string resDesc = inqRes.ErrorMessage;
                            string detailStr = inqRes.Detail.Replace("\\", "");
                            MSPTopUpDetail detailJson = JsonConvert.DeserializeObject<MSPTopUpDetail>(detailStr);

                            string accountName = detailJson.AccountName;
                            string billerRefNo = detailJson.BillerReferenceNo;

                            serviceFeeDbl = Utils.getFee(double.Parse(string.IsNullOrEmpty(amount) ? "0.00" : amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                            serviceFee = serviceFeeDbl.ToString("###0.00");

                            inquiryResponseModel inqresmdl = new inquiryResponseModel()
                            {
                                ResCode = resCode,
                                ResDesc = resDesc,
                                taxID = taxID,
                                merchantname = merchantname,
                                merchantlogo = merchantlogo,
                                billername = billerName,
                                billerlogo = billerLogo,
                                ref1 = ref1,
                                ref2 = accountName,
                                ref3 = billerRefNo,
                                ref4 = ref4,
                                ref5 = ref5,
                                ref1Name = ref1Name,
                                ref2Name = ref2Name,
                                ref3Name = ref3Name,
                                ref4Name = ref4Name,
                                ref5Name = ref5Name,
                                amount = amount,
                                serviceFee = serviceFee,
                                status = status,
                                expiry = expiry,
                                productDescription = productdesc,
                                imgUrl = imgURL,
                            };

                            return Utils.getInquiryRes(inqresmdl);
                        }
                        else
                        {
                            return Utils.getErrorRes(inqRes.ErrorCode, inqRes.ErrorMessage);
                        }
                    }

                    #endregion

                    #region Anawrahta
                    else if (MapTaxID == ConfigurationManager.AppSettings["AnawrahtaTaxId"].ToString())
                    {
                        writeLog("This is Anawrahta Inquiry..");
                        inquiryResponseModel inqresmdl = new inquiryResponseModel();

                        rescode = "00";
                        resdecs = "Success";

                        inqresmdl.ref1 = ref1;
                        inqresmdl.ref2 = ref2;

                        inqresmdl.ResCode = rescode;
                        inqresmdl.ResDesc = resdecs;
                        inqresmdl.taxID = taxID;
                        inqresmdl.merchantname = merchantname;
                        inqresmdl.merchantlogo = merchantlogo;
                        inqresmdl.billername = billerName;
                        inqresmdl.billerlogo = billerLogo;
                        inqresmdl.ref1 = ref1;
                        inqresmdl.ref2 = ref2;
                        inqresmdl.ref3 = ref3;
                        inqresmdl.ref4 = string.Empty;
                        inqresmdl.ref5 = ref5;
                        inqresmdl.ref1Name = ref1Name;
                        inqresmdl.ref2Name = ref2Name;
                        inqresmdl.ref3Name = ref3Name;
                        inqresmdl.ref4Name = string.Empty;
                        inqresmdl.ref5Name = ref5Name;
                        inqresmdl.amount = amount;
                        inqresmdl.serviceFee = serviceFee;
                        inqresmdl.status = status;
                        inqresmdl.expiry = expiry;
                        inqresmdl.productDescription = productdesc;
                        inqresmdl.imgUrl = imgURL;
                        return Utils.getInquiryRes(inqresmdl);
                    }

                    #endregion

                    #region<-- Anada Eload -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["AnadaEloadTaxId"].ToString())
                    {
                        writeLog("This is Anada Eload Inquiry.");
                        string ebaUrl = ConfigurationManager.AppSettings["AnadaEloadInquiryUrl"].ToString();
                        AnadaEloadDetail detail = new AnadaEloadDetail()
                        {
                            SubscriberId = ref1

                        };
                        EbaInquiryReq inqReq = new EbaInquiryReq()
                        {
                            Token = GetOAuthToken().Token,
                            PartnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString(),
                            BillerCode = ConfigurationManager.AppSettings["AnadaEloadBillerCode"].ToString(),
                            Detail = "{ 'SubscriberId' : '" + detail.SubscriberId + "'}"
                        };



                        string json = JsonConvert.SerializeObject(inqReq);

                        writeLog("EBA  inquriy request for Anada Eload:" + json);

                        string res = Utils.PostEba(json, ebaUrl);

                        writeLog("Eba inquriy response for Anada Eload" + " : " + res);
                        EbaInquiryRes inqRes = new EbaInquiryRes();
                        inqRes = JsonConvert.DeserializeObject<EbaInquiryRes>(res);

                        if (!string.IsNullOrEmpty(res) & inqRes.ErrorCode == "00")
                        {
                            string resCode = inqRes.ErrorCode;
                            string resDesc = inqRes.ErrorMessage;


                            serviceFeeDbl = Utils.getFee(double.Parse(string.IsNullOrEmpty(amount) ? "0.00" : amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                            serviceFee = serviceFeeDbl.ToString("###0.00");

                            inquiryResponseModel inqresmdl = new inquiryResponseModel()
                            {
                                ResCode = resCode,
                                ResDesc = resDesc,
                                taxID = taxID,
                                merchantname = merchantname,
                                merchantlogo = merchantlogo,
                                billername = billerName,
                                billerlogo = billerLogo,
                                ref1 = ref1,
                                ref2 = "",
                                ref3 = "",
                                ref4 = "",
                                ref5 = "",
                                ref1Name = ref1Name,
                                ref2Name = "",
                                ref3Name = "",
                                ref4Name = "",
                                ref5Name = "",
                                amount = amount,
                                serviceFee = serviceFee,
                                status = status,
                                expiry = expiry,
                                productDescription = productdesc,
                                imgUrl = imgURL,
                            };

                            return Utils.getInquiryRes(inqresmdl);
                        }
                        else
                        {
                            return Utils.getErrorRes(inqRes.ErrorCode, inqRes.ErrorMessage);
                        }
                    }
                    #endregion

                    #region <-- MPT Money -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["MptMoneyTaxId"].ToString())
                    {
                        writeLog("This is MptMoney Inquiry.");
                        inquiryResponseModel inqresmdl = new inquiryResponseModel();
                        rescode = "00";
                        resdecs = "Success";
                        inqresmdl.ResCode = rescode;
                        inqresmdl.ResDesc = resdecs;
                        inqresmdl.taxID = taxID;
                        inqresmdl.merchantname = merchantname;
                        inqresmdl.merchantlogo = merchantlogo;
                        inqresmdl.billername = billerName;
                        inqresmdl.billerlogo = billerLogo;
                        inqresmdl.ref1 = ref1;
                        inqresmdl.ref2 = ref2;
                        inqresmdl.ref3 = ref3;
                        inqresmdl.ref4 = ref4;
                        inqresmdl.ref5 = ref5;
                        inqresmdl.ref1Name = ref1Name;
                        inqresmdl.ref2Name = ref2Name;
                        inqresmdl.ref3Name = ref3Name;
                        inqresmdl.ref4Name = ref4Name;
                        inqresmdl.ref5Name = ref5Name;
                        inqresmdl.amount = amount;
                        inqresmdl.serviceFee = serviceFee;
                        inqresmdl.status = status;
                        inqresmdl.expiry = expiry;
                        inqresmdl.productDescription = productdesc;
                        inqresmdl.imgUrl = imgURL;
                        return Utils.getInquiryRes(inqresmdl);
                    }
                    #endregion

                    #region <-- CitizenPay -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["CitizenPayTaxId"].ToString())
                    {
                        writeLog("This is CitizenPay CashIn Inquiry.");
                        string ebaUrl = ConfigurationManager.AppSettings["CitizenPayInquiryUrl"].ToString();
                        string mobileNumber = ref1;
                        // Update MobileNumber to CitizenPay's Format
                        if (mobileNumber.StartsWith("09"))
                        {
                            mobileNumber = "959" + mobileNumber.Remove(0, 2);
                        }

                        EbaInquiryReq inqReq = new EbaInquiryReq()
                        {
                            Token = GetOAuthToken().Token,
                            PartnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString(),
                            BillerCode = ConfigurationManager.AppSettings["CitizenPayBillerCode"].ToString(),
                            Detail = "{ 'MobileNumber' : '" + mobileNumber + "' }"
                        };

                        string json = JsonConvert.SerializeObject(inqReq);

                        string res = Utils.PostEba(json, ebaUrl);

                        writeLog("Eba inquriy response for CitizenPay" + " : " + res);
                        EbaInquiryRes inqRes = new EbaInquiryRes();
                        inqRes = JsonConvert.DeserializeObject<EbaInquiryRes>(res);

                        if (!string.IsNullOrEmpty(res) & inqRes.ErrorCode == "00")
                        {
                            string resCode = inqRes.ErrorCode;
                            string resDesc = inqRes.ErrorMessage;

                            serviceFeeDbl = Utils.getFee(double.Parse(string.IsNullOrEmpty(amount) ? "0.00" : amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                            serviceFee = serviceFeeDbl.ToString("###0.00");

                            inquiryResponseModel inqresmdl = new inquiryResponseModel()
                            {
                                ResCode = resCode,
                                ResDesc = resDesc,
                                taxID = taxID,
                                merchantname = merchantname,
                                merchantlogo = merchantlogo,
                                billername = billerName,
                                billerlogo = billerLogo,
                                ref1 = ref1,
                                ref2 = ref2,
                                ref3 = ref3,
                                ref4 = ref4,
                                ref5 = ref5,
                                ref1Name = ref1Name,
                                ref2Name = ref2Name,
                                ref3Name = ref3Name,
                                ref4Name = ref4Name,
                                ref5Name = ref5Name,
                                amount = amount,
                                serviceFee = serviceFee,
                                status = status,
                                expiry = expiry,
                                productDescription = productdesc,
                                imgUrl = imgURL,
                            };

                            return Utils.getInquiryRes(inqresmdl);
                        }
                        else
                        {
                            return Utils.getErrorRes(inqRes.ErrorCode, inqRes.ErrorMessage);
                        }
                    }

                    #endregion

                    #region <-- TrueNet -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["TrueNetTaxId"].ToString())
                    {
                        writeLog("This is TrueNet Inquiry.");
                        inquiryResponseModel inqresmdl = new inquiryResponseModel();
                        rescode = "00";
                        resdecs = "Success";
                        inqresmdl.ResCode = rescode;
                        inqresmdl.ResDesc = resdecs;
                        inqresmdl.taxID = taxID;
                        inqresmdl.merchantname = merchantname;
                        inqresmdl.merchantlogo = merchantlogo;
                        inqresmdl.billername = billerName;
                        inqresmdl.billerlogo = billerLogo;
                        inqresmdl.ref1 = ref1;
                        inqresmdl.ref2 = ref2;
                        inqresmdl.ref3 = ref3;
                        inqresmdl.ref4 = ref4;
                        inqresmdl.ref5 = ref5;
                        inqresmdl.ref1Name = ref1Name;
                        inqresmdl.ref2Name = ref2Name;
                        inqresmdl.ref3Name = ref3Name;
                        inqresmdl.ref4Name = ref4Name;
                        inqresmdl.ref5Name = ref5Name;
                        inqresmdl.amount = amount;
                        inqresmdl.serviceFee = serviceFee;
                        inqresmdl.status = status;
                        inqresmdl.expiry = expiry;
                        inqresmdl.productDescription = productdesc;
                        inqresmdl.imgUrl = imgURL;
                        return Utils.getInquiryRes(inqresmdl);
                    }
                    #endregion

                    #region <-- QuicKyat -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["QuicKyatTaxId"].ToString())
                    {
                        writeLog("This is QuicKyat Inquiry.");
                        string ebaUrl = ConfigurationManager.AppSettings["QuicKyatInquiryUrl"].ToString();

                        EbaInquiryReq inqReq = new EbaInquiryReq()
                        {
                            Token = GetOAuthToken().Token,
                            PartnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString(),
                            BillerCode = ConfigurationManager.AppSettings["QuicKyatBillerCode"].ToString(),
                            Detail = "{ 'AccountId' : '" + ref1 + "' }"
                        };

                        string json = JsonConvert.SerializeObject(inqReq);

                        string res = Utils.PostEba(json, ebaUrl);

                        writeLog("Eba inquriy response for QuicKyat" + " : " + res);
                        EbaInquiryRes inqRes = new EbaInquiryRes();
                        inqRes = JsonConvert.DeserializeObject<EbaInquiryRes>(res);

                        if (!string.IsNullOrEmpty(res) & inqRes.ErrorCode == "00")
                        {
                            string resCode = inqRes.ErrorCode;
                            string resDesc = inqRes.ErrorMessage;
                            string detailStr = inqRes.Detail.Replace("\\", "");
                            QuicKyatDetail detailJson = JsonConvert.DeserializeObject<QuicKyatDetail>(detailStr);
                            string customerName = detailJson.Name;
                            string nrc = detailJson.Nrc;
                            amount = inqRes.TransactionAmount;

                            serviceFeeDbl = Utils.getFee(double.Parse(string.IsNullOrEmpty(amount) ? "0.00" : amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                            serviceFee = serviceFeeDbl.ToString("###0.00");

                            inquiryResponseModel inqresmdl = new inquiryResponseModel()
                            {
                                ResCode = resCode,
                                ResDesc = resDesc,
                                taxID = taxID,
                                merchantname = merchantname,
                                merchantlogo = merchantlogo,
                                billername = billerName,
                                billerlogo = billerLogo,
                                ref1 = ref1,
                                ref2 = customerName,
                                ref3 = nrc,
                                ref4 = ref4,
                                ref5 = ref5,
                                ref1Name = ref1Name,
                                ref2Name = ref2Name,
                                ref3Name = ref3Name,
                                ref4Name = ref4Name,
                                ref5Name = ref5Name,
                                amount = amount,
                                serviceFee = serviceFee,
                                status = status,
                                expiry = expiry,
                                productDescription = productdesc,
                                imgUrl = imgURL,
                            };

                            return Utils.getInquiryRes(inqresmdl);
                        }
                        else
                        {
                            return Utils.getErrorRes(inqRes.ErrorCode, inqRes.ErrorMessage);
                        }
                    }

                    #endregion

                    #region WinFinance
                    else if (MapTaxID == ConfigurationManager.AppSettings["WinFinanceTaxId"].ToString())
                    {
                        writeLog("This is WinFinance Inquiry..");
                        inquiryResponseModel inqresmdl = new inquiryResponseModel();

                        rescode = "00";
                        resdecs = "Success";

                        inqresmdl.ref1 = ref1;
                        inqresmdl.ref2 = ref2;

                        inqresmdl.ResCode = rescode;
                        inqresmdl.ResDesc = resdecs;
                        inqresmdl.taxID = taxID;
                        inqresmdl.merchantname = merchantname;
                        inqresmdl.merchantlogo = merchantlogo;
                        inqresmdl.billername = billerName;
                        inqresmdl.billerlogo = billerLogo;
                        inqresmdl.ref1 = ref1;
                        inqresmdl.ref2 = ref2;
                        inqresmdl.ref3 = ref3;
                        inqresmdl.ref4 = string.Empty;
                        inqresmdl.ref5 = ref5;
                        inqresmdl.ref1Name = ref1Name;
                        inqresmdl.ref2Name = ref2Name;
                        inqresmdl.ref3Name = ref3Name;
                        inqresmdl.ref4Name = string.Empty;
                        inqresmdl.ref5Name = ref5Name;
                        inqresmdl.amount = amount;
                        inqresmdl.serviceFee = serviceFee;
                        inqresmdl.status = status;
                        inqresmdl.expiry = expiry;
                        inqresmdl.productDescription = productdesc;
                        inqresmdl.imgUrl = imgURL;
                        return Utils.getInquiryRes(inqresmdl);
                    }

                    #endregion

                    #region <-- XBOX ONE -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["XBoxOneTaxId"].ToString())
                    {
                        writeLog("This is XBox One Inquiry.");
                        inquiryResponseModel inqresmdl = new inquiryResponseModel();

                        rescode = "00";
                        resdecs = "Success";
                        inqresmdl.ResCode = rescode;
                        inqresmdl.ResDesc = resdecs;
                        inqresmdl.taxID = taxID;
                        inqresmdl.merchantname = merchantname;
                        inqresmdl.merchantlogo = merchantlogo;
                        inqresmdl.billername = billerName;
                        inqresmdl.billerlogo = billerLogo;
                        inqresmdl.ref1 = "XBOX ONE";
                        inqresmdl.ref2 = new String(ref2.Where(Char.IsDigit).ToArray());
                        inqresmdl.ref3 = ref3;
                        inqresmdl.ref4 = ref4;
                        inqresmdl.ref5 = ref5;
                        inqresmdl.ref1Name = ref1Name;
                        inqresmdl.ref2Name = ref2Name;
                        inqresmdl.ref3Name = ref3Name;
                        inqresmdl.ref4Name = ref4Name;
                        inqresmdl.ref5Name = string.Empty;
                        inqresmdl.amount = amount;
                        inqresmdl.serviceFee = serviceFee;
                        inqresmdl.status = status;
                        inqresmdl.expiry = expiry;
                        inqresmdl.productDescription = productdesc;
                        inqresmdl.imgUrl = imgURL;
                        return Utils.getInquiryRes(inqresmdl);
                    }
                    #endregion

                    #region <-- PlayStation Network  -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["PlayStationNetworkTaxId"].ToString())
                    {
                        writeLog("This is PlayStation Network Inquiry.");
                        inquiryResponseModel inqresmdl = new inquiryResponseModel();

                        rescode = "00";
                        resdecs = "Success";
                        inqresmdl.ResCode = rescode;
                        inqresmdl.ResDesc = resdecs;
                        inqresmdl.taxID = taxID;
                        inqresmdl.merchantname = merchantname;
                        inqresmdl.merchantlogo = merchantlogo;
                        inqresmdl.billername = billerName;
                        inqresmdl.billerlogo = billerLogo;
                        inqresmdl.ref1 = "PlayStation";
                        inqresmdl.ref2 = new String(ref2.Where(Char.IsDigit).ToArray());
                        inqresmdl.ref3 = ref3;
                        inqresmdl.ref4 = ref4;
                        inqresmdl.ref5 = ref5;
                        inqresmdl.ref1Name = ref1Name;
                        inqresmdl.ref2Name = ref2Name;
                        inqresmdl.ref3Name = ref3Name;
                        inqresmdl.ref4Name = ref4Name;
                        inqresmdl.ref5Name = string.Empty;
                        inqresmdl.amount = amount;
                        inqresmdl.serviceFee = serviceFee;
                        inqresmdl.status = status;
                        inqresmdl.expiry = expiry;
                        inqresmdl.productDescription = productdesc;
                        inqresmdl.imgUrl = imgURL;
                        return Utils.getInquiryRes(inqresmdl);
                    }
                    #endregion

                    #region<-- Yadanarpon Teleport -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["YadanarponTeleportTaxId"])
                    {
                        writeLog("This is Yadanarpon Teleport Inquiry.");

                        if (!string.IsNullOrEmpty(ref1) && ref1 != ConfigurationManager.AppSettings["YTPMonthlyBillType"])
                        {
                            inquiryResponseModel inqresmdl = new inquiryResponseModel();
                            rescode = "00";
                            resdecs = "Success";
                            inqresmdl.ResCode = rescode;
                            inqresmdl.ResDesc = resdecs;
                            inqresmdl.taxID = taxID;
                            inqresmdl.merchantname = merchantname;
                            inqresmdl.merchantlogo = merchantlogo;
                            inqresmdl.billername = billerName;
                            inqresmdl.billerlogo = billerLogo;
                            inqresmdl.ref1 = ref1;
                            inqresmdl.ref2 = ref2;
                            inqresmdl.ref3 = ref3;
                            inqresmdl.ref4 = ref4;
                            inqresmdl.ref5 = ref5;
                            inqresmdl.ref1Name = ref1Name;
                            inqresmdl.ref2Name = ref2Name;
                            inqresmdl.ref3Name = string.Empty;
                            inqresmdl.ref4Name = ref4Name;
                            inqresmdl.ref5Name = string.Empty;
                            inqresmdl.amount = amount;
                            inqresmdl.serviceFee = serviceFee;
                            inqresmdl.status = status;
                            inqresmdl.expiry = expiry;
                            inqresmdl.productDescription = productdesc;
                            inqresmdl.imgUrl = imgURL;
                            return Utils.getInquiryRes(inqresmdl);
                        }
                        else
                        {
                            string ebaUrl = ConfigurationManager.AppSettings["YadanarponTeleportInquiryUrl"];
                            string regionCode = ConfigurationManager.AppSettings["YTPRegionCode"];
                            YadanarponTeleportDetail detail = new YadanarponTeleportDetail()
                            {
                                BillType = ref1,
                                CustomerBillingId = ref2,
                                RegionCode = regionCode

                            };
                            EbaInquiryReq inqReq = new EbaInquiryReq()
                            {
                                Token = GetOAuthToken().Token,
                                PartnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString(),
                                BillerCode = ConfigurationManager.AppSettings["YadanarponTeleportBillerCode"].ToString(),
                                Detail = "{ 'BillType' : '" + detail.BillType + "', 'RegionCode' : '" + detail.RegionCode + "', 'CustomerBillingId' : '" + detail.CustomerBillingId + "' }"
                            };

                            string json = JsonConvert.SerializeObject(inqReq);

                            writeLog("EBA  inquriy request for Yadanarpon Teleport:" + json);

                            string res = Utils.PostEba(json, ebaUrl);

                            writeLog("Eba inquriy response for Yadanarpon Teleport" + " : " + res);

                            EbaInquiryRes inqRes = new EbaInquiryRes();
                            inqRes = JsonConvert.DeserializeObject<EbaInquiryRes>(res);

                            if (!string.IsNullOrEmpty(res) & inqRes.ErrorCode == "00")
                            {
                                string resCode = inqRes.ErrorCode;
                                string resDesc = inqRes.ErrorMessage;

                                string detailStr = inqRes.Detail.Replace("\\", "");
                                YadanarponTeleportDetail detailJson = JsonConvert.DeserializeObject<YadanarponTeleportDetail>(detailStr);
                                amount = inqRes.TransactionAmount;

                                serviceFeeDbl = Utils.getFee(double.Parse(string.IsNullOrEmpty(amount) ? "0.00" : amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                                serviceFee = serviceFeeDbl.ToString("###0.00");

                                inquiryResponseModel inqresmdl = new inquiryResponseModel()
                                {
                                    ResCode = resCode,
                                    ResDesc = resDesc,
                                    taxID = taxID,
                                    merchantname = merchantname,
                                    merchantlogo = merchantlogo,
                                    billername = billerName,
                                    billerlogo = billerLogo,
                                    ref1 = ref1,
                                    ref2 = ref2,
                                    ref3 = detailJson.InvoiceNumber,
                                    ref4 = detailJson.CustomerName,
                                    ref5 = string.Empty,
                                    ref1Name = ref1Name,
                                    ref2Name = ref2Name,
                                    ref3Name = ref3Name,
                                    ref4Name = ref4Name,
                                    ref5Name = string.Empty,
                                    amount = amount,
                                    serviceFee = serviceFee,
                                    status = status,
                                    expiry = expiry,
                                    productDescription = productdesc,
                                    imgUrl = imgURL,
                                };

                                return Utils.getInquiryRes(inqresmdl);
                            }
                            else
                            {
                                return Utils.getErrorRes(inqRes.ErrorCode, inqRes.ErrorMessage);
                            }
                        }

                    }
                    #endregion


                    #region <-- Marga Global Telecomm -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["MargaGlobalTaxID"].ToString())
                    {
                        writeLog("This is Marga Global Inquiry.");
                        var inqresmdl = new inquiryResponseModel();
                        rescode = "00";
                        resdecs = "Success";
                        inqresmdl.ResCode = rescode;
                        inqresmdl.ResDesc = resdecs;
                        inqresmdl.taxID = taxID;
                        inqresmdl.merchantname = merchantname;
                        inqresmdl.merchantlogo = merchantlogo;
                        inqresmdl.billername = billerName;
                        inqresmdl.billerlogo = billerLogo;
                        inqresmdl.ref1 = ref1;
                        inqresmdl.ref2 = ref2;
                        inqresmdl.ref3 = ref3;
                        inqresmdl.ref4 = ref4;
                        inqresmdl.ref5 = ref5;
                        inqresmdl.ref1Name = ref1Name;
                        inqresmdl.ref2Name = ref2Name;
                        inqresmdl.ref3Name = ref3Name;
                        inqresmdl.ref4Name = ref4Name;
                        inqresmdl.ref5Name = ref5Name;
                        inqresmdl.amount = amount;
                        inqresmdl.serviceFee = serviceFee;
                        inqresmdl.status = status;
                        inqresmdl.expiry = expiry;
                        inqresmdl.productDescription = productdesc;
                        inqresmdl.imgUrl = imgURL;
                        return Utils.getInquiryRes(inqresmdl);
                    }
                    #endregion


                    #region <-- Mobile Legend -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["MobileLegendTaxID"].ToString())
                    {
                        var inquiryResponseModel = new inquiryResponseModel()
                        {
                            ResCode = rescode,
                            ResDesc = resdecs,
                            taxID = taxID,
                            merchantname = merchantname,
                            merchantlogo = merchantlogo,
                            billername = billerName,
                            billerlogo = billerLogo,
                            ref1 = ref1,
                            ref2 = ref2,
                            ref3 = ref3,
                            ref4 = ref4,
                            ref5 = ref5,
                            ref1Name = ref1Name,
                            ref2Name = ref2Name,
                            ref3Name = ref3Name,
                            ref4Name = ref4Name,
                            ref5Name = ref5Name,
                            amount = amount,
                            serviceFee = serviceFee,
                            status = status,
                            expiry = expiry,
                            productDescription = productdesc,
                            imgUrl = imgURL
                        };

                        return (new MobileLegendManager()).GetInquiryResponse(inquiryResponseModel);

                    }

                    #endregion



                    #region <-- B2B Order -->

                    else if (!string.IsNullOrEmpty(ConfigurationManager.AppSettings["B2BList"].ToString().Split(',').Where(x => x == MapTaxID).FirstOrDefault()))
                    {
                        InquiryBillerRequest request = new InquiryBillerRequest()
                        {
                            TaxId = MapTaxID,
                            Ref1 = ref1,
                            MerchantName = merchantname,
                            MerchantLogo = merchantlogo,
                            BillerName = billerName,
                            BillerLogo = billerLogo,
                            Ref1Name = ref1Name,
                            Ref2Name = ref2Name,
                            Ref3Name = ref3Name,
                            Ref4Name = ref4Name,
                            Ref5Name = ref5Name,
                            Status = status,
                            Expiry = expiry,
                            ProductDesc = productdesc,
                            ImgUrl = imgURL
                        };

                        InquiryB2BManager inquiryBillerManager = new InquiryB2BManager();
                        string inquiryRes = inquiryBillerManager.Inquiry2Biller_B2BOrder(request);
                        return inquiryRes;
                    }
                    #endregion

                    #region <-- Gift Category Start From Razer Gold Pin MMK -->

                    else if (!string.IsNullOrEmpty(ConfigurationManager.AppSettings["GiftCagList"].ToString().Split(',').Where(x => x == MapTaxID).FirstOrDefault()))
                    {
                        writeLog("-----------------  Gift Category List  -----------------------");

                        InquiryGiftCardRequest request = new InquiryGiftCardRequest()
                        {
                            TaxId = MapTaxID,
                            ResCode = "00",
                            ResDesc = "Success",
                            MerchantName = merchantname,
                            MerchantLogo = merchantlogo,
                            BillerName = billerName,
                            BillerLogo = billerLogo,
                            ProductDesc = productdesc,
                            Ref1 = ref1,
                            Ref2 = ref2,
                            Ref3 = ref3,
                            Ref4 = ref4,
                            Ref5 = ref5,
                            Ref1Name = ref1Name,
                            Ref2Name = ref2Name,
                            Ref3Name = ref3Name,
                            Ref4Name = ref4Name,
                            Ref5Name = ref5Name,
                            Amount = amount,
                            ServiceFee = serviceFee,
                            Status = status,
                            Expiry = expiry,
                            ImageUrl = imgURL
                        };

                        InquiryGiftCagManager inquiryGiftCagManager = new InquiryGiftCagManager();
                        string inquiryRes = inquiryGiftCagManager.Inquiry2GiftCagBiller(request);
                        return inquiryRes;
                    }
                    #endregion

                    #region <-- Internet Category Start From Chindiwn Net (no need to call eba enquiry)-->

                    else if (!string.IsNullOrEmpty(ConfigurationManager.AppSettings["InternetCagList"].ToString().Split(',').Where(x => x == MapTaxID).FirstOrDefault()))
                    {
                        writeLog("-----------------  Internet Category List  -----------------------");

                        InquiryReq request = new InquiryReq()
                        {
                            TaxId = MapTaxID,
                            ResCode = "00",
                            ResDesc = "Success",
                            MerchantName = merchantname,
                            MerchantLogo = merchantlogo,
                            BillerName = billerName,
                            BillerLogo = billerLogo,
                            ProductDesc = productdesc,
                            Ref1 = ref1,
                            Ref2 = ref2,
                            Ref3 = ref3,
                            Ref4 = ref4,
                            Ref5 = ref5,
                            Ref1Name = ref1Name,
                            Ref2Name = ref2Name,
                            Ref3Name = ref3Name,
                            Ref4Name = ref4Name,
                            Ref5Name = ref5Name,
                            Amount = amount,
                            ServiceFee = serviceFee,
                            Status = status,
                            Expiry = expiry,
                            ImageUrl = imgURL
                        };

                        InquiryInternetCagManager inquiryGiftCagManager = new InquiryInternetCagManager();
                        string inquiryRes = inquiryGiftCagManager.Inquiry2InternetCagManager(request);
                        return inquiryRes;
                    }
                    #endregion

                    #region Mo Mo Finance
                    else if (MapTaxID == ConfigurationManager.AppSettings["MoMoFinanceTaxId"].ToString())
                    {
                        writeLog("This is MoMoFinanceTaxId Inquiry..");
                        inquiryResponseModel inqresmdl = new inquiryResponseModel();

                        rescode = "00";
                        resdecs = "Success";

                        inqresmdl.ref1 = ref1;
                        inqresmdl.ref2 = ref2;

                        inqresmdl.ResCode = rescode;
                        inqresmdl.ResDesc = resdecs;
                        inqresmdl.taxID = taxID;
                        inqresmdl.merchantname = merchantname;
                        inqresmdl.merchantlogo = merchantlogo;
                        inqresmdl.billername = billerName;
                        inqresmdl.billerlogo = billerLogo;
                        inqresmdl.ref1 = ref1;
                        inqresmdl.ref2 = ref2;
                        inqresmdl.ref3 = ref3;
                        inqresmdl.ref4 = string.Empty;
                        inqresmdl.ref5 = ref5;
                        inqresmdl.ref1Name = ref1Name;
                        inqresmdl.ref2Name = ref2Name;
                        inqresmdl.ref3Name = ref3Name;
                        inqresmdl.ref4Name = string.Empty;
                        inqresmdl.ref5Name = ref5Name;
                        inqresmdl.amount = amount;
                        inqresmdl.serviceFee = serviceFee;
                        inqresmdl.status = status;
                        inqresmdl.expiry = expiry;
                        inqresmdl.productDescription = productdesc;
                        inqresmdl.imgUrl = imgURL;
                        return Utils.getInquiryRes(inqresmdl);
                    }
                    #endregion
                    #region <-- SkyNet -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["SkynetTaxId"].ToString())
                    {
                        writeLog("MessageId : " + messageid + ", TaxId : " + MapTaxID + ", Skynet Inquiry ");
                        var inquiryResponseModel = new SkyNetInquiryResponse()
                        {
                            ResCode = rescode,
                            ResDesc = resdecs,
                            taxID = taxID,
                            merchantname = merchantname,
                            merchantlogo = merchantlogo,
                            billername = billerName,
                            billerlogo = billerLogo,
                            ref1 = ref1,
                            ref2 = ref2,
                            ref3 = ref3,
                            ref4 = ref4,
                            ref5 = ref5,
                            ref1Name = ref1Name,
                            ref2Name = ref2Name,
                            ref3Name = ref3Name,
                            ref4Name = ref4Name,
                            ref5Name = ref5Name,
                            amount = amount,
                            serviceFee = serviceFee,
                            status = status,
                            expiry = expiry,
                            productDescription = productdesc,
                            imgUrl = imgURL,
                            PaymentType = paymentType
                        };

                        return (new SkyNetManager()).GetInquiryResponse(inquiryResponseModel, messageid, MapTaxID);

                    }

                    #endregion <-- SkyNet -->

                    #region PayBills
                    else if (MapTaxID == ConfigurationManager.AppSettings["PayBillsTaxId"].ToString())
                    {
                        writeLog("MessageId : " + messageid + " TaxId : " + taxID + " PayBills Enquiry.");
                        writeLog("MessageId : " + messageid + " Agent Code : " + this.agentCode + " Load Agent Code : " + ref2);
                        if (this.agentCode == ref2)
                        {
                            rescode = "01";
                            resdecs = "Same partner code NOT allowed";

                            return Utils.getErrorRes(rescode, resdecs);
                        }
                        DataSet ds = null;
                        _agentWCF.getAgentNameByAgentCode(ref2, out ds, out errmsg); //Ref2 is agentCode
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            if (ds.Tables[0].Rows[0]["AGREEMENTTYPE"].ToString() != "Y") // AGREEMENT TYPE IS NO
                            {

                                inquiryResponseModel inqRes = new inquiryResponseModel();
                                inqRes.ResCode = "00";
                                inqRes.ResDesc = "Success";
                                inqRes.taxID = taxID;
                                inqRes.merchantname = merchantname;
                                inqRes.merchantlogo = merchantlogo;
                                inqRes.billername = billerName;
                                inqRes.billerlogo = billerLogo;
                                inqRes.ref1 = ref1;//Name
                                inqRes.ref2 = ref2;//AgentCde
                                inqRes.ref3 = ref3; // Mobile No.
                                inqRes.ref4 = ref4; // Note
                                inqRes.ref5 = ref5; // Business Name
                                inqRes.ref1Name = ref1Name;
                                inqRes.ref2Name = ref2Name;
                                inqRes.ref3Name = ref3Name;
                                inqRes.ref4Name = ref4Name;
                                inqRes.ref5Name = string.Empty;
                                inqRes.amount = amount;
                                inqRes.serviceFee = serviceFee;
                                inqRes.status = status;
                                inqRes.expiry = expiry;
                                inqRes.productDescription = productdesc;
                                inqRes.imgUrl = imgURL;

                                return Utils.getInquiryRes(inqRes);
                            }
                            else
                            {
                                rescode = "01";
                                resdecs = "Agent NOT Applicable";
                                return Utils.getErrorRes(rescode, resdecs);
                            }
                        }
                        else
                        {

                            rescode = "01";
                            resdecs = "Agent NOT Found";

                            return Utils.getErrorRes(rescode, resdecs);
                        }
                    }
                    #endregion

                    #region OK Dollar Cash In | Inquiry
                    else if (MapTaxID == ConfigurationManager.AppSettings["OkDollarCashInTaxId"].ToString())
                    {
                        writeLog("########## " + messageid + " | Ok Dollar Cash In Inquiry - Start ##########");
                        var inquiryResponseModel = new OkDollarCashIn.ResponseXML()
                        {
                            Version = "1.0",
                            TimeStamp = DateTime.Now.ToString("yyyyMMddhhmmssffff"),
                            ResCode = "00",
                            ResDesc = "Success",
                            TaxID = taxID,
                            MerchantName = merchantname,
                            MerchantLogo = merchantlogo,
                            BillerName = billerName,
                            BillerLogo = billerLogo,
                            Ref1 = ref1,
                            Ref2 = ref2,
                            Ref3 = ref3,
                            Ref4 = ref4,
                            Ref5 = ref5,
                            Ref6 = ref5,
                            Ref1Name = ref1Name,
                            Ref2Name = ref2Name,
                            Ref3Name = ref3Name,
                            Ref4Name = ref4Name,
                            Ref5Name = ref5Name,
                            Amount = amount,
                            AgentFee = serviceFee,
                            Status = status,
                            Expiry = expiry,
                            ProductDesc = productdesc,
                            ImageURL = imgURL
                        };
                        return (new OkDollarCashInManager()).Inquiry(inquiryResponseModel, messageid, servicePercent, serviceFlatFee);
                    }
                    #endregion

                    #region SMGF
                    else if (MapTaxID == ConfigurationManager.AppSettings["SMGFTaxId"].ToString())
                    {
                        messageid = messageid + " | ";
                        writeLog(messageid + "Start SMGF Inquiry.");
                        var inquiryResponseModel = new SMGFInquiryResponseXML()
                        {
                            Version = "1.0",
                            TimeStamp = DateTime.Now.ToString("yyyyMMddhhmmssffff"),
                            ResCode = "00",
                            ResDesc = "Success",
                            TaxID = taxID,
                            MerchantName = merchantname,
                            MerchantLogo = merchantlogo,
                            BillerName = billerName,
                            BillerLogo = billerLogo,
                            Ref1 = ref1,
                            Ref2 = ref2,
                            Ref3 = ref3,
                            Ref4 = ref4,
                            Ref5 = ref5,
                            Ref6 = ref5,
                            Ref1Name = ref1Name,
                            Ref2Name = ref2Name,
                            Ref3Name = ref3Name,
                            Ref4Name = ref4Name,
                            Ref5Name = ref5Name,
                            Amount = amount,
                            AgentFee = serviceFee,
                            Status = status,
                            Expiry = expiry,
                            ProductDesc = productdesc,
                            ImageURL = imgURL
                        };

                        return (new SMGFBillerManager()).Inquiry(inquiryResponseModel, messageid, servicePercent, serviceFlatFee);
                    }
                    #endregion

                    return sb.ToString();
                }
                else
                {
                    return Utils.getErrorRes(code, desc);
                }
            }
        }
        catch (Exception ex)
        {
            writeLog("Error :" + ex.ToString());
            return Utils.getErrorRes("97", "BIS API Error", MapTaxID);
        }
    }
    #endregion

    public string getCanalPlusPackages(string reqXml)
    {
        try
        {
            writeLog("getCanalPlusPackages ReqXml : " + reqXml);

            string code = string.Empty, desp = string.Empty;
            string version = string.Empty;
            string ts = string.Empty;
            string messageid = string.Empty;
            string ref1 = "";
            string ref1Name = "";
            string LoginType = string.Empty;

            Hashtable ht = Utils.getHTableFromXML(reqXml);

            if (IsTokenNullOrExpire(Token))
            {
                Token = GetOAuthToken();
            }

            if (IsValidateGetCanalPlusPackagesReq(ht, out code, out desp, out version, out ts, out messageid, out ref1, out ref1Name, out LoginType))
            {

                writeLog("After validation CanalPlusPackage Req");
                return (new CanalPlusManager().getPackagesRes(ref1, LoginType));
            }
            else
            {
                return Utils.getErrorRes(code, desp);
            }
        }
        catch (Exception ex)
        {
            writeLog("getCanalPlusPackages Error : " + ex.ToString());
        }
        return string.Empty;
    }

    public bool IsValidateGetCanalPlusPackagesReq(Hashtable ht, out string code, out string desc, out string version, out string ts, out string messageid, out string ref1, out string ref1Name, out string loginType)
    {
        code = "00";
        desc = "Success";

        version = "";
        ts = "";
        messageid = "";
        ref1 = "";
        ref1Name = "";
        loginType = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageid = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }
        if (ht.ContainsKey("Ref1"))
        {
            ref1 = ht["Ref1"].ToString();
        }
        else
        {
            code = "06";
            desc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Ref1> Tag");
            return false;
        }
        if (ht.ContainsKey("LoginType"))
        {
            loginType = ht["LoginType"].ToString();
        }
        else
        {
            code = "06";
            desc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <LoginType> Tag");
            return false;
        }

        return true;
    }

    public static string GetDescriptionByResponseCode(string code)
    {
        string desc = string.Empty;
        switch (code)
        {
            case "00":
                desc = "Success";
                break;
            case "01":
                desc = "Paid Already";
                break;
            case "02":
                desc = "Expired (Due)";
                break;
            case "03":
                desc = "Amount Mismatch";
                break;
            case "04":
                desc = "Authentication Fail";
                break;
            case "05":
                desc = "Invalid Request";
                break;
            case "06":
                desc = "Invalid Customer ID";
                break;
            case "07":
                desc = "Invalid Slip No";
                break;
            case "08":
                desc = "DB Error";
                break;
            case "98":
                desc = "General Error";
                break;
            case "99":
                desc = "System Error";
                break;
        }


        return desc;
    }

    public static string TopupEncrypt(string plainText, string Key, string IV)
    {
        // Check arguments. 

        var encoding = new UTF8Encoding();
        var key = encoding.GetBytes(Key);
        var iv = encoding.GetBytes(IV);

        byte[] encrypted;
        // Create an Rijndael object 
        // with the specified key and IV. 
        using (Rijndael rj = Rijndael.Create())
        {
            rj.Padding = PaddingMode.PKCS7;
            rj.Mode = CipherMode.CBC;
            rj.KeySize = 256;
            rj.BlockSize = 256;
            rj.Key = key;
            rj.IV = iv;

            // Create a decrytor to perform the stream transform.
            ICryptoTransform encryptor = rj.CreateEncryptor(rj.Key, rj.IV);

            // Create the streams used for encryption. 
            using (MemoryStream msEncrypt = new MemoryStream())
            {
                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                {
                    using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                    {

                        //Write all data to the stream.
                        swEncrypt.Write(plainText);
                    }
                    encrypted = msEncrypt.ToArray();
                }
            }
        }


        // Return the encrypted bytes from the memory stream. 
        //return System.Text.Encoding.UTF8.GetString(encrypted); 
        return Convert.ToBase64String(encrypted);
    }

    public static string TopupDecrypt(string plainText, string Key, string IV)
    {

        var encoding = new UTF8Encoding();
        var key = encoding.GetBytes(Key);
        var iv = encoding.GetBytes(IV);
        string strPlainText = "";
        byte[] encrypted;
        byte[] cipherText = Convert.FromBase64String(plainText);
        // Create an Rijndael object 
        // with the specified key and IV. 
        using (Rijndael rj = Rijndael.Create())
        {
            rj.Padding = PaddingMode.PKCS7;
            rj.Mode = CipherMode.CBC;
            rj.KeySize = 256;
            rj.BlockSize = 256;
            rj.Key = key;
            rj.IV = iv;

            // Create a decrytor to perform the stream transform.
            ICryptoTransform decryptor = rj.CreateDecryptor(rj.Key, rj.IV);

            // Create the streams used for encryption.
            MemoryStream msDecrypt;
            CryptoStream csDecrypt;
            StreamReader srDecrypt;
            msDecrypt = new MemoryStream(cipherText);
            csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read);
            srDecrypt = new StreamReader(csDecrypt);

            strPlainText = srDecrypt.ReadToEnd();

        }


        // Return the encrypted bytes from the memory stream. 
        return strPlainText;
    }

    public bool IsValidateInquiryReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out string ref1,
        out string ref2, out string ref3, out string ref4, out string ref5, out string inquirytype, out string amount, out string taxID, out string ref1Name, out string ref2Name,
        out string ref3Name, out string requestedby, out string messageid, out string qr, out string NewTaxID, out string canalPlusReqType, out string sessionID, out string paymentType)
    {
        code = "00";
        desp = "Success";

        paymentType = string.Empty;
        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;

        ref1 = string.Empty;
        ref2 = string.Empty;
        ref3 = string.Empty;
        ref4 = string.Empty;
        ref5 = string.Empty;
        ref1Name = string.Empty;
        ref2Name = string.Empty;
        ref3Name = string.Empty;
        amount = string.Empty;
        inquirytype = string.Empty;
        taxID = string.Empty;
        qr = string.Empty;
        messageid = string.Empty;
        requestedby = string.Empty;
        NewTaxID = string.Empty;
        string MapTaxID = string.Empty;
        canalPlusReqType = string.Empty;
        sessionID = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageid = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("RequestedBy"))
        {
            requestedby = ht["RequestedBy"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <RequestedBy> Tag");
            return false;
        }

        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <Email> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Password> Tag");
            return false;
        }
        if (ht.ContainsKey("TaxID"))
        {
            taxID = ht["TaxID"].ToString();

            if (getMapTaxID(taxID, out MapTaxID))
            {
                NewTaxID = MapTaxID;
                writeLog("OldTaxID:" + taxID + "NewMappedTaxID:" + NewTaxID);
            }
            else
            {

                code = "06";
                desp = "Invalid Request";
                writeLog("MapTaxID is Missing OldTaxID:" + taxID + "NewMappedTaxID:" + NewTaxID);
                return false;
            }
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing amount <TaxID> Tag");
            return false;
        }
        if (MapTaxID == "0000000000052")
        {
            if (ht.Contains("PaymentType"))
            {
                canalPlusReqType = ht["PaymentType"].ToString();
            }

            if (!string.IsNullOrEmpty(canalPlusReqType) && ht.Contains("Ref3"))
            {
                string[] arr = ht["Ref3"].ToString().Split(',');
                if (arr.Count() < 2)
                {
                    code = "06";
                    desp = "Invalid Request";
                    writeLog("Error in Validation : Missing <Package,Duration> Tag");
                    return false;
                }
            }

            if (ht.Contains("SessionID"))
            {
                sessionID = ht["SessionID"].ToString();
            }

        }
        if (ht.ContainsKey("IsQR"))
        {
            qr = ht["IsQR"].ToString();
        }
        if (ht.ContainsKey("Ref1"))
        {
            ref1 = ht["Ref1"].ToString();


            if (String.IsNullOrEmpty(ref1))
            {
                switch (MapTaxID)
                {
                    case "0000000000001":
                        ref1 = "211";
                        //iTunes
                        break;
                    case "0000000000002":
                        ref1 = "221";
                        //GooglePlay
                        break;
                    case "0000000000003":
                        ref1 = "231";
                        //Skype
                        break;
                    case "0000000000015":
                        ref1 = "261";
                        //Facebook
                        break;
                    case "0000000000016":
                        ref1 = "251";
                        //Steam Wallet
                        break;
                    case "0000000000051":
                        ref1 = "ViberOut";
                        //Viber Out
                        break;
                    case "0000000000057":
                        ref1 = "271";
                        break;
                    case "0000000000089":
                        ref1 = "WunZinn";
                        break;

                    case "0000000000092":
                        ref1 = ConfigurationManager.AppSettings["PubgReference"].ToString();
                        break;

                    case "0000000000098":
                        ref1 = "MinTheinKha";
                        break;
                }
            }
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Ref1 <Ref1> Tag");
            return false;
        }

        if (ht.ContainsKey("Ref2"))
        {
            ref2 = ht["Ref2"].ToString();
        }

        if (ht.ContainsKey("Ref3"))
        {
            ref3 = ht["Ref3"].ToString();
        }

        if (ht.ContainsKey("Ref4"))
        {
            ref4 = ht["Ref4"].ToString();
        }

        if (ht.ContainsKey("Ref5"))
        {
            ref5 = ht["Ref5"].ToString();
        }

        //Skynet
        if (ht.ContainsKey("PaymentType"))
        {
            paymentType = ht["PaymentType"].ToString();
        }

        if (ht.ContainsKey("Amount"))
        {
            amount = ht["Amount"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing amount <Amount> Tag");
            return false;
        }

        if (MapTaxID == "1230000000000")////123
        {

            if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email) || String.IsNullOrEmpty(password))
            {
                code = "07";
                desp = "Invalid Message";
                writeLog("Error in Validation : Data is Null or Empty");
                return false;
            }
        }
        else if (MapTaxID == "0000000000022" || MapTaxID == "0000000000021" || MapTaxID == "0000000000020")////Meter Bill
        {
            if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email) || String.IsNullOrEmpty(password) || String.IsNullOrEmpty(ref1) || String.IsNullOrEmpty(requestedby) || String.IsNullOrEmpty(messageid))
            {
                code = "07";
                desp = "Invalid Message";
                writeLog("Error in Validation : Data is Null or Empty");
                return false;
            }
        }
        if (MapTaxID == "0000000000001" || MapTaxID == "0000000000002" || MapTaxID == "0000000000003" || MapTaxID == "0000000000015" || MapTaxID == "0000000000016" ||
            MapTaxID == ConfigurationManager.AppSettings["WunZinnMapTaxId"].ToString())////iTune,GooglePlay,Skype
        {

            if (string.IsNullOrEmpty(version) || string.IsNullOrEmpty(ts) || string.IsNullOrEmpty(email) || string.IsNullOrEmpty(password))
            {
                code = "07";
                desp = "Invalid Message";
                writeLog("Error in Validation : Data is Null or Empty");
                return false;
            }
        }

        //Check Authecation
        string errmsg = string.Empty;
        DataSet ds = null;
        bool flg = false;
        string passwordDB = "";
        string userStatusDB = "";
        string appver = string.Empty;

        flg = _agentWCF.getAuthentication(email, password, out ds, out errmsg);
        if (flg)
        {
            try
            {
                var userTable = ds.Tables[0];
                if (userTable.Rows.Count > 0)
                {
                    var user = userTable.Rows[0];
                    int.TryParse(user["AGENTID"].ToString(), out agentID);
                    this.agentCode = Convert.ToString(user["AGENTCODE"]);
                    this.servicePercent = Convert.ToString(user["AGENTFEEPERCENT"]);
                    this.agentName = user["AGENTNAME"].ToString();
                    this.branchCode = user["BRANCHCODE"].ToString();
                    this.branchName = user["BRANCHNAME"].ToString();
                    passwordDB = Convert.ToString(user["AGENTUSERPASSWORD"]);
                    userStatusDB = Convert.ToString(user["USERSTATUS"]);
                    appver = Convert.ToString(user["APPVERSION"]);

                    writeLog("APPVERSION:" + appver + " AGETN ID : " + agentID.ToString() + " | AGENT CODE : " + agentCode + " | AGENT NAME : " + agentName + " | BRANCH CODE : " + branchCode);


                    if (passwordDB != password)
                    {
                        code = "05";
                        desp = "Incorrect Password";
                        writeLog(desp + errmsg);
                        return false;
                    }
                    else if (userStatusDB != "Y")
                    {
                        code = "05";
                        desp = "Login ID Locked";
                        writeLog(desp + errmsg);
                        return false;
                    }

                }
                else
                {
                    code = "05";
                    desp = "Incorrect LoginID";
                    writeLog(desp + errmsg);
                    return false;
                }
            }
            catch (Exception ex)
            {
                writeLog("Error In Authtentication Inquiry Request" + ex.Message);
            }
        }
        else
        {
            code = "--";
            desp = "DB Error";
            writeLog("Error in Authentication : " + errmsg);
            return false;
        }

        #region <-- Check APP version -->

        string newbillers = ConfigurationManager.AppSettings["NewBiller"].ToString();//new adding biller
        writeLog("get new biller OK");
        string newappver = ConfigurationManager.AppSettings["newappver"].ToString();//newbiller Taxid and appversion 
        writeLog("get new appver OK");
        Hashtable newappverht = Utils.getMerchantCodeHashtable(newappver);//get app version of Biller's TaxID
        writeLog("add new appverto hashtableOK");
        Hashtable httnewbillers = Utils.getMerchantCodeHashtable(newbillers);
        writeLog("Add newbillers to hashtable OK");
        string tempnewappver = string.Empty;
        appver = string.IsNullOrEmpty(appver) ? "1.0.3" : appver;
        string currentappver = appver.Replace(".", "");//Split . from app version 
        writeLog("currentappver" + currentappver);



        if (newappverht.ContainsKey(taxID))
        {
            tempnewappver = newappverht[taxID].ToString();
            writeLog("tempappver" + tempnewappver);
            if (int.Parse(tempnewappver) > int.Parse(currentappver))//Compare if new app version is larger current app version or not
            {
                code = "05";
                desp = "Please update your application to use " + httnewbillers[taxID].ToString();
                writeLog("Version Out of Date currentversion : " + currentappver + " New Version :" + tempnewappver);
                return false;
            }
            writeLog("Check Appver OK");

        }

        #endregion


        return true;
    }

    public bool IsValidateInquiryReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out string ref1,
        out string ref2, out string ref3, out string ref4, out string ref5, out string inquirytype, out string amount, out string taxID, out string ref1Name, out string ref2Name,
        out string ref3Name, out string requestedby, out string messageid, out string qr, out string NewTaxID, out string canalPlusReqType, out string sessionID)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;

        ref1 = string.Empty;
        ref2 = string.Empty;
        ref3 = string.Empty;
        ref4 = string.Empty;
        ref5 = string.Empty;
        ref1Name = string.Empty;
        ref2Name = string.Empty;
        ref3Name = string.Empty;
        amount = string.Empty;
        inquirytype = string.Empty;
        taxID = string.Empty;
        qr = string.Empty;
        messageid = string.Empty;
        requestedby = string.Empty;
        NewTaxID = string.Empty;
        string MapTaxID = string.Empty;
        canalPlusReqType = string.Empty;
        sessionID = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageid = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("RequestedBy"))
        {
            requestedby = ht["RequestedBy"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <RequestedBy> Tag");
            return false;
        }

        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <Email> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Password> Tag");
            return false;
        }
        if (ht.ContainsKey("TaxID"))
        {
            taxID = ht["TaxID"].ToString();

            if (getMapTaxID(taxID, out MapTaxID))
            {
                NewTaxID = MapTaxID;
                writeLog("OldTaxID:" + taxID + "NewMappedTaxID:" + NewTaxID);
            }
            else
            {

                code = "06";
                desp = "Invalid Request";
                writeLog("MapTaxID is Missing OldTaxID:" + taxID + "NewMappedTaxID:" + NewTaxID);
                return false;
            }
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing amount <TaxID> Tag");
            return false;
        }
        if (MapTaxID == "0000000000052")
        {
            if (ht.Contains("PaymentType"))
            {
                canalPlusReqType = ht["PaymentType"].ToString();
            }

            if (!string.IsNullOrEmpty(canalPlusReqType))
            {
                if (ht.Contains("Ref3"))
                {
                    string[] arr = ht["Ref3"].ToString().Split(',');
                    if (arr.Count() < 2)
                    {
                        code = "06";
                        desp = "Invalid Request";
                        writeLog("Error in Validation : Missing <Package,Duration> Tag");
                        return false;
                    }
                }
            }

            if (ht.Contains("SessionID"))
            {
                sessionID = ht["SessionID"].ToString();
            }

        }
        if (ht.ContainsKey("IsQR"))
        {
            qr = ht["IsQR"].ToString();
        }
        if (ht.ContainsKey("Ref1"))
        {
            ref1 = ht["Ref1"].ToString();
            if (String.IsNullOrEmpty(ref1))
            {
                switch (MapTaxID)
                {
                    case "0000000000001":
                        ref1 = "211";
                        // operatorName = "(iTunes)";
                        break;
                    case "0000000000002":
                        ref1 = "221";
                        // operatorName = "(GooglePlay)";
                        break;
                    case "0000000000003":
                        ref1 = "231";
                        // operatorName = "(Skype)";
                        break;
                    case "0000000000015":
                        ref1 = "261";
                        // operatorName = "(Facebook)";
                        break;
                    case "0000000000016":
                        ref1 = "251";
                        // operatorName = "(Steam Wallet)";
                        break;
                    case "0000000000051":
                        ref1 = "ViberOut";
                        // operaterName="(Viber Out)";
                        break;
                    case "0000000000057":
                        ref1 = "271";
                        break;
                    case "0000000000089":
                        ref1 = "WunZinn";
                        break;

                    case "0000000000092":
                        ref1 = ConfigurationManager.AppSettings["PubgReference"].ToString();
                        break;

                    case "0000000000098":
                        ref1 = "MinTheinKha";
                        break;
                }
            }
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Ref1 <Ref1> Tag");
            return false;
        }
        if (ht.ContainsKey("Ref2"))
        {
            ref2 = ht["Ref2"].ToString();
        }
        if (ht.ContainsKey("Ref3"))
        {
            ref3 = ht["Ref3"].ToString();
        }

        if (ht.ContainsKey("Ref4"))
        {
            ref4 = ht["Ref4"].ToString();
        }

        if (ht.ContainsKey("Ref5"))
        {
            ref5 = ht["Ref5"].ToString();
        }

        if (ht.ContainsKey("Amount"))
        {
            amount = ht["Amount"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing amount <Amount> Tag");
            return false;
        }

        if (MapTaxID == "1230000000000")////123
        {

            if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email) || String.IsNullOrEmpty(password))
            {
                code = "07";
                desp = "Invalid Message";
                writeLog("Error in Validation : Data is Null or Empty");
                return false;
            }
        }
        else if (MapTaxID == "0000000000022" || MapTaxID == "0000000000021" || MapTaxID == "0000000000020")////Meter Bill
        {
            if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email) || String.IsNullOrEmpty(password) || String.IsNullOrEmpty(ref1) || String.IsNullOrEmpty(requestedby) || String.IsNullOrEmpty(messageid))
            {
                code = "07";
                desp = "Invalid Message";
                writeLog("Error in Validation : Data is Null or Empty");
                return false;
            }
        }
        if (MapTaxID == "0000000000001" || MapTaxID == "0000000000002" || MapTaxID == "0000000000003" || MapTaxID == "0000000000015" || MapTaxID == "0000000000016" ||
            MapTaxID == ConfigurationManager.AppSettings["WunZinnMapTaxId"].ToString())////iTune,GooglePlay,Skype
        {

            if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email) || String.IsNullOrEmpty(password))
            {
                code = "07";
                desp = "Invalid Message";
                writeLog("Error in Validation : Data is Null or Empty");
                return false;
            }
        }

        //Check Authecation
        string errmsg = string.Empty;
        DataSet ds = null;
        bool flg = false;
        string passwordDB = "";
        string userStatusDB = "";
        string appver = string.Empty;

        flg = _agentWCF.getAuthentication(email, password, out ds, out errmsg);
        if (flg)
        {
            try
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    int.TryParse(ds.Tables[0].Rows[0]["AGENTID"].ToString(), out agentID);
                    this.agentCode = Convert.ToString(ds.Tables[0].Rows[0]["AGENTCODE"]);
                    this.servicePercent = Convert.ToString(ds.Tables[0].Rows[0]["AGENTFEEPERCENT"]);
                    this.agentName = ds.Tables[0].Rows[0]["AGENTNAME"].ToString();
                    this.branchCode = ds.Tables[0].Rows[0]["BRANCHCODE"].ToString();
                    this.branchName = ds.Tables[0].Rows[0]["BRANCHNAME"].ToString();
                    passwordDB = Convert.ToString(ds.Tables[0].Rows[0]["AGENTUSERPASSWORD"]);
                    userStatusDB = Convert.ToString(ds.Tables[0].Rows[0]["USERSTATUS"]);
                    appver = Convert.ToString(ds.Tables[0].Rows[0]["APPVERSION"]);

                    writeLog("APPVERSION:" + appver + " AGETN ID : " + agentID.ToString() + " | AGENT CODE : " + agentCode + " | AGENT NAME : " + agentName + " | BRANCH CODE : " + branchCode);


                    if (passwordDB != password)
                    {
                        code = "05";
                        desp = "Incorrect Password";
                        writeLog(desp + errmsg);
                        return false;
                    }
                    else if (userStatusDB != "Y")
                    {
                        code = "05";
                        desp = "Login ID Locked";
                        writeLog(desp + errmsg);
                        return false;
                    }

                }
                else
                {
                    code = "05";
                    desp = "Incorrect LoginID";
                    writeLog(desp + errmsg);
                    return false;
                }
            }
            catch (Exception ex)
            {
                writeLog("Error In Authtentication Inquiry Request" + ex.Message);
            }

        }
        else
        {
            code = "--";
            desp = "DB Error";
            writeLog("Error in Authentication : " + errmsg);
            return false;

        }

        #region <-- Check APP version -->

        string newbillers = ConfigurationManager.AppSettings["NewBiller"].ToString();//new adding biller
        writeLog("get new biller OK");
        string newappver = ConfigurationManager.AppSettings["newappver"].ToString();//newbiller Taxid and appversion 
        writeLog("get new appver OK");
        Hashtable newappverht = Utils.getMerchantCodeHashtable(newappver);//get app version of Biller's TaxID
        writeLog("add new appverto hashtableOK");
        Hashtable httnewbillers = Utils.getMerchantCodeHashtable(newbillers);
        writeLog("Add newbillers to hashtable OK");
        string tempnewappver = string.Empty;
        appver = string.IsNullOrEmpty(appver) ? "1.0.3" : appver;
        string currentappver = appver.Replace(".", "");//Split . from app version 
        writeLog("currentappver" + currentappver);



        if (newappverht.ContainsKey(taxID))
        {
            tempnewappver = newappverht[taxID].ToString();
            writeLog("tempappver" + tempnewappver);
            if (int.Parse(tempnewappver) > int.Parse(currentappver))//Compare if new app version is larger current app version or not
            {
                code = "05";
                desp = "Please update your application to use " + httnewbillers[taxID].ToString();
                writeLog("Version Out of Date currentversion : " + currentappver + " New Version :" + tempnewappver);
                return false;
            }
            writeLog("Check Appver OK");

        }

        #endregion


        return true;
    }

    public bool IsValidateFtthOrWtthInquiryReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string messageid, out string email, out string password, out string requestedby, out string taxID, out string mobileNumber, out string NewTaxID)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;
        taxID = string.Empty;
        messageid = string.Empty;
        requestedby = string.Empty;
        NewTaxID = string.Empty;
        var MapTaxID = string.Empty;
        mobileNumber = string.Empty;

        if (ht.ContainsKey("MobileNumber"))
        {
            mobileNumber = ht["MobileNumber"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MobileNumber> Tag");
            return false;
        }

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageid = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("RequestedBy"))
        {
            requestedby = ht["RequestedBy"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <RequestedBy> Tag");
            return false;
        }

        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <Email> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Password> Tag");
            return false;
        }

        if (ht.ContainsKey("TaxID"))
        {
            taxID = ht["TaxID"].ToString();

            if (getMapTaxID(taxID, out MapTaxID))
            {
                NewTaxID = MapTaxID;
                writeLog("OldTaxID:" + taxID + "NewMappedTaxID:" + NewTaxID);
            }
            else
            {

                code = "06";
                desp = "Invalid Request";
                writeLog("MapTaxID is Missing OldTaxID:" + taxID + "NewMappedTaxID:" + NewTaxID);
                return false;
            }
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing amount <TaxID> Tag");
            return false;
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        bool flg = false;
        string passwordDB = "";
        string userStatusDB = "";
        string appver = string.Empty;

        flg = _agentWCF.getAuthentication(email, password, out ds, out errmsg);
        if (flg)
        {
            try
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    int.TryParse(ds.Tables[0].Rows[0]["AGENTID"].ToString(), out agentID);
                    this.agentCode = Convert.ToString(ds.Tables[0].Rows[0]["AGENTCODE"]);
                    this.servicePercent = Convert.ToString(ds.Tables[0].Rows[0]["AGENTFEEPERCENT"]);
                    this.agentName = ds.Tables[0].Rows[0]["AGENTNAME"].ToString();
                    this.branchCode = ds.Tables[0].Rows[0]["BRANCHCODE"].ToString();
                    this.branchName = ds.Tables[0].Rows[0]["BRANCHNAME"].ToString();
                    passwordDB = Convert.ToString(ds.Tables[0].Rows[0]["AGENTUSERPASSWORD"]);
                    userStatusDB = Convert.ToString(ds.Tables[0].Rows[0]["USERSTATUS"]);
                    appver = Convert.ToString(ds.Tables[0].Rows[0]["APPVERSION"]);

                    writeLog("APPVERSION:" + appver + " AGETN ID : " + agentID.ToString() + " | AGENT CODE : " + agentCode + " | AGENT NAME : " + agentName + " | BRANCH CODE : " + branchCode);


                    if (passwordDB != password)
                    {
                        code = "05";
                        desp = "Incorrect Password";
                        writeLog(desp + errmsg);
                        return false;
                    }
                    else if (userStatusDB != "Y")
                    {
                        code = "05";
                        desp = "Login ID Locked";
                        writeLog(desp + errmsg);
                        return false;
                    }

                }
                else
                {
                    code = "05";
                    desp = "Incorrect LoginID";
                    writeLog(desp + errmsg);
                    return false;
                }

            }
            catch (Exception ex)
            {
                writeLog("Error In Authtentication Inquiry Request" + ex.Message);
            }

        }
        else
        {
            code = "--";
            desp = "DB Error";
            writeLog("Error in Authentication : " + errmsg);
            return false;

        }

        #region <-- Check APP version -->

        string newbillers = ConfigurationManager.AppSettings["NewBiller"].ToString();//new adding biller
        writeLog("get new biller OK");
        string newappver = ConfigurationManager.AppSettings["newappver"].ToString();//newbiller Taxid and appversion 
        writeLog("get new appver OK");
        Hashtable newappverht = Utils.getMerchantCodeHashtable(newappver);//get app version of Biller's TaxID
        writeLog("add new appverto hashtableOK");
        Hashtable httnewbillers = Utils.getMerchantCodeHashtable(newbillers);
        writeLog("Add newbillers to hashtable OK");
        string tempnewappver = string.Empty;
        appver = string.IsNullOrEmpty(appver) ? "1.0.3" : appver;
        string currentappver = appver.Replace(".", "");//Split . from app version 
        writeLog("currentappver" + currentappver);



        if (newappverht.ContainsKey(taxID))
        {
            tempnewappver = newappverht[taxID].ToString();
            writeLog("tempappver" + tempnewappver);
            if (int.Parse(tempnewappver) > int.Parse(currentappver))//Compare if new app version is larger current app version or not
            {
                code = "05";
                desp = "Please update your application to use " + httnewbillers[taxID].ToString();
                writeLog("Version Out of Date currentversion : " + currentappver + " New Version :" + tempnewappver);
                return false;
            }
            writeLog("Check Appver OK");

        }

        #endregion


        return true;
    }

    public bool IsValidateMptDataPackageInquiryReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string messageid, out string email, out string password, out string requestedby, out string taxID, out string NewTaxID)
    {
        return IsValidateParamiGasInquiryReq(ht, out code, out desp, out version, out ts, out messageid, out email, out password, out requestedby, out taxID, out NewTaxID);
    }

    public bool IsValidateParamiGasInquiryReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string messageid, out string email, out string password, out string requestedby, out string taxID, out string NewTaxID)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;
        taxID = string.Empty;
        messageid = string.Empty;
        requestedby = string.Empty;
        NewTaxID = string.Empty;
        var MapTaxID = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageid = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("RequestedBy"))
        {
            requestedby = ht["RequestedBy"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <RequestedBy> Tag");
            return false;
        }

        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <Email> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Password> Tag");
            return false;
        }

        if (ht.ContainsKey("TaxID"))
        {
            taxID = ht["TaxID"].ToString();

            if (getMapTaxID(taxID, out MapTaxID))
            {
                NewTaxID = MapTaxID;
                writeLog("OldTaxID:" + taxID + "NewMappedTaxID:" + NewTaxID);
            }
            else
            {

                code = "06";
                desp = "Invalid Request";
                writeLog("MapTaxID is Missing OldTaxID:" + taxID + "NewMappedTaxID:" + NewTaxID);
                return false;
            }
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing amount <TaxID> Tag");
            return false;
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        bool flg = false;
        string passwordDB = "";
        string userStatusDB = "";
        string appver = string.Empty;

        flg = _agentWCF.getAuthentication(email, password, out ds, out errmsg);
        if (flg)
        {
            try
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    int.TryParse(ds.Tables[0].Rows[0]["AGENTID"].ToString(), out agentID);
                    this.agentCode = Convert.ToString(ds.Tables[0].Rows[0]["AGENTCODE"]);
                    this.servicePercent = Convert.ToString(ds.Tables[0].Rows[0]["AGENTFEEPERCENT"]);
                    this.agentName = ds.Tables[0].Rows[0]["AGENTNAME"].ToString();
                    this.branchCode = ds.Tables[0].Rows[0]["BRANCHCODE"].ToString();
                    this.branchName = ds.Tables[0].Rows[0]["BRANCHNAME"].ToString();
                    passwordDB = Convert.ToString(ds.Tables[0].Rows[0]["AGENTUSERPASSWORD"]);
                    userStatusDB = Convert.ToString(ds.Tables[0].Rows[0]["USERSTATUS"]);
                    appver = Convert.ToString(ds.Tables[0].Rows[0]["APPVERSION"]);

                    writeLog("APPVERSION:" + appver + " AGETN ID : " + agentID.ToString() + " | AGENT CODE : " + agentCode + " | AGENT NAME : " + agentName + " | BRANCH CODE : " + branchCode);


                    if (passwordDB != password)
                    {
                        code = "05";
                        desp = "Incorrect Password";
                        writeLog(desp + errmsg);
                        return false;
                    }
                    else if (userStatusDB != "Y")
                    {
                        code = "05";
                        desp = "Login ID Locked";
                        writeLog(desp + errmsg);
                        return false;
                    }

                }
                else
                {
                    code = "05";
                    desp = "Incorrect LoginID";
                    writeLog(desp + errmsg);
                    return false;
                }

            }
            catch (Exception ex)
            {
                writeLog("Error In Authtentication Inquiry Request" + ex.Message);
            }

        }
        else
        {
            code = "--";
            desp = "DB Error";
            writeLog("Error in Authentication : " + errmsg);
            return false;

        }

        #region <-- Check APP version -->

        string newbillers = ConfigurationManager.AppSettings["NewBiller"].ToString();//new adding biller
        writeLog("get new biller OK");
        string newappver = ConfigurationManager.AppSettings["newappver"].ToString();//newbiller Taxid and appversion 
        writeLog("get new appver OK");
        Hashtable newappverht = Utils.getMerchantCodeHashtable(newappver);//get app version of Biller's TaxID
        writeLog("add new appverto hashtableOK");
        Hashtable httnewbillers = Utils.getMerchantCodeHashtable(newbillers);
        writeLog("Add newbillers to hashtable OK");
        string tempnewappver = string.Empty;
        appver = string.IsNullOrEmpty(appver) ? "1.0.3" : appver;
        string currentappver = appver.Replace(".", "");//Split . from app version 
        writeLog("currentappver" + currentappver);



        if (newappverht.ContainsKey(taxID))
        {
            tempnewappver = newappverht[taxID].ToString();
            writeLog("tempappver" + tempnewappver);
            if (int.Parse(tempnewappver) > int.Parse(currentappver))//Compare if new app version is larger current app version or not
            {
                code = "05";
                desp = "Please update your application to use " + httnewbillers[taxID].ToString();
                writeLog("Version Out of Date currentversion : " + currentappver + " New Version :" + tempnewappver);
                return false;
            }
            writeLog("Check Appver OK");

        }

        #endregion


        return true;
    }

    public bool IsValidateGetEventListInquiryReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string messageid, out string email, out string password, out string requestedby, out string taxID, out string NewTaxID, out string eventId)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;
        taxID = string.Empty;
        messageid = string.Empty;
        requestedby = string.Empty;
        NewTaxID = string.Empty;
        var MapTaxID = string.Empty;
        eventId = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageid = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("RequestedBy"))
        {
            requestedby = ht["RequestedBy"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <RequestedBy> Tag");
            return false;
        }

        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <Email> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Password> Tag");
            return false;
        }

        if (ht.ContainsKey("EventId"))
        {
            eventId = ht["EventId"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <EventId> Tag");
            return false;
        }

        if (ht.ContainsKey("TaxID"))
        {
            taxID = ht["TaxID"].ToString();

            if (getMapTaxID(taxID, out MapTaxID))
            {
                NewTaxID = MapTaxID;
                writeLog("OldTaxID:" + taxID + "NewMappedTaxID:" + NewTaxID);
            }
            else
            {

                code = "06";
                desp = "Invalid Request";
                writeLog("MapTaxID is Missing OldTaxID:" + taxID + "NewMappedTaxID:" + NewTaxID);
                return false;
            }
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing amount <TaxID> Tag");
            return false;
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        // DataSet dsBiller = null;
        bool flg = false;
        string passwordDB = "";
        string userStatusDB = "";
        string appver = string.Empty;

        flg = _agentWCF.getAuthentication(email, password, out ds, out errmsg);
        if (flg)
        {
            try
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    int.TryParse(ds.Tables[0].Rows[0]["AGENTID"].ToString(), out agentID);
                    this.agentCode = Convert.ToString(ds.Tables[0].Rows[0]["AGENTCODE"]);
                    this.servicePercent = Convert.ToString(ds.Tables[0].Rows[0]["AGENTFEEPERCENT"]);
                    this.agentName = ds.Tables[0].Rows[0]["AGENTNAME"].ToString();
                    this.branchCode = ds.Tables[0].Rows[0]["BRANCHCODE"].ToString();
                    this.branchName = ds.Tables[0].Rows[0]["BRANCHNAME"].ToString();
                    passwordDB = Convert.ToString(ds.Tables[0].Rows[0]["AGENTUSERPASSWORD"]);
                    userStatusDB = Convert.ToString(ds.Tables[0].Rows[0]["USERSTATUS"]);
                    appver = Convert.ToString(ds.Tables[0].Rows[0]["APPVERSION"]);

                    writeLog("APPVERSION:" + appver + " AGETN ID : " + agentID.ToString() + " | AGENT CODE : " + agentCode + " | AGENT NAME : " + agentName + " | BRANCH CODE : " + branchCode);


                    if (passwordDB != password)
                    {
                        code = "05";
                        desp = "Incorrect Password";
                        writeLog(desp + errmsg);
                        return false;
                    }
                    else if (userStatusDB != "Y")
                    {
                        code = "05";
                        desp = "Login ID Locked";
                        writeLog(desp + errmsg);
                        return false;
                    }

                }
                else
                {
                    code = "05";
                    desp = "Incorrect LoginID";
                    writeLog(desp + errmsg);
                    return false;
                }

            }
            catch (Exception ex)
            {
                writeLog("Error In Authtentication Inquiry Request" + ex.Message);
            }

        }
        else
        {
            code = "--";
            desp = "DB Error";
            writeLog("Error in Authentication : " + errmsg);
            return false;

        }

        #region <-- Check APP version -->

        string newbillers = ConfigurationManager.AppSettings["NewBiller"].ToString();//new adding biller
        writeLog("get new biller OK");
        string newappver = ConfigurationManager.AppSettings["newappver"].ToString();//newbiller Taxid and appversion 
        writeLog("get new appver OK");
        Hashtable newappverht = Utils.getMerchantCodeHashtable(newappver);//get app version of Biller's TaxID
        writeLog("add new appverto hashtableOK");
        Hashtable httnewbillers = Utils.getMerchantCodeHashtable(newbillers);
        writeLog("Add newbillers to hashtable OK");
        string tempnewappver = string.Empty;
        appver = string.IsNullOrEmpty(appver) ? "1.0.3" : appver;
        string currentappver = appver.Replace(".", "");//Split . from app version 
        writeLog("currentappver" + currentappver);



        if (newappverht.ContainsKey(taxID))
        {
            tempnewappver = newappverht[taxID].ToString();
            writeLog("tempappver" + tempnewappver);
            if (int.Parse(tempnewappver) > int.Parse(currentappver))//Compare if new app version is larger current app version or not
            {
                code = "05";
                desp = "Please update your application to use " + httnewbillers[taxID].ToString();
                writeLog("Version Out of Date currentversion : " + currentappver + " New Version :" + tempnewappver);
                return false;
            }
            writeLog("Check Appver OK");

        }

        #endregion


        return true;
    }

    public bool getMapTaxID(string taxID, out string MapTaxID)
    {
        MapTaxID = string.Empty;
        errMsg = string.Empty;
        DataSet billerDs = new DataSet();
        bool result = false;
        if (_agentWCF.getMapTaxIDByTaxID(taxID, out billerDs, out errMsg))
        {

            if (billerDs.Tables.Count > 0)
            {
                if (billerDs.Tables[0].Rows.Count > 0)
                {
                    MapTaxID = billerDs.Tables[0].Rows[0]["MAPTAXID"] == DBNull.Value ? string.Empty : billerDs.Tables[0].Rows[0]["MAPTAXID"].ToString();

                    result = string.IsNullOrEmpty(MapTaxID) ? false : true;
                }
            }
        }

        return result;
    }
    //new one string version, string timeStamp,string messageid, string agentcode, string ResCode,string ResDesc, string merchantid, string merchantname,string paymentcode,string invoiceno,string amount,string productdesc,string transtatus,string expiry
    //Old One  out string expiry, out string code, out string desp, out string version, out string ts, out string rescode, out string resdecs, out string merchantname, out string merchantlogo, out string ref1, out string ref2, out string inquirytype, out string amount, out string productdesc, out string status
    bool IsValidateInquiryRes123(Hashtable ht, out string version, out string ts, out string messageid, out string agentcode, out string code, out string desp, out string merchantid, out string merchantname, out string ref1, out string invoiceno, out string amount, out string productdesc, out string transtatus, out string expiry)
    {
        code = "";
        desp = "";

        version = string.Empty;
        ts = string.Empty;
        messageid = string.Empty;
        agentcode = string.Empty;
        string rescode = string.Empty;
        string resdecs = string.Empty;
        merchantid = string.Empty;
        merchantname = string.Empty;
        ref1 = string.Empty;
        invoiceno = string.Empty;
        amount = string.Empty;
        productdesc = string.Empty;
        transtatus = string.Empty;
        expiry = string.Empty;
        string hash = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("MessageID"))
        {
            messageid = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }
        if (ht.ContainsKey("AgentCode"))
        {
            agentcode = ht["AgentCode"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <AgentCode> Tag");
            return false;
        }
        if (ht.ContainsKey("ResCode"))
        {
            rescode = ht["ResCode"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <ResCode> Tag");
            return false;
        }

        if (ht.ContainsKey("ResDesc"))
        {
            resdecs = ht["ResDesc"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <ResDesc> Tag");
            return false;
        }
        if (ht.ContainsKey("MerchantID"))
        {
            merchantid = ht["MerchantID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <MerchantID> Tag");
            return false;
        }
        if (ht.ContainsKey("MerchantName"))
        {
            merchantname = ht["MerchantName"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <MerchantName> Tag");
            return false;
        }
        if (ht.ContainsKey("PaymentCode"))
        {
            ref1 = ht["PaymentCode"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <PaymentCode> Tag");
            return false;
        }
        if (ht.ContainsKey("InvoiceNo"))
        {
            invoiceno = ht["InvoiceNo"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password < InvoiceNo> Tag");
            return false;
        }

        if (ht.ContainsKey("Amount"))
        {
            amount = ht["Amount"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Amount> Tag");
            return false;
        }
        if (ht.ContainsKey("ProductDesc"))
        {
            productdesc = ht["ProductDesc"].ToString();
        }

        if (ht.ContainsKey("Status"))
        {
            transtatus = ht["Status"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Status <Status> Tag");
            return false;
        }

        if (ht.ContainsKey("Expiry"))
        {
            expiry = ht["Expiry"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Expiry <Expiry> Tag");
            return false;
        }
        if (ht.ContainsKey("Hash"))
        {
            hash = ht["Hash"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Expiry <Hash> Tag");
            return false;
        }

        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(rescode) || String.IsNullOrEmpty(resdecs) || String.IsNullOrEmpty(ref1)) //|| String.IsNullOrEmpty(ref2))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }
        ArrayList ar = new ArrayList();
        ar.Add(version);
        ar.Add(ts);
        ar.Add(messageid);
        ar.Add(agentcode);
        ar.Add(rescode);
        ar.Add(merchantid);
        ar.Add(ref1);
        ar.Add(invoiceno);

        ar.Sort();

        StringBuilder sb = new StringBuilder();
        foreach (string item in ar)
        {
            sb.Append(item);
        }



        //Check Authecation
        string errmsg = string.Empty;
        var secretkey = ConfigurationManager.AppSettings["123SecretKey"].ToString();


        if (!Utils.verifyHashValue(hash, sb.ToString(), secretkey))
        {
            code = "--";
            desp = "InvalidHashKey123";
            writeLog("Error in hashv 123 res : " + errmsg);
            return false;
        }

        string merchanidmerchantname = ConfigurationManager.AppSettings["merchantIdmerchantName"].ToString();

        #region <-- If Taxid is 123/1230000000000000 -->

        if (ht.ContainsKey("ResCode"))
        {
            code = ht["ResCode"].ToString();
            if (code == "BP_ST_00")
            {
                code = "00";
                desp = "Success";

            }
            else
            {
                code = Utils.changeStatusCodeToCode(code);
                desp = ht["ResDesc"].ToString();
            }
        }

        #endregion


        return true;


    }

    bool IsValidateInquiryFirstRes123(Hashtable ht, out string taxid, out string code, out string desp)
    {

        writeLog("$$$$$$$$$$$$$$$$$$123 First Response Valadation$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
        code = string.Empty;
        desp = string.Empty;
        taxid = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string messageid = string.Empty;
        string agentcode = string.Empty;
        string rescode = string.Empty;
        string resdecs = string.Empty;
        string merchantid = string.Empty;
        string ref1 = string.Empty;
        string invoiceno = string.Empty;
        string hash = string.Empty;

        #region <-- Inquiry ressponse xml sample -->

        #endregion
        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("MessageID"))
        {
            messageid = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }
        if (ht.ContainsKey("AgentCode"))
        {
            agentcode = ht["AgentCode"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <AgentCode> Tag");
            return false;
        }
        if (ht.ContainsKey("ResCode"))
        {
            rescode = ht["ResCode"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <ResCode> Tag");
            return false;
        }

        if (ht.ContainsKey("ResDesc"))
        {
            resdecs = ht["ResDesc"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <ResDesc> Tag");
            return false;
        }
        if (ht.ContainsKey("MerchantID"))
        {
            merchantid = ht["MerchantID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <MerchantID> Tag");
            return false;
        }
        if (!ht.ContainsKey("MerchantName"))
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <MerchantName> Tag");
            return false;
        }
        if (ht.ContainsKey("PaymentCode"))
        {
            ref1 = ht["PaymentCode"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <PaymentCode> Tag");
            return false;
        }
        if (ht.ContainsKey("InvoiceNo"))
        {
            invoiceno = ht["InvoiceNo"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password < InvoiceNo> Tag");
            return false;
        }

        if (!ht.ContainsKey("Amount"))
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Amount> Tag");
            return false;
        }

        if (!ht.ContainsKey("Status"))
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Status <Status> Tag");
            return false;
        }
        if (!ht.ContainsKey("Expiry"))
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Expiry <Expiry> Tag");
            return false;
        }
        if (ht.ContainsKey("Hash"))
        {
            hash = ht["Hash"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Expiry <Hash> Tag");
            return false;
        }

        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(rescode) || String.IsNullOrEmpty(resdecs) || String.IsNullOrEmpty(ref1)) //|| String.IsNullOrEmpty(ref2))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }
        ArrayList ar = new ArrayList();
        ar.Add(version);
        ar.Add(ts);
        ar.Add(messageid);
        ar.Add(agentcode);
        ar.Add(rescode);
        ar.Add(merchantid);
        ar.Add(ref1);
        ar.Add(invoiceno);

        ar.Sort();

        StringBuilder sb = new StringBuilder();
        foreach (string item in ar)
        {
            sb.Append(item);
        }



        //Check Authecation
        string errmsg = string.Empty;
        string secretkey = string.Empty;

        secretkey = ConfigurationManager.AppSettings["123SecretKey"].ToString();

        if (!Utils.verifyHashValue(hash, sb.ToString(), secretkey))
        {
            code = "--";
            desp = "InvalidHashKey123";
            writeLog("Error in hashv 123 res : " + errmsg);
            return false;
        }


        if (ht.ContainsKey("ResCode"))
        {
            code = ht["ResCode"].ToString();
            if (code == "BP_ST_00")
            {
                code = "00";
                desp = "Success";

            }
            else
            {
                code = Utils.changeStatusCodeToCode(code);
                desp = ht["ResDesc"].ToString();
                return false;
            }
        }
        string AbcMerchantIDtaxID = ConfigurationManager.AppSettings["AbcmerchantIdTaxID"].ToString();
        string noFeesMerchantIDtaxID = ConfigurationManager.AppSettings["noFeesMerchantIdTaxID"].ToString();
        string othersFeesMerchantIdTaxId = ConfigurationManager.AppSettings["otherFeesMerchantIdTaxID"].ToString();
        #region <-- If Taxid is 123/1230000000000000 set Service Depend on 123 Merchant -->
        Hashtable httabcMerchantIDTaxid = Utils.getMerchantCodeHashtable(AbcMerchantIDtaxID);
        Hashtable httnoFeesMerchantIDtaxID = Utils.getMerchantCodeHashtable(noFeesMerchantIDtaxID);
        Hashtable httothersFeesMerchantIdTaxId = Utils.getMerchantCodeHashtable(othersFeesMerchantIdTaxId);

        AdminWcf.ServiceClient _admWS = new AdminWcf.ServiceClient();
        string errMsg = string.Empty;
        DataSet ds = null;
        if (_admWS.getOneTwoThreeFeesByMerchantId(merchantid, out ds, out errMsg) && ds.Tables[0].Rows.Count > 0)
        {
            writeLog("Merchannt is  airline");
            var dt = ds.Tables[0];

            foreach (DataRow row in dt.Rows)
            {
                this.serviceFlatFee = row["SERVICEFLATFEE"].ToString();
                this.servicePercent = row["SERVICEPERCENTFEE"].ToString();
                this.agentFlatFee = row["COMMISSIONFLATFEE"].ToString();
                this.agentPercent = row["COMMISSIONPERCENTFEE"].ToString();
                this.oneStopFlatFee = row["PROCESSINGFLATFEE"].ToString();
                this.oneStopPercent = row["PROCESSINGPERCENTFEE"].ToString();
            }

            return true;
        }
        else if (httabcMerchantIDTaxid.ContainsKey(merchantid))
        {
            writeLog("This is ABC Cashcard 123 Merchant");
            taxid = httabcMerchantIDTaxid[merchantid].ToString();
            this.serviceFlatFee = ConfigurationManager.AppSettings["AbcCardServiceFlatFee"].ToString();
            this.servicePercent = ConfigurationManager.AppSettings["AbcCardServicePercentFee"].ToString();
            this.agentFlatFee = ConfigurationManager.AppSettings["AbcCardAgentFlatFee"].ToString();
            this.agentPercent = ConfigurationManager.AppSettings["AbcCardAgentPercentFee"].ToString();
            this.oneStopFlatFee = ConfigurationManager.AppSettings["AbcCard1StopFlatFee"].ToString();
            this.oneStopPercent = ConfigurationManager.AppSettings["AbcCard1StopPercentFee"].ToString();
            return true;
        }
        else if (httnoFeesMerchantIDtaxID.ContainsKey(merchantid))
        {
            writeLog("This is No ServiceFees 123 Merchant");
            this.serviceFlatFee = ConfigurationManager.AppSettings["noFeesServiceFlatFee"].ToString();
            this.servicePercent = ConfigurationManager.AppSettings["noFeesServicePercentFee"].ToString();
            this.agentFlatFee = ConfigurationManager.AppSettings["noFeesAgentFlatFee"].ToString();
            this.agentPercent = ConfigurationManager.AppSettings["noFeesAgentPercentFee"].ToString();
            this.oneStopFlatFee = ConfigurationManager.AppSettings["noFees1StopFlatFee"].ToString();
            this.oneStopPercent = ConfigurationManager.AppSettings["noFees1StopPercentFee"].ToString();
            return true;
        }
        else if (httothersFeesMerchantIdTaxId.ContainsKey(merchantid))
        {
            writeLog("This is other ServiceFees 123 Merchant");
            this.serviceFlatFee = ConfigurationManager.AppSettings["othersFeesServiceFlatFee"].ToString();
            this.servicePercent = ConfigurationManager.AppSettings["othersFeesServicePercentFee"].ToString();
            this.agentFlatFee = ConfigurationManager.AppSettings["othersFeesAgentFlatFee"].ToString();
            this.agentPercent = ConfigurationManager.AppSettings["othersFeesAgentPercentFee"].ToString();
            this.oneStopFlatFee = ConfigurationManager.AppSettings["othersFees1StopFlatFee"].ToString();
            this.oneStopPercent = ConfigurationManager.AppSettings["othersFees1StopPercentFee"].ToString();
            return true;
        }
        else
        {
            writeLog("Merchant is not Airline");
            taxid = "1230000000000";

        }
        #endregion


        return true;


    }

    bool IsValidateInquiryResMercyEasyPoint(Hashtable ht, string taxID, out string rescode, out string resdesc, out string version, out string msgid, out string ref1, out string amt, out string tranref, out string digitalcodedesc)
    {
        rescode = string.Empty;
        version = string.Empty;
        string ts = string.Empty;
        msgid = string.Empty;
        string agnid = string.Empty;
        string partneragnid = string.Empty;
        resdesc = string.Empty;
        ref1 = string.Empty;

        amt = string.Empty;
        tranref = string.Empty;
        string reshashvalue = string.Empty;
        string tmphashvalue = string.Empty;
        digitalcodedesc = string.Empty;
        try
        {
            if (ht.ContainsKey("Version"))
            {
                version = ht["Version"].ToString();
            }
            else
            {
                rescode = "06";
                resdesc = "Invalid Request";
                writeLog("Error in Validation : Missing XML <Version> Tag");
                return false;
            }
            if (ht.ContainsKey("TimeStamp"))
            {
                ts = ht["TimeStamp"].ToString();
            }
            else
            {
                rescode = "06";
                resdesc = "Invalid Request";
                writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
                return false;
            }


            if (ht.ContainsKey("MessageID"))
            {
                msgid = ht["MessageID"].ToString();
            }
            else
            {
                rescode = "06";
                resdesc = "Invalid Request";
                writeLog("Error in Validation : Missing XML <MessageID> Tag");
                return false;
            }

            if (ht.ContainsKey("ResCode"))
            {
                rescode = ht["ResCode"].ToString();
            }
            else
            {
                rescode = "06";
                resdesc = "Invalid Request";
                writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
                return false;
            }

            if (ht.ContainsKey("ResDesc"))
            {
                resdesc = ht["ResDesc"].ToString();
            }
            else
            {
                rescode = "06";
                resdesc = "Invalid Request";
                writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
                return false;
            }

            if (ht.ContainsKey("PartnerID"))
            {
                agnid = ht["PartnerID"].ToString();
            }
            else
            {
                rescode = "06";
                resdesc = "Invalid Request";
                writeLog("Error in Validation : Missing PartnerID <PartnerID> Tag");
                return false;
            }

            if (ht.ContainsKey("AgentID"))
            {
                partneragnid = ht["AgentID"].ToString();
            }
            else
            {
                rescode = "06";
                resdesc = "Invalid Request";
                writeLog("Error in Validation : Missing AgentID <AgentID> Tag");
                return false;
            }
            if (ht.ContainsKey("DigitalCode"))
            {
                ref1 = ht["DigitalCode"].ToString();
            }
            else
            {
                rescode = "06";
                resdesc = "Invalid Request";
                writeLog("Error in Validation : Missing Ref1 <DigitalCode> Tag");
                return false;
            }
            if (ht.ContainsKey("CodeDesc"))
            {
                digitalcodedesc = ht["CodeDesc"].ToString();
            }

            if (ht.ContainsKey("TranAmount"))
            {
                amt = ht["TranAmount"].ToString();
            }
            else
            {
                rescode = "06";
                resdesc = "Invalid Request";
                writeLog("Error in Validation : Missing TranAmount <TranAmount> Tag");
                return false;
            }
            if (ht.ContainsKey("TranRef"))
            {
                tranref = ht["TranRef"].ToString();
            }
            else
            {
                rescode = "06";
                resdesc = "Invalid Request";
                return false;
            }

            if (ht.ContainsKey("HashValue"))
            {
                reshashvalue = ht["HashValue"].ToString();
            }

            // MessageID + AgentID + ResCode+ ResDesc + DigitalCode + SerialNo + Expiry + Amount
            //hashstrConfirmeasypointRes(string messageid, string agentid, string rescode, string resdec, string digital, string serial, string expiry,string amount)
            if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(partneragnid) || String.IsNullOrEmpty(rescode) || String.IsNullOrEmpty(agnid) || String.IsNullOrEmpty(amt) || String.IsNullOrEmpty(ref1))
            {
                rescode = String.IsNullOrEmpty(rescode) ? "07" : rescode;
                resdesc = String.IsNullOrEmpty(resdesc) ? "Invalid Message" : resdesc;
                writeLog("Error in Validation : Data is Null or Empty");
                return false;
            }
            string mercyagentid = taxID == "7777777777777" ? ConfigurationManager.AppSettings["easyPointMercyID"].ToString() : ConfigurationManager.AppSettings["MercycorpsAgentID"].ToString();

            if (partneragnid != mercyagentid)
            {
                rescode = "07";
                resdesc = "Your payment code is invalid";
                writeLog("Code is not from Mercy Crop mercycorpid:" + mercyagentid + "Response AgentID:" + partneragnid);
                return false;
            }
            string key = taxID == "7777777777777" ? ConfigurationManager.AppSettings["easyPointMercyRedeemKey"].ToString() : ConfigurationManager.AppSettings["MercyCorpsRedeemKey"].ToString();
            tmphashvalue = Utils.hashstrRedeemEnquiryEasyPointRes(version, ts, msgid, agnid, partneragnid, ref1, rescode, amt, tranref, key);

            // writeLog("Confirm Response Putet HashValue :" + tmphashvalue);,
            //  replacetime = Regex.Replace(ts, "[^0-9a-zA-Z]+", "");
            #region <-- Check EasyPoint Confirm response Hash value -->
            if (reshashvalue != tmphashvalue)
            {
                rescode = "05";
                resdesc = "Hash Value Missmatch";
                writeLog("Inquiry Hash Value Missmatch.");
                return false;
            }

            #endregion
            //Check Null or Empty String

        }
        catch (Exception ex)
        {
            writeLog("Excetpion Error In valadate InquiryRedeemResponse Msg:" + ex.Message);
            return false;
        }
        return true;


    }

    public bool IsValidateInquiryResAwba(Hashtable ht, out string rescode, out string resdesc, out string version, out string msgid, out string ref1, out string ref2, out string ref3, out string ref4, out string ref5, out string ref6, out string loanType, out string loandesc, out string reshashvalue, out string amt, out string ts)
    {
        //
        rescode = string.Empty;
        version = string.Empty;
        ts = string.Empty;
        resdesc = string.Empty;
        ref1 = string.Empty;//slipNo
        ref2 = string.Empty;//CustomerID
        ref3 = string.Empty;//Due Date
        ref4 = string.Empty;





        ref5 = string.Empty; //<InterestAmount></InterestAmount> 
        ref6 = string.Empty;  //<PanelFeesAmount></ PanelFeesAmount > 
        msgid = string.Empty;
        amt = string.Empty;
        reshashvalue = string.Empty;
        loanType = string.Empty;
        loandesc = string.Empty;

        reshashvalue = string.Empty;
        string tmphashvalue = string.Empty;
        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();

        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Response";
            writeLog("Missing Version Tag At Inquiry Response");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Response";
            writeLog("Missing TimeStamp Tag At Inquiry Response");
            return false;
        }


        if (ht.ContainsKey("MessageID"))
        {
            msgid = ht["MessageID"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Response";
            writeLog("Missing MessageID Tag At Inquiry Response");
            return false;
        }

        if (ht.ContainsKey("CustomerID"))
        {
            ref2 = ht["CustomerID"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Response";
            writeLog("Missing CustomerID Tag At Inquiry Response");
            return false;
        }

        if (ht.ContainsKey("ResCode"))
        {
            rescode = ht["ResCode"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Response";
            writeLog("Missing ResCode Tag At Inquiry Response");
            return false;
        }
        if (ht.ContainsKey("SlipNo"))
        {
            ref1 = ht["SlipNo"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Response";
            writeLog("Missing SlipNo Tag At Inquiry Response");
            return false;
        }

        if (ht.ContainsKey("DueDate"))
        {
            ref3 = ht["DueDate"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Response";
            writeLog("Missing DueDate Tag At Inquiry Response");
            return false;
        }
        if (ht.ContainsKey("Amount"))
        {
            amt = ht["Amount"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Response";
            writeLog("Missing Amount Tag At Inquiry Response");
            return false;
        }

        if (ht.ContainsKey("InterestAmount"))
        {
            ref5 = ht["InterestAmount"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Response";
            writeLog("Missing InterestAmount Tag At Inquiry Response");
            return false;
        }
        if (ht.ContainsKey("PenalFeesAmount"))
        {
            ref6 = ht["PenalFeesAmount"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Response";
            writeLog("Missing PenalFeesAmount Tag At Inquiry Response");
            return false;
        }
        if (ht.ContainsKey("LoanType"))
        {
            loanType = ht["LoanType"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Response";
            writeLog("Missing LoanType Tag At Inquiry Response");
            return false;
        }
        if (ht.ContainsKey("Desc"))
        {
            loandesc = ht["Desc"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Response";
            writeLog("Missing Desc Tag At Inquiry Response");
            return false;
        }

        if (ht.ContainsKey("HashValue"))
        {
            reshashvalue = ht["HashValue"].ToString();
        }

        tmphashvalue = Utils.GethashKeyawbaInqRes(version, ts, msgid, ref2, ref1, rescode, amt, ref3, loanType, loandesc);

        writeLog("response Hash Value:" + reshashvalue + "|Hash value To Compare:" + tmphashvalue);
        if (reshashvalue != tmphashvalue)
        {
            rescode = "05";
            resdesc = "Hash Value Missmatch";
            writeLog("response Hash Value:" + reshashvalue + "|Hash value To Compare:" + tmphashvalue);
            return false;
        }

        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(rescode))
        {
            rescode = "07";
            resdesc = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        resdesc = GetDescriptionByResponseCode(rescode);
        return true;


    }

    public string TelenorBBInquiry(string reqXml)
    {
        try
        {
            writeLog("$$$$$$$$$$$$$$$$$$ TelenorBB Inquiry Request $$$$$$$$$$$$$$$$$$");
            writeLog("REQ XML : " + reqXml);
            string code = string.Empty, desp = string.Empty;
            string version = string.Empty;
            string ts = string.Empty;
            string email = string.Empty;
            string password = string.Empty;

            string ref1 = string.Empty;
            string ref2 = string.Empty;
            string ref3 = string.Empty;
            string ref4 = string.Empty;
            string ref5 = string.Empty;
            string ref1Name = string.Empty;
            string ref2Name = string.Empty;
            string ref3Name = string.Empty;
            string ref4Name = string.Empty;
            string ref5Name = string.Empty;
            string amount = string.Empty;
            string inquirytype = string.Empty;
            string locLatitude = string.Empty;
            string locLongitude = string.Empty;
            string rescode = string.Empty;
            string resdecs = string.Empty;
            string merchantname = string.Empty;
            string merchantid = string.Empty;
            string merchantlogo = string.Empty;
            string productdesc = string.Empty;
            string status = string.Empty;
            string expiry = string.Empty;
            string taxID = string.Empty;
            string MapTaxID = string.Empty;

            string messageid = string.Empty;
            string requestedby = string.Empty;
            string hashvalue = string.Empty;
            string invoiceno = string.Empty;
            string isAgreement = "N";
            string response = "";
            string topupType;
            string TodayTxnCount = string.Empty;
            string TodayTxnAmount = string.Empty;
            string totalAgentAmount = string.Empty;
            string totalAmount = string.Empty;
            string qr = string.Empty;
            string taxxid = string.Empty;
            string canalPlusReqType = string.Empty;
            string sessionID = string.Empty;
            string partnerCode = string.Empty;
            string customerID = string.Empty;
            string URL = string.Empty;
            string imgURL = string.Empty;
            Hashtable ht = Utils.getHTableFromXML(reqXml);
            if (!IsValidateInquiryReq(ht, out code, out desp, out version, out ts, out email, out password, out ref1, out ref2, out ref3, out ref4, out ref5, out inquirytype, out amount, out taxID, out ref1Name, out ref2Name, out ref3Name, out requestedby, out messageid, out qr, out MapTaxID, out canalPlusReqType, out sessionID))
            {
                return Utils.getErrorRes(code, desp);
            }
            else
            {
                DataSet dsBiller = null;
                string errmsg = string.Empty;
                string billerid = string.Empty;
                StringBuilder sb = new StringBuilder();
                if (_agentWCF.checkBillerID(taxID, agentID, email, out dsBiller, out errmsg))
                {
                    if (dsBiller.Tables[0].Rows.Count > 0)
                    {
                        billerid = Convert.ToString(dsBiller.Tables[0].Rows[0]["BILLERID"]);
                        billerName = dsBiller.Tables[0].Rows[0]["BILLERNAME"].ToString();

                        if (!string.IsNullOrEmpty(dsBiller.Tables[0].Rows[0]["BILLERLOGO"].ToString()))
                            billerLogo = Convert.ToBase64String((byte[])dsBiller.Tables[0].Rows[0]["BILLERLOGO"]);

                        ref1Name = dsBiller.Tables[0].Rows[0]["REF1NAME"].ToString();
                        ref2Name = dsBiller.Tables[0].Rows[0]["REF2NAME"].ToString();
                        ref3Name = dsBiller.Tables[0].Rows[0]["REF3NAME"].ToString();
                        ref5Name = dsBiller.Tables[0].Rows[0]["REF5NAME"].ToString();
                        if (MapTaxID == "1230000000000")
                        {
                            if (taxxid == "1230000000000")
                            {
                                serviceFlatFee = dsBiller.Tables[0].Rows[0]["SERVICEFLATFEE"].ToString();
                                servicePercent = dsBiller.Tables[0].Rows[0]["SERVICEPERCENTFEE"].ToString();
                                agentFlatFee = dsBiller.Tables[0].Rows[0]["AGENTFLATFEE"].ToString();
                                agentPercent = dsBiller.Tables[0].Rows[0]["AGENTPERCENTFEE"].ToString();
                                oneStopFlatFee = dsBiller.Tables[0].Rows[0]["ONESTOPFLATFEE"].ToString();
                                oneStopPercent = dsBiller.Tables[0].Rows[0]["ONESTOPPERCENTFEE"].ToString();
                            }
                        }
                        else
                        {
                            serviceFlatFee = dsBiller.Tables[0].Rows[0]["SERVICEFLATFEE"].ToString();
                            servicePercent = dsBiller.Tables[0].Rows[0]["SERVICEPERCENTFEE"].ToString();
                            agentFlatFee = dsBiller.Tables[0].Rows[0]["AGENTFLATFEE"].ToString();
                            agentPercent = dsBiller.Tables[0].Rows[0]["AGENTPERCENTFEE"].ToString();
                            oneStopFlatFee = dsBiller.Tables[0].Rows[0]["ONESTOPFLATFEE"].ToString();
                            oneStopPercent = dsBiller.Tables[0].Rows[0]["ONESTOPPERCENTFEE"].ToString();
                        }

                        billerFlatFee = dsBiller.Tables[0].Rows[0]["BillerFlatFee"].ToString();
                        billerPercentFee = dsBiller.Tables[0].Rows[0]["BillerPercentFee"].ToString();
                        billerServiceFlatFee = dsBiller.Tables[0].Rows[0]["BillerServiceFlatFee"].ToString();
                        billerServicePercentFee = dsBiller.Tables[0].Rows[0]["BillerServicePercentFee"].ToString();

                        #region <-- Add By Tz To check Credit terms and Limited For Non Balance Agent -->
                        if (string.IsNullOrEmpty(ref1))
                            ref1 = dsBiller.Tables[0].Rows[0]["REFID1"].ToString(); //Added By hnt 25-Mar-2015

                        creditlimit = dsBiller.Tables[0].Rows[0]["CREDITLIMIT"].ToString();
                        creditterm = dsBiller.Tables[0].Rows[0]["CREDITTERM"].ToString();
                        credittemrstart = dsBiller.Tables[0].Rows[0]["CREDITTERMSTART"].ToString();
                        isAutoCreditReset = dsBiller.Tables[0].Rows[0]["ISAUTORESETCREDIT"] == DBNull.Value ? "N" : dsBiller.Tables[0].Rows[0]["ISAUTORESETCREDIT"].ToString();
                        isSendCreditResetEmail = dsBiller.Tables[0].Rows[0]["ISSENDCREDITRESETEMAIL"] == DBNull.Value ? "N" : dsBiller.Tables[0].Rows[0]["ISSENDCREDITRESETEMAIL"].ToString();

                        isAgreement = dsBiller.Tables[0].Rows[0]["AGREEMENTTYPE"].ToString(); //Added By HNT 26-03-2015                     
                        if (dsBiller.Tables[1].Rows.Count > 0)
                        {
                            TodayTxnCount = String.IsNullOrEmpty(dsBiller.Tables[1].Rows[0]["TODAYTXNCOUNT"].ToString()) ? "0" : dsBiller.Tables[1].Rows[0]["TODAYTXNCOUNT"].ToString();
                            TodayTxnAmount = String.IsNullOrEmpty(dsBiller.Tables[1].Rows[0]["TODAYTXNAMOUNT"].ToString()) ? "0" : dsBiller.Tables[1].Rows[0]["TODAYTXNAMOUNT"].ToString();
                        }
                        if (dsBiller.Tables[2].Rows.Count > 0)
                        {
                            totalAgentAmount = String.IsNullOrEmpty(dsBiller.Tables[2].Rows[0]["AGENTAMOUNT"].ToString()) ? "0" : dsBiller.Tables[2].Rows[0]["AGENTAMOUNT"].ToString();
                        }

                        if (String.IsNullOrEmpty(amount))
                            amount = "0";

                        if (string.IsNullOrEmpty(serviceFlatFee))
                            serviceFlatFee = "0";
                        if (string.IsNullOrEmpty(servicePercent))
                            servicePercent = "0";

                        if (string.IsNullOrEmpty(agentFlatFee))
                            agentFlatFee = "0";

                        if (string.IsNullOrEmpty(agentPercent))
                            agentPercent = "0";
                        if (string.IsNullOrEmpty(creditterm))
                            creditterm = "0";
                        if (string.IsNullOrEmpty(creditlimit))
                            creditlimit = "0.00";

                        if (MapTaxID == "0000000000009")//663 Remit Calculate  fees as below
                        {
                            writeLog("$$$$$$$$$$$$$$$$$$ This IS 663 Cashout $$$$$$$$$$$$$$$$$$$$$$");
                            DataSet ds = new DataSet();
                            string minAmount = string.Empty;
                            string maxAmount = string.Empty;
                            string txnFee = string.Empty;
                            string serviceCharge = string.Empty;
                            string agentCommissionPercent = string.Empty;
                            string superAgentCommissionPercent = string.Empty;
                            if (_agentWCF.get663FeesByAmount(int.Parse(billerid), decimal.Parse(amount), out ds, out errmsg))
                            {
                                minAmount = ds.Tables[0].Rows[0]["MINAMOUNT"].ToString();
                                maxAmount = ds.Tables[0].Rows[0]["MAXAMOUNT"].ToString();
                                txnFee = ds.Tables[0].Rows[0]["TRANSACTIONFEES"].ToString();
                                serviceCharge = "0";
                                agentCommissionPercent = ds.Tables[0].Rows[0]["AGENTCOMMISSIONPERCENT"].ToString();
                                superAgentCommissionPercent = ds.Tables[0].Rows[0]["SUPERAGENTCOMMISSIONPERCENT"].ToString();
                                writeLog("amount range:" + minAmount + "to" + maxAmount + "|TransactionFees:" + txnFee + "|ServiceCharge:" + serviceCharge + "|AgentCommissionPercent:" + agentCommissionPercent + "|SuperAgentComissionPercent:" + superAgentCommissionPercent);
                                serviceFeeDbl = double.Parse(serviceCharge);
                                serviceFee = serviceFeeDbl.ToString("###0.00");

                                oneStopFeeDbl = 0;
                                oneStopFee = oneStopFeeDbl.ToString("###0.00");

                                agentFeeDbl = ((double.Parse(txnFee) * double.Parse(agentCommissionPercent)) / 100);
                                agentAmount = double.Parse(amount) + agentFeeDbl;
                                agentAmount += oneStopFeeDbl;

                                billerAmount = GetBillerAmount(double.Parse(amount));

                                writeLog("Amount : " + amount + " | ServiceFee : " + serviceFee +
                               " | AgentFee : " + agentFee + " | 1-Stop Fee : " + oneStopFee +
                               " | AgentAmount : " + agentAmount + " | BillerAmount : " + billerAmount + " | BillerDiscountFee" + BillerDiscountFee + " | BillerServiceFee" + BillerServiceFee);
                            }
                            else
                            {
                                writeLog("Error In Getting 663 Service Fees");
                                return Utils.getErrorRes("06", "Transaction not successful cannot calculate service fees.");
                            }
                        }
                        else
                        {
                            // <-- Calculate Agent Fee -->
                            writeLog("Service Percent : " + servicePercent + ", Service Flat Fee : " + serviceFlatFee + " Amount : " + amount);
                            serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                            serviceFee = serviceFeeDbl.ToString("###0.00");

                            oneStopFeeDbl = Utils.getFeeNotRound(double.Parse(amount), float.Parse(oneStopPercent), double.Parse(oneStopFlatFee));
                            oneStopFee = oneStopFeeDbl.ToString("###0.00");

                            agentFeeDbl = Utils.getFeeNotRound(double.Parse(amount), float.Parse(agentPercent), double.Parse(agentFlatFee));
                            agentAmount = double.Parse(amount) - agentFeeDbl;

                            agentAmount += oneStopFeeDbl;
                            billerAmount = GetBillerAmount(double.Parse(amount));

                            writeLog("Amount : " + amount + " | ServiceFee : " + serviceFee +
                               " | AgentFee : " + agentFee + " | 1-Stop Fee : " + oneStopFee +
                               " | AgentAmount : " + agentAmount + " | BillerAmount : " + billerAmount + " | BillerDiscountFee" + BillerDiscountFee + " | BillerServiceFee" + BillerServiceFee);
                        }
                        #endregion

                        #region <-- Add By Tz Check Credit Limit and Terms For Non Balance Agent -->
                        if (isAgreement == "Y")
                        {
                            writeLog("Agent Total Amount : " + totalAgentAmount);
                            writeLog("AGREEMENT TYPE is Y. Balance will not be needed.");
                            writeLog("Credit Limit Start:" + credittemrstart);
                            writeLog("Credit Limit:" + creditlimit);
                            writeLog("Creditterm:" + creditterm);
                            if (MapTaxID == "0000000000009")
                            {
                                writeLog("$$$$$$$$$$$$$$ 663 CashOut is not allow for Non BalanceBase Agent $$$$$$$$$$$$$$$$$$$");
                                return Utils.getErrorRes("10", "Agent not allowed");
                            }

                            CreditLimitResultModel result = new CreditLimitResultModel();
                            CreditLimitModel CreditLimitMdl = new CreditLimitModel();
                            CreditLimitMdl.totalAgentAmount = totalAgentAmount;
                            result = isEnoughCreditTermsAndLimit(CreditLimitMdl);
                            if (!result.result)
                            {
                                return Utils.getErrorRes(result.rescode, result.resdesc);
                            }

                        }
                        else
                        {
                            writeLog("Agent Total Amount : " + totalAgentAmount);
                            writeLog("AGREEMENT TYPE is N. Balance will be needed.");
                            writeLog("Credit Limit Start:" + credittemrstart);
                            writeLog("Credit Limit:" + creditlimit);
                            writeLog("Creditterm:" + creditterm);
                            double avlBal = 0;
                            double ledBal = 0;


                            if (MapTaxID != "7777777777777" && MapTaxID != ConfigurationManager.AppSettings["123RemitCashOut"].ToString() && MapTaxID != "0000000000018" && MapTaxID != "0000000000009" && MapTaxID != "0000000000010" && MapTaxID != "0000000000011")//if not MalarMyaineRedeem,123RemitCashOut , MalarMyaineCodeGenerate , 663 Cashout , MercyCorps Generate,MercyCorpsRedeem will check balance.
                            {
                                #region <-- Balance Base -->
                                writeLog("AGREEMENT TYPE is N. Balance must be available.");
                                if (!_agentWCF.getBalance(agentID, out avlBal, out ledBal))
                                {
                                    writeLog("Error in getBalance");
                                }

                                if (avlBal >= agentAmount)
                                {
                                    writeLog("Balance Enough = Agent ID : " + agentID.ToString() + " | Balance : " + avlBal.ToString());

                                    CreditLimitResultModel result = new CreditLimitResultModel();
                                    CreditLimitModel CreditLimitMdl = new CreditLimitModel();
                                    CreditLimitMdl.totalAgentAmount = totalAgentAmount;
                                    result = isEnoughCreditTermsAndLimit(CreditLimitMdl);
                                    if (!result.result)
                                    {
                                        return Utils.getErrorRes(result.rescode, result.resdesc);
                                    }
                                }
                                else
                                {
                                    writeLog("Balance NOT Enough = Agent ID : " + agentID.ToString() + " | Balance : " + avlBal.ToString());

                                    rescode = "10";
                                    resdecs = "Insufficient amount. Please load your balance.";

                                    return Utils.getErrorRes(rescode, resdecs);
                                }
                                #endregion
                            }
                        }
                        #endregion
                    }
                    else
                    {
                        rescode = "01";
                        resdecs = "Invalid Services";
                        return Utils.getErrorRes(rescode, resdecs);
                    }
                }

                string inqResString = string.Empty;
                writeLog("This is Telenor BroadBand.");
                if (IsTokenNullOrExpire(Token))
                {
                    Token = GetOAuthToken();
                }
                TelenorBBReq ebatelenorbbreq = new TelenorBBReq();
                ebatelenorbbreq.Channel = ConfigurationManager.AppSettings["TelenorBBChannelCode"].ToString();
                ebatelenorbbreq.Token = Token.Token;
                ebatelenorbbreq.RegisteredMobileNo = ref1;
                var json_serializer1 = new JavaScriptSerializer();

                string jsonReq = json_serializer1.Serialize(ebatelenorbbreq);
                writeLog("EBA TelenorBB JasonReq:" + jsonReq);
                string url = ConfigurationManager.AppSettings["TelenorBBInquiryUrl"].ToString();
                TelenorBBRes telenorbbres = new TelenorBBRes();
                string responseData = string.Empty;
                SSLPost post = new SSLPost();

                if (post.postDataCanalPlus(url, jsonReq, out responseData, out errMsg))
                {
                    var json_serializerpinres = new JavaScriptSerializer();
                    telenorbbres = json_serializerpinres.Deserialize<TelenorBBRes>(responseData);

                    if (telenorbbres.ResponseCode == "0" && telenorbbres.ResponseDescription == "Success")
                    {
                        rescode = "00";
                        resdecs = "Success";

                        TelenorBBInquiryResModel inqRes = new TelenorBBInquiryResModel();
                        inqRes.ResCode = rescode;
                        inqRes.ResDesc = resdecs;
                        inqRes.taxID = taxID;
                        inqRes.merchantname = merchantname;
                        inqRes.merchantlogo = merchantlogo;
                        inqRes.billername = billerName;
                        inqRes.billerlogo = billerLogo;
                        inqRes.ref1 = telenorbbres.RegisteredMobileNo;
                        inqRes.ref1Name = ref1Name; // Register Mobile No
                        inqRes.ref2 = string.Empty;
                        inqRes.ref2Name = ref2Name;
                        inqRes.ref3 = telenorbbres.CustomerID;
                        inqRes.ref3Name = ref3Name;
                        inqRes.ref4 = Utils.ReplaceAmpersandString(telenorbbres.CustomerName);
                        inqRes.ref4Name = string.Empty;
                        inqRes.ref5 = ref5;
                        inqRes.ref5Name = ref5Name;
                        inqRes.ResponseCPEList = telenorbbres.CPE;
                        inqRes.amount = amount;
                        inqRes.serviceFee = serviceFee;
                        inqRes.status = status;
                        inqRes.expiry = expiry;
                        inqRes.productDescription = productdesc;
                        inqResString = Utils.getTelenorBBList(inqRes);
                        return inqResString;

                    }
                    else
                    {
                        writeLog("Error in TelenorBB Inquiry Res:" + errMsg);
                        return Utils.getErrorRes(telenorbbres.ResponseCode, telenorbbres.ResponseDescription);
                    }

                }
                else
                {
                    writeLog("Error Posting To Telenor Broad Band:" + errMsg);
                    return Utils.getErrorRes("06", errMsg);
                }

            }
        }
        catch (Exception ex)
        {
            writeLog("TelenorBBInquiryReq Error : " + ex.ToString());
            return Utils.getErrorRes("06", ex.ToString());
        }
    }

    public string FtthOrWtthInquiry(string reqXml)
    {
        try
        {
            var code = string.Empty;
            var desp = string.Empty;
            var version = string.Empty;
            var ts = string.Empty;
            var email = string.Empty;
            var password = string.Empty;

            var ref1 = string.Empty;
            var ref2 = string.Empty;
            var ref3 = string.Empty;
            var ref4 = string.Empty;
            var ref5 = string.Empty;
            var ref1Name = string.Empty;
            var ref2Name = string.Empty;
            var ref3Name = string.Empty;
            var ref4Name = string.Empty;
            var ref5Name = string.Empty;
            var amount = string.Empty;
            var inquirytype = string.Empty;
            var locLatitude = string.Empty;
            var locLongitude = string.Empty;
            var rescode = string.Empty;
            var resdecs = string.Empty;
            var merchantname = string.Empty;
            var merchantid = string.Empty;
            var merchantlogo = string.Empty;
            var productdesc = string.Empty;
            var status = string.Empty;
            var expiry = string.Empty;
            var taxID = string.Empty;
            var MapTaxID = string.Empty;

            var messageid = string.Empty;
            var requestedby = string.Empty;
            var hashvalue = string.Empty;
            var invoiceno = string.Empty;
            var isAgreement = "N";
            var response = "";
            var topupType = "";
            var TodayTxnCount = string.Empty;
            var TodayTxnAmount = string.Empty;
            var totalAgentAmount = string.Empty;
            var totalAmount = string.Empty;
            var qr = string.Empty;
            var taxxid = string.Empty;
            var canalPlusReqType = string.Empty;
            var sessionID = string.Empty;
            var partnerCode = string.Empty;
            var customerID = string.Empty;
            var URL = string.Empty;
            var imgURL = string.Empty;
            var mobileNumber = string.Empty;
            var errmsg = string.Empty;
            var billerid = string.Empty;
            var billerCode = string.Empty;

            var ebaUrl = string.Empty;
            var ht = Utils.getHTableFromXML(reqXml);

            if (!IsValidateFtthOrWtthInquiryReq(ht, out code, out desp, out version, out ts, out messageid, out email, out password, out requestedby, out taxID, out mobileNumber, out MapTaxID))
            {
                return Utils.getErrorRes(code, desp);
            }

            if (MapTaxID == ConfigurationManager.AppSettings["FtthMapTaxId"].ToString())
            {
                writeLog("$$$$$$$$$$$$$$$$$$ FTTH Inquiry Request $$$$$$$$$$$$$$$$$$");
                writeLog("REQ XML : " + reqXml);
                ebaUrl = ConfigurationManager.AppSettings["FtthInquiryUrl"].ToString();
                billerCode = ConfigurationManager.AppSettings["FtthBillerCode"].ToString();
            }

            if (MapTaxID == ConfigurationManager.AppSettings["WtthMapTaxId"].ToString())
            {
                writeLog("$$$$$$$$$$$$$$$$$$ WTTH Inquiry Request $$$$$$$$$$$$$$$$$$");
                writeLog("REQ XML : " + reqXml);
                ebaUrl = ConfigurationManager.AppSettings["WtthInquiryUrl"].ToString();
                billerCode = ConfigurationManager.AppSettings["WtthBillerCode"].ToString();
            }

            DataSet dsBiller = null;
            if (_agentWCF.checkBillerID(taxID, agentID, email, out dsBiller, out errmsg))
            {
                if (dsBiller.Tables[0].Rows.Count > 0)
                {
                    if (!string.IsNullOrEmpty(dsBiller.Tables[0].Rows[0]["BILLERID"].ToString()))
                    {
                        billerid = dsBiller.Tables[0].Rows[0]["BILLERID"].ToString();
                    }

                    if (!string.IsNullOrEmpty(dsBiller.Tables[0].Rows[0]["BILLERNAME"].ToString()))
                    {
                        billerName = dsBiller.Tables[0].Rows[0]["BILLERNAME"].ToString();
                    }

                    if (!string.IsNullOrEmpty(dsBiller.Tables[0].Rows[0]["BILLERLOGO"].ToString()))
                    {
                        billerLogo = Convert.ToBase64String((byte[])dsBiller.Tables[0].Rows[0]["BILLERLOGO"]);
                    }

                    imgURL = ConfigurationManager.AppSettings["BillerLogoPath"] + dsBiller.Tables[0].Rows[0]["BILLERID"].ToString() + ".png";

                    serviceFlatFee = dsBiller.Tables[0].Rows[0]["SERVICEFLATFEE"].ToString();
                    servicePercent = dsBiller.Tables[0].Rows[0]["SERVICEPERCENTFEE"].ToString();
                    agentFlatFee = dsBiller.Tables[0].Rows[0]["AGENTFLATFEE"].ToString();
                    agentPercent = dsBiller.Tables[0].Rows[0]["AGENTPERCENTFEE"].ToString();
                    oneStopFlatFee = dsBiller.Tables[0].Rows[0]["ONESTOPFLATFEE"].ToString();
                    oneStopPercent = dsBiller.Tables[0].Rows[0]["ONESTOPPERCENTFEE"].ToString();

                    #region <-- Add By Tz To check Credit terms and Limited For Non Balance Agent -->

                    if (string.IsNullOrEmpty(ref1)) ref1 = dsBiller.Tables[0].Rows[0]["REFID1"].ToString(); //Added By hnt 25-Mar-2015

                    creditlimit = dsBiller.Tables[0].Rows[0]["CREDITLIMIT"].ToString();
                    creditterm = dsBiller.Tables[0].Rows[0]["CREDITTERM"].ToString();
                    credittemrstart = dsBiller.Tables[0].Rows[0]["CREDITTERMSTART"].ToString();
                    isAutoCreditReset = dsBiller.Tables[0].Rows[0]["ISAUTORESETCREDIT"] == DBNull.Value ? "N" : dsBiller.Tables[0].Rows[0]["ISAUTORESETCREDIT"].ToString();
                    isSendCreditResetEmail = dsBiller.Tables[0].Rows[0]["ISSENDCREDITRESETEMAIL"] == DBNull.Value ? "N" : dsBiller.Tables[0].Rows[0]["ISSENDCREDITRESETEMAIL"].ToString();
                    isAgreement = dsBiller.Tables[0].Rows[0]["AGREEMENTTYPE"].ToString();

                    if (dsBiller.Tables[1].Rows.Count > 0)
                    {
                        TodayTxnCount = String.IsNullOrEmpty(dsBiller.Tables[1].Rows[0]["TODAYTXNCOUNT"].ToString()) ? "0" : dsBiller.Tables[1].Rows[0]["TODAYTXNCOUNT"].ToString();
                        TodayTxnAmount = String.IsNullOrEmpty(dsBiller.Tables[1].Rows[0]["TODAYTXNAMOUNT"].ToString()) ? "0" : dsBiller.Tables[1].Rows[0]["TODAYTXNAMOUNT"].ToString();
                    }

                    if (dsBiller.Tables[2].Rows.Count > 0)
                    {
                        totalAgentAmount = String.IsNullOrEmpty(dsBiller.Tables[2].Rows[0]["AGENTAMOUNT"].ToString()) ? "0" : dsBiller.Tables[2].Rows[0]["AGENTAMOUNT"].ToString();
                    }

                    if (String.IsNullOrEmpty(amount))
                    {
                        amount = "0";
                    }

                    if (string.IsNullOrEmpty(serviceFlatFee))
                    {
                        serviceFlatFee = "0";
                    }

                    if (string.IsNullOrEmpty(servicePercent))
                    {
                        servicePercent = "0";
                    }

                    if (string.IsNullOrEmpty(agentFlatFee))
                    {
                        agentFlatFee = "0";
                    }

                    if (string.IsNullOrEmpty(agentPercent))
                    {
                        agentPercent = "0";
                    }

                    if (string.IsNullOrEmpty(creditterm))
                    {
                        creditterm = "0";
                    }

                    if (string.IsNullOrEmpty(creditlimit))
                    {
                        creditlimit = "0.00";
                    }

                    writeLog("Service Percent : " + servicePercent + ", Service Flat Fee : " + serviceFlatFee + " Amount : " + amount);
                    serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                    serviceFee = serviceFeeDbl.ToString("###0.00");

                    totalAmount = (double.Parse(amount) + serviceFeeDbl).ToString("###0.00");

                    oneStopFeeDbl = Utils.getFeeNotRound(double.Parse(amount), float.Parse(oneStopPercent), double.Parse(oneStopFlatFee));
                    oneStopFee = oneStopFeeDbl.ToString("###0.00");

                    agentFeeDbl = Utils.getFeeNotRound(double.Parse(amount), float.Parse(agentPercent), double.Parse(agentFlatFee));
                    agentAmount = double.Parse(amount) - agentFeeDbl;

                    agentAmount += oneStopFeeDbl;

                    writeLog("Amount : " + amount + " | ServiceFee : " + serviceFee + " | AgentFee : " + agentFee + " | 1-Stop Fee : " + oneStopFee.ToString() + " | AgentAmount : " + agentAmount);

                    #endregion
                }
                else
                {
                    rescode = "01";
                    resdecs = "Invalid Services";
                    return Utils.getErrorRes(rescode, resdecs);
                }
            }

            var ebaResponse = GetInquiryResponseForFtthOrWtth(ebaUrl, mobileNumber, billerCode).Result;

            if (ebaResponse == null)
            {
                writeLog("Error in TelenorFtthorWtth Inquiry Res:" + "eba response is empty");
                return Utils.getErrorRes("06", "eba response is empty");
            }

            if (ebaResponse.TransactionStatus == "0")
            {
                var data = JsonConvert.DeserializeObject<InquiryEbaResponse>(ebaResponse.Detail);
                data.Plans = data.Plans.Replace(@"\", " ");
                var plans = JsonConvert.DeserializeObject<List<Plans>>(data.Plans);
                data.Packages = plans;

                var responseModel = new FtthOrWtthInquiryResponse();
                responseModel.ResCode = "00";
                responseModel.ResDesc = "Success";
                responseModel.version = version;
                responseModel.billerlogo = billerLogo;
                responseModel.billername = billerName;
                responseModel.merchantlogo = merchantlogo;
                responseModel.merchantname = merchantname;
                responseModel.serviceFee = serviceFlatFee;
                responseModel.servicePercentFee = servicePercent;
                responseModel.taxID = taxID;
                responseModel.RegisteredMobielNo = mobileNumber;
                responseModel.InquiryDetails = data;
                return Utils.GetFtthOrWtthInquiryList(responseModel);
            }

            if (ebaResponse != null && ebaResponse.TransactionStatus != "0")
            {
                writeLog("Error in TelenorFtthorWtth Inquiry Res:" + ebaResponse.ErrorMessage);
                return Utils.getErrorRes("06", ebaResponse.ErrorMessage);
            }

        }
        catch (Exception ex)
        {
            writeLog("TelenorFtthorWtth Error : " + ex.ToString());
            return Utils.getErrorRes("06", ex.ToString());
        }
        return string.Empty;
    }

    public string MptPackageInquiry(string reqXml)
    {
        try
        {
            var version = string.Empty;
            var email = string.Empty;

            var ref1 = string.Empty;
            var amount = string.Empty;
            var rescode = string.Empty;
            var resdecs = string.Empty;
            var taxID = string.Empty;
            var MapTaxID = string.Empty;
            var isAgreement = "N";
            var response = "";
            var topupType = "";
            var TodayTxnCount = string.Empty;
            var TodayTxnAmount = string.Empty;
            var totalAgentAmount = string.Empty;
            var errmsg = string.Empty;
            var code = string.Empty;
            var desp = string.Empty;
            var ts = string.Empty;
            var messageid = string.Empty;
            var password = string.Empty;
            var requestedby = string.Empty;
            var ht = Utils.getHTableFromXML(reqXml);

            if (!IsValidateMptDataPackageInquiryReq(ht, out code, out desp, out version, out ts, out messageid, out email, out password, out requestedby, out taxID, out MapTaxID))
            {
                return Utils.getErrorRes(code, desp);
            }

            if (MapTaxID != ConfigurationManager.AppSettings["MptDataPackage"].ToString())
            {
                writeLog("$$$$$$$$$$$$$$$$$$ Invalid Data Package Inquiry Request for MPT $$$$$$$$$$$$$$$$$$");
                return Utils.getErrorRes(NearMeResponseCode.Failed, "Invalid Data Package Inquiry Request for MPT");
            }

            if (MapTaxID == ConfigurationManager.AppSettings["MptDataPackage"].ToString())
            {
                writeLog("$$$$$$$$$$$$$$$$$$ MPT Data Package Inquiry Request $$$$$$$$$$$$$$$$$$");
                writeLog("REQ XML : " + reqXml);
            }

            DataSet dsBiller = null;
            if (_agentWCF.checkBillerIDWithSourceName(taxID, agentID, email, out dsBiller, out errmsg))
            {
                if (dsBiller.Tables[0].Rows.Count > 0)
                {
                    if (!string.IsNullOrEmpty(dsBiller.Tables[0].Rows[0]["BILLERNAME"].ToString()))
                    {
                        billerName = dsBiller.Tables[0].Rows[0]["BILLERNAME"].ToString();
                    }
                    billerSource = dsBiller.Tables[0].Rows[0]["SOURCE"].ToString();

                    if (!string.IsNullOrEmpty(dsBiller.Tables[0].Rows[0]["BILLERLOGO"].ToString()))
                    {
                        billerLogo = Convert.ToBase64String((byte[])dsBiller.Tables[0].Rows[0]["BILLERLOGO"]);
                    }

                    serviceFlatFee = dsBiller.Tables[0].Rows[0]["SERVICEFLATFEE"].ToString();
                    servicePercent = dsBiller.Tables[0].Rows[0]["SERVICEPERCENTFEE"].ToString();
                    agentFlatFee = dsBiller.Tables[0].Rows[0]["AGENTFLATFEE"].ToString();
                    agentPercent = dsBiller.Tables[0].Rows[0]["AGENTPERCENTFEE"].ToString();
                    oneStopFlatFee = dsBiller.Tables[0].Rows[0]["ONESTOPFLATFEE"].ToString();
                    oneStopPercent = dsBiller.Tables[0].Rows[0]["ONESTOPPERCENTFEE"].ToString();

                    #region <-- Add By Tz To check Credit terms and Limited For Non Balance Agent -->

                    creditlimit = dsBiller.Tables[0].Rows[0]["CREDITLIMIT"].ToString();
                    creditterm = dsBiller.Tables[0].Rows[0]["CREDITTERM"].ToString();
                    credittemrstart = dsBiller.Tables[0].Rows[0]["CREDITTERMSTART"].ToString();
                    isAutoCreditReset = dsBiller.Tables[0].Rows[0]["ISAUTORESETCREDIT"] == DBNull.Value ? "N" : dsBiller.Tables[0].Rows[0]["ISAUTORESETCREDIT"].ToString();
                    isSendCreditResetEmail = dsBiller.Tables[0].Rows[0]["ISSENDCREDITRESETEMAIL"] == DBNull.Value ? "N" : dsBiller.Tables[0].Rows[0]["ISSENDCREDITRESETEMAIL"].ToString();

                    if (dsBiller.Tables[1].Rows.Count > 0)
                    {
                        TodayTxnCount = String.IsNullOrEmpty(dsBiller.Tables[1].Rows[0]["TODAYTXNCOUNT"].ToString()) ? "0" : dsBiller.Tables[1].Rows[0]["TODAYTXNCOUNT"].ToString();
                        TodayTxnAmount = String.IsNullOrEmpty(dsBiller.Tables[1].Rows[0]["TODAYTXNAMOUNT"].ToString()) ? "0" : dsBiller.Tables[1].Rows[0]["TODAYTXNAMOUNT"].ToString();
                    }

                    if (dsBiller.Tables[2].Rows.Count > 0)
                    {
                        totalAgentAmount = String.IsNullOrEmpty(dsBiller.Tables[2].Rows[0]["AGENTAMOUNT"].ToString()) ? "0" : dsBiller.Tables[2].Rows[0]["AGENTAMOUNT"].ToString();
                    }

                    if (String.IsNullOrEmpty(amount))
                    {
                        amount = "0";
                    }

                    if (string.IsNullOrEmpty(serviceFlatFee))
                    {
                        serviceFlatFee = "0";
                    }

                    if (string.IsNullOrEmpty(servicePercent))
                    {
                        servicePercent = "0";
                    }

                    if (string.IsNullOrEmpty(agentFlatFee))
                    {
                        agentFlatFee = "0";
                    }

                    if (string.IsNullOrEmpty(agentPercent))
                    {
                        agentPercent = "0";
                    }

                    if (string.IsNullOrEmpty(creditterm))
                    {
                        creditterm = "0";
                    }

                    if (string.IsNullOrEmpty(creditlimit))
                    {
                        creditlimit = "0.00";
                    }

                    writeLog("Service Percent : " + servicePercent + ", Service Flat Fee : " + serviceFlatFee + " Amount : " + amount);
                    serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                    serviceFee = serviceFeeDbl.ToString("###0.00");

                    oneStopFeeDbl = Utils.getFeeNotRound(double.Parse(amount), float.Parse(oneStopPercent), double.Parse(oneStopFlatFee));
                    oneStopFee = oneStopFeeDbl.ToString("###0.00");

                    agentFeeDbl = Utils.getFeeNotRound(double.Parse(amount), float.Parse(agentPercent), double.Parse(agentFlatFee));
                    agentAmount = double.Parse(amount) - agentFeeDbl;

                    agentAmount += oneStopFeeDbl;

                    writeLog("Amount : " + amount + " | ServiceFee : " + serviceFee + " | AgentFee : " + agentFee + " | 1-Stop Fee : " + oneStopFee.ToString() + " | AgentAmount : " + agentAmount);

                    #endregion
                }
                else
                {
                    rescode = "01";
                    resdecs = "Invalid Services";
                    return Utils.getErrorRes(rescode, resdecs);
                }
            }
            var billerCode = ConfigurationManager.AppSettings["MptBillerCode"].ToString();

            // For GET Provider
            if (billerSource.ToUpper() == BillerConstants.GET)
            {
                TelCoGETManager telCoGetManager = new TelCoGETManager();
                var packageList = telCoGetManager.InquiryForDataPack(TelCoProviderEnum.MPT.ToString());

                if (packageList.Count == 0)
                {
                    writeLog("Error in Mpt Data Package Inquiry Res: GET response is empty");
                    return Utils.getErrorRes("06", "Processing is failed because of internal server error, please try agian.");
                }

                var packages = new List<packageList>();

                foreach (var package in packageList)
                {
                    var pack = new packageList();
                    pack.packageCode = package.Code;
                    pack.packageName = package.Name;
                    pack.price = package.Price;

                    packages.Add(pack);
                }

                InquiryMptDataPackageResponse dataPackResponse = new InquiryMptDataPackageResponse()
                {
                    TransactionStatus = "0",
                    ErrorCode = "00",
                    ErrorMessage = string.Empty,
                    PartnerAmount = 0,
                    TransactionAmount = 0
                };


                var responseModel = new MptDataPackageInquiryResponse();
                responseModel.ResCode = "00";
                responseModel.ResDesc = "Success";
                responseModel.version = version;
                responseModel.billerlogo = billerLogo;
                responseModel.billername = billerName;
                responseModel.serviceFee = serviceFlatFee;
                responseModel.servicePercentFee = servicePercent;
                responseModel.taxID = taxID;
                responseModel.PackageDetails = dataPackResponse;
                responseModel.PackageLists = packages;

                return Utils.GetMptDataPackageInquiryList(responseModel);
            }
            // For EBA Provider
            else if (billerSource.ToUpper() == BillerConstants.EBA)
            {
                var ebaResponse = GetDataPackages(billerCode).Result;

                if (ebaResponse == null)
                {
                    writeLog("Error in Mpt Data Package Inquiry Res:" + "eba response is empty");
                    return Utils.getErrorRes("06", "Processing is failed because of internal server error, please try agian.");
                }

                if (ebaResponse.TransactionStatus == "0")
                {
                    var data = JsonConvert.DeserializeObject<Data>(ebaResponse.Detail);
                    var packageList = JsonConvert.DeserializeObject<dynamic>(data.DataPack);
                    var plist = new List<packageList>();

                    foreach (var each in packageList.packageList)
                    {
                        var p = new packageList();
                        p.packageCode = each.packageCode;
                        p.packageName = each.packageName;
                        p.price = each.price;

                        plist.Add(p);
                    }

                    var responseModel = new MptDataPackageInquiryResponse();
                    responseModel.ResCode = "00";
                    responseModel.ResDesc = "Success";
                    responseModel.version = version;
                    responseModel.billerlogo = billerLogo;
                    responseModel.billername = billerName;
                    responseModel.serviceFee = serviceFlatFee;
                    responseModel.servicePercentFee = servicePercent;
                    responseModel.taxID = taxID;
                    responseModel.PackageDetails = ebaResponse;
                    responseModel.PackageLists = plist;

                    return Utils.GetMptDataPackageInquiryList(responseModel);
                }

                if (ebaResponse != null && ebaResponse.TransactionStatus != "0")
                {
                    writeLog("Error in Mpt Data Package Inquiry Res:" + ebaResponse.ErrorMessage);
                    return Utils.getErrorRes(ebaResponse.ErrorCode, ebaResponse.ErrorMessage);
                }
            }
            else
            {
                writeLog("Invalid MPT data package provider!");
                return Utils.getErrorRes(NearMeResponseCode.InvalidReq, "Invalid MPT data package provider!");
            }

        }
        catch (Exception ex)
        {
            writeLog("Mpt Data Package Error : " + ex.ToString());
            return Utils.getErrorRes("06", ex.ToString());
        }

        return string.Empty;
    }

    public string ParamiGasPackageInquiry(string reqXml)
    {
        try
        {
            var version = string.Empty;
            var email = string.Empty;

            var amount = string.Empty;
            var rescode = string.Empty;
            var resdecs = string.Empty;
            var taxID = string.Empty;
            var MapTaxID = string.Empty;
            var isAgreement = "N";
            var TodayTxnCount = string.Empty;
            var TodayTxnAmount = string.Empty;
            var totalAgentAmount = string.Empty;
            var errmsg = string.Empty;
            var code = string.Empty;
            var desp = string.Empty;
            var ts = string.Empty;
            var messageid = string.Empty;
            var password = string.Empty;
            var requestedby = string.Empty;
            var ht = Utils.getHTableFromXML(reqXml);

            if (!IsValidateParamiGasInquiryReq(ht, out code, out desp, out version, out ts, out messageid, out email, out password, out requestedby, out taxID, out MapTaxID))
            {
                return Utils.getErrorRes(code, desp);
            }

            if (MapTaxID == ConfigurationManager.AppSettings["ParamiGasMapTaxId"].ToString())
            {
                writeLog("$$$$$$$$$$$$$$$$$$ Parami Gas Package Inquiry Request $$$$$$$$$$$$$$$$$$");
                writeLog("REQ XML : " + reqXml);
            }

            DataSet dsBiller = null;
            if (_agentWCF.checkBillerID(taxID, agentID, email, out dsBiller, out errmsg))
            {
                var billerTable = dsBiller.Tables[0];
                if (billerTable.Rows.Count > 0)
                {
                    var biller = billerTable.Rows[0];
                    if (!string.IsNullOrEmpty(biller["BILLERNAME"].ToString()))
                    {
                        billerName = biller["BILLERNAME"].ToString();
                    }

                    if (!string.IsNullOrEmpty(biller["BILLERLOGO"].ToString()))
                    {
                        billerLogo = Convert.ToBase64String((byte[])biller["BILLERLOGO"]);
                    }

                    serviceFlatFee = biller["SERVICEFLATFEE"].ToString();
                    servicePercent = biller["SERVICEPERCENTFEE"].ToString();
                    agentFlatFee = biller["AGENTFLATFEE"].ToString();
                    agentPercent = biller["AGENTPERCENTFEE"].ToString();
                    oneStopFlatFee = biller["ONESTOPFLATFEE"].ToString();
                    oneStopPercent = biller["ONESTOPPERCENTFEE"].ToString();

                    #region <-- Add By Tz To check Credit terms and Limited For Non Balance Agent -->
                    creditlimit = biller["CREDITLIMIT"].ToString();
                    creditterm = biller["CREDITTERM"].ToString();
                    credittemrstart = biller["CREDITTERMSTART"].ToString();
                    isAutoCreditReset = biller["ISAUTORESETCREDIT"] == DBNull.Value ? "N" : biller["ISAUTORESETCREDIT"].ToString();
                    isSendCreditResetEmail = biller["ISSENDCREDITRESETEMAIL"] == DBNull.Value ? "N" : biller["ISSENDCREDITRESETEMAIL"].ToString();
                    isAgreement = biller["AGREEMENTTYPE"].ToString();

                    var txnTable = dsBiller.Tables[1];
                    if (txnTable.Rows.Count > 0)
                    {
                        var txnData = txnTable.Rows[0];
                        TodayTxnCount = string.IsNullOrEmpty(txnData["TODAYTXNCOUNT"].ToString()) ? "0" : txnData["TODAYTXNCOUNT"].ToString();
                        TodayTxnAmount = string.IsNullOrEmpty(txnData["TODAYTXNAMOUNT"].ToString()) ? "0" : txnData["TODAYTXNAMOUNT"].ToString();
                    }

                    var agentTable = dsBiller.Tables[2];
                    if (agentTable.Rows.Count > 0)
                    {
                        var agentData = agentTable.Rows[0];
                        totalAgentAmount = string.IsNullOrEmpty(agentData["AGENTAMOUNT"].ToString()) ? "0" : agentData["AGENTAMOUNT"].ToString();
                    }

                    if (string.IsNullOrEmpty(amount))
                    {
                        amount = "0";
                    }

                    if (string.IsNullOrEmpty(serviceFlatFee))
                    {
                        serviceFlatFee = "0";
                    }

                    if (string.IsNullOrEmpty(servicePercent))
                    {
                        servicePercent = "0";
                    }

                    if (string.IsNullOrEmpty(agentFlatFee))
                    {
                        agentFlatFee = "0";
                    }

                    if (string.IsNullOrEmpty(agentPercent))
                    {
                        agentPercent = "0";
                    }

                    if (string.IsNullOrEmpty(creditterm))
                    {
                        creditterm = "0";
                    }

                    if (string.IsNullOrEmpty(creditlimit))
                    {
                        creditlimit = "0.00";
                    }

                    writeLog("Service Percent : " + servicePercent + ", Service Flat Fee : " + serviceFlatFee + " Amount : " + amount);
                    serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                    serviceFee = serviceFeeDbl.ToString("###0.00");

                    oneStopFeeDbl = Utils.getFeeNotRound(double.Parse(amount), float.Parse(oneStopPercent), double.Parse(oneStopFlatFee));
                    oneStopFee = oneStopFeeDbl.ToString("###0.00");

                    agentFeeDbl = Utils.getFeeNotRound(double.Parse(amount), float.Parse(agentPercent), double.Parse(agentFlatFee));
                    agentAmount = double.Parse(amount) - agentFeeDbl;

                    agentAmount += oneStopFeeDbl;

                    writeLog("Amount : " + amount + " | ServiceFee : " + serviceFee + " | AgentFee : " + agentFee + " | 1-Stop Fee : " + oneStopFee.ToString() + " | AgentAmount : " + agentAmount);

                    #endregion

                    #region <-- Add By Tz Check Credit Limit and Terms For Non Balance Agent -->

                    if (isAgreement == "Y")
                    {
                        writeLog("Agent Total Amount : " + totalAgentAmount);
                        writeLog("AGREEMENT TYPE is Y. Balance will not be needed.");
                        writeLog("Credit Limit Start:" + credittemrstart);
                        writeLog("Credit Limit:" + creditlimit);
                        writeLog("Creditterm:" + creditterm);
                        CreditLimitResultModel result = new CreditLimitResultModel();
                        CreditLimitModel CreditLimitMdl = new CreditLimitModel();
                        CreditLimitMdl.totalAgentAmount = totalAgentAmount;
                        result = isEnoughCreditTermsAndLimit(CreditLimitMdl);
                        if (!result.result)
                        {
                            return Utils.getErrorRes(result.rescode, result.resdesc);
                        }

                    }
                    else
                    {
                        writeLog("Agent Total Amount : " + totalAgentAmount);
                        writeLog("AGREEMENT TYPE is N. Balance will be needed.");
                        writeLog("Credit Limit Start:" + credittemrstart);
                        writeLog("Credit Limit:" + creditlimit);
                        writeLog("Creditterm:" + creditterm);
                        double avlBal = 0;
                        double ledBal = 0;

                        #region <-- Balance Base -->

                        writeLog("AGREEMENT TYPE is N. Balance must be available.");
                        if (!_agentWCF.getBalance(agentID, out avlBal, out ledBal))
                        {
                            writeLog("Error in getBalance");
                        }

                        if (avlBal >= agentAmount)
                        {
                            writeLog("Balance Enough = Agent ID : " + agentID.ToString() + " | Balance : " + avlBal.ToString());

                            CreditLimitResultModel result = new CreditLimitResultModel();
                            CreditLimitModel CreditLimitMdl = new CreditLimitModel();
                            CreditLimitMdl.totalAgentAmount = totalAgentAmount;
                            result = isEnoughCreditTermsAndLimit(CreditLimitMdl);
                            if (!result.result)
                            {
                                return Utils.getErrorRes(result.rescode, result.resdesc);
                            }
                        }
                        else
                        {
                            writeLog("Balance NOT Enough = Agent ID : " + agentID.ToString() + " | Balance : " + avlBal.ToString());

                            rescode = "10";
                            resdecs = "Insufficient amount. Please load your balance.";

                            return Utils.getErrorRes(rescode, resdecs);
                        }

                        #endregion
                    }

                    #endregion
                }
                else
                {
                    rescode = "01";
                    resdecs = "Invalid Services";
                    return Utils.getErrorRes(rescode, resdecs);
                }
            }

            var ebaResponse = GetParamiGasPackages().Result;

            if (ebaResponse == null)
            {
                writeLog("Error in Mpt Data Package Inquiry Res:" + "eba response is empty");
                return Utils.getErrorRes("06", "Processing is failed because of internal server error, please try agian.");
            }

            if (ebaResponse.TransactionStatus == "0")
            {
                var data = JsonConvert.DeserializeObject<ParamiData>(ebaResponse.Detail);
                var packageList = JsonConvert.DeserializeObject<dynamic>(data.Package);
                var plist = new List<ParamiPackageList>();

                foreach (var each in packageList.packageList)
                {
                    var p = new ParamiPackageList();
                    p.packageCode = each.packageCode;
                    p.price = each.price;

                    plist.Add(p);
                }


                var responseModel = new ParamiGasInquiryResponse();
                responseModel.ResCode = "00";
                responseModel.ResDesc = "Success";
                responseModel.version = version;
                responseModel.billerlogo = billerLogo;
                responseModel.billername = billerName;
                responseModel.serviceFlatFee = serviceFlatFee;
                responseModel.servicePercentFee = servicePercent;
                responseModel.taxID = taxID;
                responseModel.PackageDetails = plist;

                return Utils.GetParamiGasPackageList(responseModel);
            }

            if (ebaResponse != null && ebaResponse.TransactionStatus != "0")
            {
                writeLog("Error in Mpt Data Package Inquiry Res:" + ebaResponse.ErrorMessage);
                return Utils.getErrorRes(ebaResponse.ErrorCode, ebaResponse.ErrorMessage);
            }

        }
        catch (Exception ex)
        {
            writeLog("Mpt Data Package Error : " + ex.ToString());
            return Utils.getErrorRes("06", ex.ToString());
        }

        return string.Empty;
    }

    public string GetGiftCardDenoList(string taxId)
    {
        var billerCode = GetBillerCode(taxId);

        writeLog("BillerCode is : " + billerCode);

        if (!string.IsNullOrEmpty(billerCode))
        {
            var ebaResponse = GetDenoListForGiftCard(billerCode).Result;

            if (ebaResponse == null)
            {
                writeLog("Eba response is empty for deno list.");
                return string.Empty;
            }

            if (ebaResponse.ErrorCode != "00")
            {
                writeLog(ebaResponse.ErrorMessage);
                return string.Empty;
            }

            return ebaResponse.Detail;
        }

        return string.Empty;
    }

    public string GetProductList(string taxId)
    {
        try
        {
            var rescode = string.Empty;
            var resdecs = string.Empty;
            var errmsg = string.Empty;
            string billerCode = GetBillerCode(taxId);

            writeLog("$$$$$$$$$$$$$$$$$$$$$$$ Start GetProductList For TaxId : " + taxId + "$$$$$$$$$$$$$$$$$$$$$$$");
            string result = string.Empty;

            if (string.IsNullOrWhiteSpace(billerCode))
            {
                rescode = "06";
                resdecs = "Invalid Services due to empty BillerCode";
                writeLog("Error in Inquiry : " + resdecs);
                return Utils.getErrorRes(rescode, resdecs);
            }
                       
            if (taxId == ConfigurationManager.AppSettings["AtomDataPackTaxId"].ToString())
            {
                return GetInquiryForATOMDataPackage(taxId,billerCode);
            }
            else
            {
                return GetInquiryForEBA(taxId, billerCode);              
            }                      
        }
        catch (Exception ex)
        {
            writeLog(string.Format("Error in GetProductList: {0}", ex.ToString()));
        }
        finally
        {
            writeLog("$$$$$$$$$$$$$$$$$$$$$$$ End GetProductList $$$$$$$$$$$$$$$$$$$$$$$");
        }

        return string.Empty;
    }

    public string OoredooPackageInquiry(string reqXml)
    {
        try
        {
            var version = string.Empty;
            var email = string.Empty;

            var ref1 = string.Empty;
            var amount = string.Empty;
            var rescode = string.Empty;
            var resdecs = string.Empty;
            var taxID = string.Empty;
            var MapTaxID = string.Empty;
            var TodayTxnCount = string.Empty;
            var TodayTxnAmount = string.Empty;
            var totalAgentAmount = string.Empty;
            var totalAmount = string.Empty;
            var errmsg = string.Empty;
            var code = string.Empty;
            var desp = string.Empty;
            var ts = string.Empty;
            var messageid = string.Empty;
            var password = string.Empty;
            var requestedby = string.Empty;
            var ht = Utils.getHTableFromXML(reqXml);

            if (!IsValidateMptDataPackageInquiryReq(ht, out code, out desp, out version, out ts, out messageid, out email, out password, out requestedby, out taxID, out MapTaxID))
            {
                return Utils.getErrorRes(code, desp);
            }

            if (MapTaxID != ConfigurationManager.AppSettings["OoredooDataPackage"].ToString())
            {
                writeLog("$$$$$$$$$$$$$$$$$$ Invalid Data Package Inquiry Request for Ooredoo $$$$$$$$$$$$$$$$$$");
                return Utils.getErrorRes(NearMeResponseCode.Failed, "Invalid Data Package Inquiry Request for Ooredoo");
            }

            if (MapTaxID == ConfigurationManager.AppSettings["OoredooDataPackage"].ToString())
            {
                writeLog("$$$$$$$$$$$$$$$$$$ Ooredoo Data Package Inquiry Request $$$$$$$$$$$$$$$$$$");
                writeLog("REQ XML : " + reqXml);
            }

            DataSet dsBiller = null;
            if (_agentWCF.checkBillerIDWithSourceName(taxID, agentID, email, out dsBiller, out errmsg))
            {
                var billerTable = dsBiller.Tables[0];
                if (billerTable.Rows.Count > 0)
                {
                    var biller = billerTable.Rows[0];
                    if (!string.IsNullOrEmpty(biller["BILLERNAME"].ToString()))
                    {
                        billerName = biller["BILLERNAME"].ToString();
                    }

                    billerSource = dsBiller.Tables[0].Rows[0]["SOURCE"].ToString();

                    if (!string.IsNullOrEmpty(biller["BILLERLOGO"].ToString()))
                    {
                        billerLogo = Convert.ToBase64String((byte[])biller["BILLERLOGO"]);
                    }

                    serviceFlatFee = biller["SERVICEFLATFEE"].ToString();
                    servicePercent = biller["SERVICEPERCENTFEE"].ToString();
                    agentFlatFee = biller["AGENTFLATFEE"].ToString();
                    agentPercent = biller["AGENTPERCENTFEE"].ToString();
                    oneStopFlatFee = biller["ONESTOPFLATFEE"].ToString();
                    oneStopPercent = biller["ONESTOPPERCENTFEE"].ToString();

                    #region <-- Add By Tz To check Credit terms and Limited For Non Balance Agent -->

                    creditlimit = biller["CREDITLIMIT"].ToString();
                    creditterm = biller["CREDITTERM"].ToString();
                    credittemrstart = biller["CREDITTERMSTART"].ToString();
                    isAutoCreditReset = biller["ISAUTORESETCREDIT"] == DBNull.Value ? "N" : biller["ISAUTORESETCREDIT"].ToString();
                    isSendCreditResetEmail = biller["ISSENDCREDITRESETEMAIL"] == DBNull.Value ? "N" : biller["ISSENDCREDITRESETEMAIL"].ToString();

                    var txnTable = dsBiller.Tables[1];
                    if (txnTable.Rows.Count > 0)
                    {
                        var txnData = txnTable.Rows[0];
                        TodayTxnCount = String.IsNullOrEmpty(txnData["TODAYTXNCOUNT"].ToString()) ? "0" : txnData["TODAYTXNCOUNT"].ToString();
                        TodayTxnAmount = String.IsNullOrEmpty(txnData["TODAYTXNAMOUNT"].ToString()) ? "0" : txnData["TODAYTXNAMOUNT"].ToString();
                    }

                    var agentTable = dsBiller.Tables[2];
                    if (agentTable.Rows.Count > 0)
                    {
                        var agentData = agentTable.Rows[0];
                        totalAgentAmount = String.IsNullOrEmpty(agentData["AGENTAMOUNT"].ToString()) ? "0" : agentData["AGENTAMOUNT"].ToString();
                    }

                    if (String.IsNullOrEmpty(amount))
                    {
                        amount = "0";
                    }

                    if (string.IsNullOrEmpty(serviceFlatFee))
                    {
                        serviceFlatFee = "0";
                    }

                    if (string.IsNullOrEmpty(servicePercent))
                    {
                        servicePercent = "0";
                    }

                    if (string.IsNullOrEmpty(agentFlatFee))
                    {
                        agentFlatFee = "0";
                    }

                    if (string.IsNullOrEmpty(agentPercent))
                    {
                        agentPercent = "0";
                    }

                    if (string.IsNullOrEmpty(creditterm))
                    {
                        creditterm = "0";
                    }

                    if (string.IsNullOrEmpty(creditlimit))
                    {
                        creditlimit = "0.00";
                    }

                    writeLog("Service Percent : " + servicePercent + ", Service Flat Fee : " + serviceFlatFee + " Amount : " + amount);
                    serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                    serviceFee = serviceFeeDbl.ToString("###0.00");

                    oneStopFeeDbl = Utils.getFeeNotRound(double.Parse(amount), float.Parse(oneStopPercent), double.Parse(oneStopFlatFee));
                    oneStopFee = oneStopFeeDbl.ToString("###0.00");

                    agentFeeDbl = Utils.getFeeNotRound(double.Parse(amount), float.Parse(agentPercent), double.Parse(agentFlatFee));
                    agentAmount = double.Parse(amount) - agentFeeDbl;

                    agentAmount += oneStopFeeDbl;

                    writeLog("Amount : " + amount + " | ServiceFee : " + serviceFee + " | AgentFee : " + agentFee + " | 1-Stop Fee : " + oneStopFee.ToString() + " | AgentAmount : " + agentAmount);

                    #endregion
                }
                else
                {
                    rescode = "01";
                    resdecs = "Invalid Services";
                    return Utils.getErrorRes(rescode, resdecs);
                }
            }
            var billerCode = ConfigurationManager.AppSettings["OoredooBillerCode"].ToString();

            // For GET Provider
            if (billerSource.ToUpper() == BillerConstants.GET)
            {
                TelCoGETManager telCoGetManager = new TelCoGETManager();
                var packageList = telCoGetManager.InquiryForDataPack(TelCoProviderEnum.Ooredoo.ToString());

                if (packageList.Count == 0)
                {
                    writeLog("Error in Ooredoo Data Package Inquiry Res: GET response is empty");
                    return Utils.getErrorRes("06", "Processing is failed because of internal server error, please try agian.");
                }

                var packages = new List<OoredooPackages>();

                foreach (var package in packageList)
                {
                    var pack = new OoredooPackages();
                    pack.offerID = package.Code;
                    pack.offerName = package.Name;
                    pack.validity = package.Validity;
                    pack.price = package.Price.ToString();

                    packages.Add(pack);
                }

                InquiryMptDataPackageResponse dataPackResponse = new InquiryMptDataPackageResponse()
                {
                    TransactionStatus = "0",
                    ErrorCode = "00",
                    ErrorMessage = string.Empty,
                    PartnerAmount = 0,
                    TransactionAmount = 0
                };


                var responseModel = new OoredooDataPackageInquiryResponse();
                responseModel.ResCode = "00";
                responseModel.ResDesc = "Success";
                responseModel.version = version;
                responseModel.billerlogo = billerLogo;
                responseModel.billername = billerName;
                responseModel.serviceFee = serviceFlatFee;
                responseModel.servicePercentFee = servicePercent;
                responseModel.taxID = taxID;
                responseModel.PackageDetails = dataPackResponse;
                responseModel.PackageLists = packages;

                return Utils.GetOoredooDataPackageInquiryList(responseModel);
            }
            // For EBA Provider
            else if (billerSource.ToUpper() == BillerConstants.EBA)
            {
                var ebaResponse = GetDataPackages(billerCode).Result;

                if (ebaResponse == null)
                {
                    writeLog("Error in Ooredoo Data Package Inquiry Res:" + "eba response is empty");
                    return Utils.getErrorRes("06", "Processing is failed because of internal server error, please try agian.");
                }

                if (ebaResponse.TransactionStatus == "0")
                {
                    var data = JsonConvert.DeserializeObject<Data>(ebaResponse.Detail);
                    var packageList = JsonConvert.DeserializeObject<dynamic>(data.DataPack);
                    var plist = new List<OoredooPackages>();

                    foreach (var each in packageList.PackageList)
                    {
                        var p = new OoredooPackages();
                        p.offerID = each.OfferID;
                        p.offerName = each.OfferName;
                        p.validity = each.Validity;
                        p.price = each.Price;
                        plist.Add(p);
                    }

                    var responseModel = new OoredooDataPackageInquiryResponse();
                    responseModel.ResCode = "00";
                    responseModel.ResDesc = "Success";
                    responseModel.version = version;
                    responseModel.billerlogo = billerLogo;
                    responseModel.billername = billerName;
                    responseModel.serviceFee = serviceFlatFee;
                    responseModel.servicePercentFee = servicePercent;
                    responseModel.taxID = taxID;
                    responseModel.PackageDetails = ebaResponse;
                    responseModel.PackageLists = plist;

                    return Utils.GetOoredooDataPackageInquiryList(responseModel);
                }

                if (ebaResponse != null && ebaResponse.TransactionStatus != "0")
                {
                    writeLog("Error in Ooredoo Data Package Inquiry Res:" + ebaResponse.ErrorMessage);
                    return Utils.getErrorRes(ebaResponse.ErrorCode, ebaResponse.ErrorMessage);
                }
            }
            else
            {
                writeLog("Invalid Ooredoo data package provider!");
                return Utils.getErrorRes(NearMeResponseCode.InvalidReq, "Invalid Ooredoo data package provider!");
            }
        }
        catch (Exception ex)
        {
            writeLog("Ooredoo Data Package Error : " + ex.ToString());
            return Utils.getErrorRes("06", ex.ToString());
        }

        return string.Empty;
    }

    public string MyTelPackageInquiry(string reqXml)
    {
        try
        {
            var version = string.Empty;
            var email = string.Empty;

            var amount = string.Empty;
            var rescode = string.Empty;
            var resdecs = string.Empty;
            var taxID = string.Empty;
            var MapTaxID = string.Empty;
            var TodayTxnCount = string.Empty;
            var TodayTxnAmount = string.Empty;
            var totalAgentAmount = string.Empty;
            var errmsg = string.Empty;
            var code = string.Empty;
            var desp = string.Empty;
            var ts = string.Empty;
            var messageid = string.Empty;
            var password = string.Empty;
            var requestedby = string.Empty;
            var ht = Utils.getHTableFromXML(reqXml);

            if (!IsValidateMptDataPackageInquiryReq(ht, out code, out desp, out version, out ts, out messageid, out email, out password, out requestedby, out taxID, out MapTaxID))
            {
                return Utils.getErrorRes(code, desp);
            }

            if (MapTaxID != ConfigurationManager.AppSettings["MyTelDataPackage"].ToString())
            {
                writeLog("$$$$$$$$$$$$$$$$$$ Invalid Data Package Inquiry Request for MyTel $$$$$$$$$$$$$$$$$$");
                return Utils.getErrorRes(NearMeResponseCode.Failed, "Invalid Data Package Inquiry Request for MyTel");
            }

            writeLog("$$$$$$$$$$$$$$$$$$ MyTel Data Package Inquiry Request $$$$$$$$$$$$$$$$$$");
            writeLog("REQ XML : " + reqXml);

            DataSet dsBiller = null;

            if (_agentWCF.checkBillerIDWithSourceName(taxID, agentID, email, out dsBiller, out errmsg))
            {
                var billerTable = dsBiller.Tables[0];
                if (billerTable.Rows.Count > 0)
                {
                    var biller = billerTable.Rows[0];
                    if (!string.IsNullOrEmpty(biller["BILLERNAME"].ToString()))
                    {
                        billerName = biller["BILLERNAME"].ToString();
                    }

                    billerSource = dsBiller.Tables[0].Rows[0]["SOURCE"].ToString();

                    if (string.IsNullOrWhiteSpace(billerSource) || billerSource != BillerConstants.EBA)
                    {
                        rescode = "01";
                        resdecs = "Invalid Biller Provider";
                        writeLog("Error for MyTel Inquiry : " + resdecs);
                        return Utils.getErrorRes(rescode, resdecs);
                    }

                    if (!string.IsNullOrEmpty(biller["BILLERLOGO"].ToString()))
                    {
                        billerLogo = Convert.ToBase64String((byte[])biller["BILLERLOGO"]);
                    }

                    serviceFlatFee = biller["SERVICEFLATFEE"].ToString();
                    servicePercent = biller["SERVICEPERCENTFEE"].ToString();
                    agentFlatFee = biller["AGENTFLATFEE"].ToString();
                    agentPercent = biller["AGENTPERCENTFEE"].ToString();
                    oneStopFlatFee = biller["ONESTOPFLATFEE"].ToString();
                    oneStopPercent = biller["ONESTOPPERCENTFEE"].ToString();

                    #region <-- Add By Tz To check Credit terms and Limited For Non Balance Agent -->

                    creditlimit = biller["CREDITLIMIT"].ToString();
                    creditterm = biller["CREDITTERM"].ToString();
                    credittemrstart = biller["CREDITTERMSTART"].ToString();
                    isAutoCreditReset = biller["ISAUTORESETCREDIT"] == DBNull.Value ? "N" : biller["ISAUTORESETCREDIT"].ToString();
                    isSendCreditResetEmail = biller["ISSENDCREDITRESETEMAIL"] == DBNull.Value ? "N" : biller["ISSENDCREDITRESETEMAIL"].ToString();

                    var txnTable = dsBiller.Tables[1];
                    if (txnTable.Rows.Count > 0)
                    {
                        var txnData = txnTable.Rows[0];
                        TodayTxnCount = String.IsNullOrEmpty(txnData["TODAYTXNCOUNT"].ToString()) ? "0" : txnData["TODAYTXNCOUNT"].ToString();
                        TodayTxnAmount = String.IsNullOrEmpty(txnData["TODAYTXNAMOUNT"].ToString()) ? "0" : txnData["TODAYTXNAMOUNT"].ToString();
                    }

                    var agentTable = dsBiller.Tables[2];
                    if (agentTable.Rows.Count > 0)
                    {
                        var agentData = agentTable.Rows[0];
                        totalAgentAmount = String.IsNullOrEmpty(agentData["AGENTAMOUNT"].ToString()) ? "0" : agentData["AGENTAMOUNT"].ToString();
                    }

                    if (String.IsNullOrEmpty(amount))
                    {
                        amount = "0";
                    }

                    if (string.IsNullOrEmpty(serviceFlatFee))
                    {
                        serviceFlatFee = "0";
                    }

                    if (string.IsNullOrEmpty(servicePercent))
                    {
                        servicePercent = "0";
                    }

                    if (string.IsNullOrEmpty(agentFlatFee))
                    {
                        agentFlatFee = "0";
                    }

                    if (string.IsNullOrEmpty(agentPercent))
                    {
                        agentPercent = "0";
                    }

                    if (string.IsNullOrEmpty(creditterm))
                    {
                        creditterm = "0";
                    }

                    if (string.IsNullOrEmpty(creditlimit))
                    {
                        creditlimit = "0.00";
                    }

                    writeLog("Service Percent : " + servicePercent + ", Service Flat Fee : " + serviceFlatFee + " Amount : " + amount);
                    serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                    serviceFee = serviceFeeDbl.ToString("###0.00");

                    oneStopFeeDbl = Utils.getFeeNotRound(double.Parse(amount), float.Parse(oneStopPercent), double.Parse(oneStopFlatFee));
                    oneStopFee = oneStopFeeDbl.ToString("###0.00");

                    agentFeeDbl = Utils.getFeeNotRound(double.Parse(amount), float.Parse(agentPercent), double.Parse(agentFlatFee));
                    agentAmount = double.Parse(amount) - agentFeeDbl;

                    agentAmount += oneStopFeeDbl;

                    writeLog("Amount : " + amount + " | ServiceFee : " + serviceFee + " | AgentFee : " + agentFee + " | 1-Stop Fee : " + oneStopFee.ToString() + " | AgentAmount : " + agentAmount);

                    #endregion
                }
                else
                {
                    rescode = "01";
                    resdecs = "Invalid Services";
                    return Utils.getErrorRes(rescode, resdecs);
                }
            }

            var billerCode = ConfigurationManager.AppSettings["MyTelBillerCode"].ToString();
            var ebaResponse = GetDataPackages(billerCode).Result;

            if (ebaResponse == null)
            {
                writeLog("Error in MyTel Data Package Inquiry Res:" + "eba response is empty");
                return Utils.getErrorRes("06", "Processing is failed because of internal server error, please try agian.");
            }

            if (ebaResponse.TransactionStatus == "0")
            {
                var data = JsonConvert.DeserializeObject<Data>(ebaResponse.Detail);
                var packageList = JsonConvert.DeserializeObject<dynamic>(data.DataPack);
                var plist = new List<packageList>();

                foreach (var each in packageList.packageList)
                {
                    var p = new packageList();
                    p.packageName = each.packageName;
                    p.price = each.price;
                    plist.Add(p);
                }

                var responseModel = new MptDataPackageInquiryResponse();
                responseModel.ResCode = "00";
                responseModel.ResDesc = "Success";
                responseModel.version = version;
                responseModel.billerlogo = billerLogo;
                responseModel.billername = billerName;
                responseModel.serviceFee = serviceFlatFee;
                responseModel.servicePercentFee = servicePercent;
                responseModel.taxID = taxID;
                responseModel.PackageDetails = ebaResponse;
                responseModel.PackageLists = plist;

                return Utils.GetMyTelDataPackageInquiryList(responseModel);
            }

            if (ebaResponse.TransactionStatus != "0")
            {
                writeLog("Error in MyTel Data Package Inquiry Res:" + ebaResponse.ErrorMessage);
                return Utils.getErrorRes(ebaResponse.ErrorCode, ebaResponse.ErrorMessage);
            }

        }
        catch (Exception ex)
        {
            writeLog("MyTel Data Package Error : " + ex.ToString());
            return Utils.getErrorRes("06", ex.ToString());
        }

        return string.Empty;
    }

    public string EventInquiry(string reqXml)
    {
        try
        {
            var version = string.Empty;
            var email = string.Empty;

            var ref1 = string.Empty;
            var amount = string.Empty;
            var rescode = string.Empty;
            var resdecs = string.Empty;
            var taxID = string.Empty;
            var MapTaxID = string.Empty;
            var isAgreement = "N";
            var response = "";
            var topupType = "";
            var TodayTxnCount = string.Empty;
            var TodayTxnAmount = string.Empty;
            var totalAgentAmount = string.Empty;
            var totalAmount = string.Empty;
            var imgURL = string.Empty;
            var errmsg = string.Empty;
            var billerid = string.Empty;
            var code = string.Empty;
            var desp = string.Empty;
            var ts = string.Empty;
            var messageid = string.Empty;
            var password = string.Empty;
            var requestedby = string.Empty;
            var eventId = string.Empty;
            var ht = Utils.getHTableFromXML(reqXml);

            if (MapTaxID == ConfigurationManager.AppSettings["MyanPwel"].ToString())
            {
                writeLog("$$$$$$$$$$$$$$$$$$ MyanPwel Event List Request $$$$$$$$$$$$$$$$$$");
                writeLog("REQ XML : " + reqXml);
            }

            if (!IsValidateGetEventListInquiryReq(ht, out code, out desp, out version, out ts, out messageid, out email, out password, out requestedby, out taxID, out MapTaxID, out eventId))
            {
                return Utils.getErrorRes(code, desp);
            }

            DataSet dsBiller = null;

            if (_agentWCF.checkBillerID(taxID, agentID, email, out dsBiller, out errmsg))
            {
                if (dsBiller.Tables[0].Rows.Count > 0)
                {
                    if (!string.IsNullOrEmpty(dsBiller.Tables[0].Rows[0]["BILLERID"].ToString()))
                    {
                        billerid = dsBiller.Tables[0].Rows[0]["BILLERID"].ToString();
                    }

                    if (!string.IsNullOrEmpty(dsBiller.Tables[0].Rows[0]["BILLERNAME"].ToString()))
                    {
                        billerName = dsBiller.Tables[0].Rows[0]["BILLERNAME"].ToString();
                    }

                    if (!string.IsNullOrEmpty(dsBiller.Tables[0].Rows[0]["BILLERLOGO"].ToString()))
                    {
                        billerLogo = Convert.ToBase64String((byte[])dsBiller.Tables[0].Rows[0]["BILLERLOGO"]);
                    }

                    imgURL = ConfigurationManager.AppSettings["BillerLogoPath"] + dsBiller.Tables[0].Rows[0]["BILLERID"].ToString() + ".png";

                    serviceFlatFee = dsBiller.Tables[0].Rows[0]["SERVICEFLATFEE"].ToString();
                    servicePercent = dsBiller.Tables[0].Rows[0]["SERVICEPERCENTFEE"].ToString();
                    agentFlatFee = dsBiller.Tables[0].Rows[0]["AGENTFLATFEE"].ToString();
                    agentPercent = dsBiller.Tables[0].Rows[0]["AGENTPERCENTFEE"].ToString();
                    oneStopFlatFee = dsBiller.Tables[0].Rows[0]["ONESTOPFLATFEE"].ToString();
                    oneStopPercent = dsBiller.Tables[0].Rows[0]["ONESTOPPERCENTFEE"].ToString();

                    #region <-- Add By Tz To check Credit terms and Limited For Non Balance Agent -->

                    if (string.IsNullOrEmpty(ref1)) ref1 = dsBiller.Tables[0].Rows[0]["REFID1"].ToString(); //Added By hnt 25-Mar-2015

                    creditlimit = dsBiller.Tables[0].Rows[0]["CREDITLIMIT"].ToString();
                    creditterm = dsBiller.Tables[0].Rows[0]["CREDITTERM"].ToString();
                    credittemrstart = dsBiller.Tables[0].Rows[0]["CREDITTERMSTART"].ToString();
                    isAutoCreditReset = dsBiller.Tables[0].Rows[0]["ISAUTORESETCREDIT"] == DBNull.Value ? "N" : dsBiller.Tables[0].Rows[0]["ISAUTORESETCREDIT"].ToString();
                    isSendCreditResetEmail = dsBiller.Tables[0].Rows[0]["ISSENDCREDITRESETEMAIL"] == DBNull.Value ? "N" : dsBiller.Tables[0].Rows[0]["ISSENDCREDITRESETEMAIL"].ToString();
                    isAgreement = dsBiller.Tables[0].Rows[0]["AGREEMENTTYPE"].ToString();

                    if (dsBiller.Tables[1].Rows.Count > 0)
                    {
                        TodayTxnCount = String.IsNullOrEmpty(dsBiller.Tables[1].Rows[0]["TODAYTXNCOUNT"].ToString()) ? "0" : dsBiller.Tables[1].Rows[0]["TODAYTXNCOUNT"].ToString();
                        TodayTxnAmount = String.IsNullOrEmpty(dsBiller.Tables[1].Rows[0]["TODAYTXNAMOUNT"].ToString()) ? "0" : dsBiller.Tables[1].Rows[0]["TODAYTXNAMOUNT"].ToString();
                    }

                    if (dsBiller.Tables[2].Rows.Count > 0)
                    {
                        totalAgentAmount = String.IsNullOrEmpty(dsBiller.Tables[2].Rows[0]["AGENTAMOUNT"].ToString()) ? "0" : dsBiller.Tables[2].Rows[0]["AGENTAMOUNT"].ToString();
                    }

                    if (String.IsNullOrEmpty(amount))
                    {
                        amount = "0";
                    }

                    if (string.IsNullOrEmpty(serviceFlatFee))
                    {
                        serviceFlatFee = "0";
                    }

                    if (string.IsNullOrEmpty(servicePercent))
                    {
                        servicePercent = "0";
                    }

                    if (string.IsNullOrEmpty(agentFlatFee))
                    {
                        agentFlatFee = "0";
                    }

                    if (string.IsNullOrEmpty(agentPercent))
                    {
                        agentPercent = "0";
                    }

                    if (string.IsNullOrEmpty(creditterm))
                    {
                        creditterm = "0";
                    }

                    if (string.IsNullOrEmpty(creditlimit))
                    {
                        creditlimit = "0.00";
                    }

                    writeLog("Service Percent : " + servicePercent + ", Service Flat Fee : " + serviceFlatFee + " Amount : " + amount);
                    serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                    serviceFee = serviceFeeDbl.ToString("###0.00");

                    totalAmount = (double.Parse(amount) + serviceFeeDbl).ToString("###0.00");

                    oneStopFeeDbl = Utils.getFeeNotRound(double.Parse(amount), float.Parse(oneStopPercent), double.Parse(oneStopFlatFee));
                    oneStopFee = oneStopFeeDbl.ToString("###0.00");

                    agentFeeDbl = Utils.getFeeNotRound(double.Parse(amount), float.Parse(agentPercent), double.Parse(agentFlatFee));
                    agentAmount = double.Parse(amount) - agentFeeDbl;

                    agentAmount += oneStopFeeDbl;

                    writeLog("Amount : " + amount + " | ServiceFee : " + serviceFee + " | AgentFee : " + agentFee + " | 1-Stop Fee : " + oneStopFee.ToString() + " | AgentAmount : " + agentAmount);

                    #endregion
                }
                else
                {
                    rescode = "01";
                    resdecs = "Invalid Services";
                    return Utils.getErrorRes(rescode, resdecs);
                }
            }

            var billerCode = GetBillerCode(MapTaxID);
            if (!string.IsNullOrEmpty(billerCode))
            {
                var enquiry = EventEnquiry(billerCode, eventId).Result;
                if (enquiry == null)
                {
                    resdecs = "No Response From EBA";
                    rescode = "06";

                    return Utils.getErrorRes(rescode, resdecs);
                }

                if (enquiry.TransactionStatus != "0")
                {
                    return Utils.getErrorRes(enquiry.ErrorCode, enquiry.ErrorMessage);
                }

                var ticketList = JsonConvert.DeserializeObject<dynamic>(enquiry.Detail);
                var list = new List<Ticket>();
                foreach (var each in ticketList.ticketList)
                {
                    var ticket = new Ticket();
                    ticket.ticketId = each.ticketId;
                    ticket.eventTitle = each.eventTitle;
                    ticket.eventId = each.eventId;
                    ticket.ticketType = each.ticketType;
                    ticket.ticketDescription = each.ticketDescription;
                    ticket.availableTicketQty = each.availableTicketQty;
                    ticket.minimumTicketQty = each.minimumTicketQty;
                    ticket.maximumTicketQty = each.maximumTicketQty;
                    ticket.price = each.price;
                    ticket.saleEndDate = each.saleEndDate;

                    list.Add(ticket);
                }

                var responseModel = new EventListResponse();
                responseModel.ResCode = "00";
                responseModel.ResDesc = "Success";
                responseModel.version = version;
                responseModel.billerlogo = billerLogo;
                responseModel.billername = billerName;
                responseModel.serviceFee = serviceFlatFee;
                responseModel.servicePercentFee = servicePercent;
                responseModel.taxID = taxID;
                responseModel.TicketList = list;

                return Utils.EventInquiry(responseModel);
            }
        }
        catch (Exception ex)
        {
            writeLog("Event Inquiry Error : " + ex.ToString());
            return Utils.getErrorRes("06", ex.ToString());
        }

        return string.Empty;
    }

    public string GetAstrologerList(string taxId, string serviceId)
    {
        var billerCode = GetBillerCode(taxId);

        writeLog("BillerCode is : " + billerCode);

        if (!string.IsNullOrEmpty(serviceId))
        {
            var ebaResponse = GetAstrologer(serviceId, billerCode).Result;

            if (ebaResponse == null)
            {
                writeLog("Eba response is empty for list.");
                return string.Empty;
            }

            if (ebaResponse.ErrorCode != "00")
            {
                writeLog(ebaResponse.ErrorMessage);
                return string.Empty;
            }

            return ebaResponse.Detail;
        }

        return string.Empty;
    }


    #region <-- Confirm -->

    public bool InsertTransactionInvoice(string reqXml, long txnID, string paymentMethod)
    {
        writeLog("$$$$$$$$$$$$ This is InsertTransactionInvoice $$$$$$$$$$$$");
        try
        {
            writeLog("InsertTransactionInvoice ReqXml : " + reqXml);

            Hashtable ht = Utils.getHTableFromXML(reqXml);

            List<PGReqConfirmInvoice> lstInvoices = new List<PGReqConfirmInvoice>();
            string ref1 = "";
            string ref2 = "";
            if (ht.ContainsKey("Ref1"))
            {
                ref1 = ht["Ref1"].ToString();
            }
            if (ht.ContainsKey("Ref2"))
            {
                ref2 = ht["Ref2"].ToString();
            }
            if (ht.ContainsKey("Invoices"))
            {
                string lstInvoiceXml = getInvoiceForPG(reqXml);
                lstInvoiceXml = "<Invoices>" + lstInvoiceXml + "</Invoices>";
                XmlSerializer serializer = new XmlSerializer(typeof(Invoices));
                Invoices result;
                using (TextReader reader = new StringReader(lstInvoiceXml))
                {
                    result = new Invoices();
                    result = (Invoices)serializer.Deserialize(reader);
                }

                PGReqConfirmInvoice confirmInvoice;
                foreach (Invoice inv in result.Invoice)
                {
                    confirmInvoice = new PGReqConfirmInvoice
                    {
                        Amount = inv.Amount,
                        InvoiceNumber = inv.InvoiceNumber
                    };

                    lstInvoices.Add(confirmInvoice);
                }

                foreach (PGReqConfirmInvoice invoice in lstInvoices)
                {
                    if (!_agentWCF.insertInvoice(txnID, invoice.InvoiceNumber, double.Parse(invoice.Amount), ref2, paymentMethod, out errMsg))
                    {
                        writeLog("Error in InsertInvoice : " + errMsg);
                        return false;
                    }
                }
            }
            else
            {
                writeLog("Doesn't have Invoice in XML.");
                return false;
            }
            return true;
        }
        catch (Exception ex)
        {
            writeLog("InsertTransactionInvoice Error : " + ex.ToString());
            return false;
        }
    }

    public bool ConfirmRequestToPG(long txnID)
    {
        writeLog("$$$$$$$$$$$$ This is ConfirmRequestToPG $$$$$$$$$$$$");
        try
        {
            string partnerCode = string.Empty;
            string customerID = string.Empty;
            string errMsg = "";
            DataSet ds = new DataSet();

            List<PGReqConfirmInvoice> lstInvoices = new List<PGReqConfirmInvoice>();

            A2AAPIWCF.ServiceClient _agentWCF = new A2AAPIWCF.ServiceClient();

            if (_agentWCF.getCustomerAndInvoiceInfo(txnID, "0", out ds, out errMsg))
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    partnerCode = ds.Tables[0].Rows[0]["AGENTCODE"].ToString();
                    customerID = ds.Tables[0].Rows[0]["CUSTOMERID"].ToString();
                    PGReqConfirmInvoice pgInvoice;

                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        pgInvoice = new PGReqConfirmInvoice();
                        pgInvoice.InvoiceNumber = dr["INVOICENUMBER"].ToString();
                        pgInvoice.PaymentReference = txnID.ToString();
                        pgInvoice.Amount = dr["AMOUNT"].ToString();
                        pgInvoice.PaymentMethod = dr["PAYMENTMETHOD"].ToString();

                        lstInvoices.Add(pgInvoice);
                    }
                }
            }

            string apiUrl = ConfigurationManager.AppSettings["PhatamaGroupAPI"].ToString() + "ConfirmPendingInvoice";
            string apiKey = ConfigurationManager.AppSettings["PhatamaGroupAPIKey"].ToString();

            writeLog("$$$$$$$$$$$$ Phatama Group confirmReq: $$$$$$$$$$$$");
            if (IsTokenNullOrExpire(Token))
            {
                PgToken = GetPGOAuthToken();
            }
            var json_serializer1 = new JavaScriptSerializer();
            var json_serializerpinres = new JavaScriptSerializer();

            SSLPost post = new SSLPost();

            PGConfirmPendingRequest pgConfirmPendingReq = new PGConfirmPendingRequest();
            pgConfirmPendingReq.Token = PgToken.Token;
            pgConfirmPendingReq.PartnerCode = partnerCode;
            pgConfirmPendingReq.CustomerID = customerID;
            pgConfirmPendingReq.Invoices = lstInvoices;

            string parameter = json_serializer1.Serialize(pgConfirmPendingReq);
            writeLog("Phatama Group confirmReq: " + parameter);

            PGConfirmPendingInvoiceResponse pgConfirmPendingInvoiceResp = new PGConfirmPendingInvoiceResponse();
            string responseData = string.Empty;

            if (post.postDataPG(apiUrl, parameter, pgConfirmPendingReq.Token, out responseData, out errMsg))
            {
                writeLog("Phatama Group confirmRes:" + responseData);

                pgConfirmPendingInvoiceResp = json_serializerpinres.Deserialize<PGConfirmPendingInvoiceResponse>(responseData);

                if (pgConfirmPendingInvoiceResp.ErrorCode.Equals("00"))
                {
                    writeLog("Confirm to Phatama Group Success");
                    return true;
                }
                else
                {
                    writeLog("Confirm to Phatama Group Error: " + pgConfirmPendingInvoiceResp.FailReason);
                    return false;
                }
            }
        }
        catch (Exception ex)
        {
            writeLog("Error in ConfirmRequestToPG: " + ex.Message);
        }


        return false;
    }

    // For PAYMENT API
    public bool InsertTransactionForPaymentAPI(string taxID, string agentID, string email, string ref1, string ref2, string amount, string version, string locLatitude, string locLongitude, string productdesc, string appType, string messageid, string paymentMethod, string agentCode, string agentBranchCode, out string agentTxnID)
    {
        try
        {
            writeLog("$$$$$$$$$$$$$$$ InsertTransactionForPaymentAPI $$$$$$$$$$$$$$$");
            agentTxnID = string.Empty;
            string billerid = string.Empty;
            string errmsg = string.Empty;
            string ref3 = string.Empty;
            string ref4 = string.Empty;
            string ref5 = string.Empty;
            double amt = 0;
            string txnFee = string.Empty;
            string rescode = string.Empty;
            string resdecs = string.Empty;
            int batchID = 0;
            long txnID = 0;
            DataSet dsBiller = null;
            string isAgreement = "";
            string transactionDateTime = "";
            double availablebalance = 0;
            double ledgerbalance = 0;

            #region Temp Comment
            //if (ht.ContainsKey("TaxID"))
            //{
            //    taxID = ht["TaxID"].ToString();
            //}
            //if (ht.ContainsKey("Email"))
            //{
            //    email = ht["Email"].ToString();
            //}
            //if (ht.ContainsKey("Ref1"))
            //{
            //    ref1 = ht["Ref1"].ToString();
            //}
            //if (ht.ContainsKey("Ref2"))
            //{
            //    ref2 = ht["Ref2"].ToString();
            //}
            //if (ht.ContainsKey("Amount"))
            //{
            //    amount = ht["Amount"].ToString();
            //}
            //if (ht.ContainsKey("Version"))
            //{
            //    version = ht["Version"].ToString();
            //}
            //if (ht.ContainsKey("LocLatitude"))
            //{
            //    locLatitude = ht["LocLatitude"].ToString();
            //}
            //if (ht.ContainsKey("LocLongitude"))
            //{
            //    locLongitude = ht["LocLongitude"].ToString();
            //}
            //if (ht.ContainsKey("ProductDesc"))
            //{
            //    productdesc = ht["ProductDesc"].ToString();
            //}
            //if (ht.ContainsKey("AppType"))
            //{
            //    appType = ht["AppType"].ToString();
            //}
            //if (ht.ContainsKey("MessageID"))
            //{
            //    messageid = ht["MessageID"].ToString();
            //}
            #endregion
            writeLog("AgentID : " + agentID + "Email : " + email);
            if (_agentWCF.checkBillerID(taxID, int.Parse(agentID), email, out dsBiller, out errmsg))
            {
                writeLog("taxid : " + taxID + ", agentID : " + agentID + ", email : " + email);
                writeLog("dsBiller table count :  " + dsBiller.Tables.Count.ToString() + ", dsBiller Row Count : " + dsBiller.Tables[0].Rows.Count.ToString());
                oneStopFlatFee = dsBiller.Tables[0].Rows[0]["ONESTOPFLATFEE"].ToString();
                oneStopPercent = dsBiller.Tables[0].Rows[0]["ONESTOPPERCENTFEE"].ToString();
                servicePercent = dsBiller.Tables[0].Rows[0]["SERVICEPERCENTFEE"].ToString();
                serviceFlatFee = dsBiller.Tables[0].Rows[0]["SERVICEFLATFEE"].ToString();
                billerFlatFee = dsBiller.Tables[0].Rows[0]["BillerFlatFee"].ToString();
                billerPercentFee = dsBiller.Tables[0].Rows[0]["BillerPercentFee"].ToString();
                billerServiceFlatFee = dsBiller.Tables[0].Rows[0]["BillerServiceFlatFee"].ToString();
                billerServicePercentFee = dsBiller.Tables[0].Rows[0]["BillerServicePercentFee"].ToString();
                isAgreement = dsBiller.Tables[0].Rows[0]["AGREEMENTTYPE"].ToString();
                billerid = Convert.ToString(dsBiller.Tables[0].Rows[0]["BILLERID"]);
                writeLog("$$$$$$$$$$$$$$$ Check Biller Success $$$$$$$$$$$$$$$");
            }
            writeLog("Amount : " + amount);
            amt = double.Parse((double.Parse(amount)).ToString("#,##0.00"));
            writeLog("Amt : " + amt.ToString());
            serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
            serviceFee = serviceFeeDbl.ToString("###0.00");
            oneStopFeeDbl = Utils.getFeeNotRound(double.Parse(amount), float.Parse(oneStopPercent), double.Parse(oneStopFlatFee));
            oneStopFee = oneStopFeeDbl.ToString("###0.00");
            billerAmount = GetBillerAmount(amt);

            writeLog("$$$$$$$$$$$$$$$ Calling insertTransaction $$$$$$$$$$$$$$$");
            #region
            //if (paymentMethod.ToLower() == "123")
            //{
            //    if (!_agentWCF.insertTransactionWithDeductBalance(billerid, int.Parse(agentID), email, "MMK", "MM", ref1, ref2, ref3, ref4, ref5, agentCode, amt, serviceFeeDbl, oneStopFeeDbl, "OVERTHECOUNTER", email, version,
            //                                          locLatitude, locLongitude, productdesc, "", agentBranchCode, "", appType, messageid, isAgreement, agentAmount, out  txnID, out transactionDateTime, out  errMsg, out  batchID, out  availablebalance, out  ledgerbalance))
            //    {
            //        writeLog("Error in insertTransaction with deduct balance : " + errMsg);
            //        rescode = "01";
            //        resdecs = "Error in Transaction";
            //        return false;
            //    }
            //    else
            //    {
            //        writeLog("$$$$$$$$$$$$$$$ insertTransaction with deduct balance Success $$$$$$$$$$$$$$$");
            //        agentTxnID = txnID.ToString();
            //        writeLog("TXN ID : " + txnID.ToString() + " | BILLER ID : " + billerid);
            //        return true;
            //    }    
            //}
            #endregion

            if (!_agentWCF.insertTransaction(billerid, int.Parse(agentID), email, "MMK", "MM", ref1, ref2, ref3, ref4, ref5, agentCode, amt, serviceFeeDbl, oneStopFeeDbl, "OVERTHECOUNTER", email, version,
                                                    locLatitude, locLongitude, productdesc, "", agentBranchCode, "", appType, messageid, billerAmount, BillerDiscountFee, BillerServiceFee, out txnID, out errMsg, out batchID))
            {
                writeLog("Error in insertTransaction : " + errMsg);
                rescode = "01";
                resdecs = "Error in Transaction";
                return false;
            }
            else
            {
                writeLog("$$$$$$$$$$$$$$$ insertTransaction Success $$$$$$$$$$$$$$$");
                agentTxnID = txnID.ToString();
                writeLog("TXN ID : " + txnID.ToString() + " | BILLER ID : " + billerid);
                return true;
            }
        }
        catch (Exception ex)
        {
            writeLog("Error in InsertTransactionForPaymentAPI : " + ex.ToString());
            throw;
        }

    }

    public bool UpdateTransactionForPaymentAPI(long txnID, string email, string ref1, string ref2, string isAgreement, double availablebalance)
    {
        int batchID = 0;
        if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, "", "", ""
                                        , "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
        {
            writeLog("Error in ConfirmUpdate : " + errMsg);
            return false;
        }
        return true;
    }

    public string MerchantAcceptanceReq(string reqXml)
    {
        writeLog("$$$$$$$$$$$$$$$ MerchantAcceptanceReq $$$$$$$$$$$$$$$");
        writeLog("REQ XML : " + reqXml);
        var rescode = string.Empty;
        var resdecs = string.Empty;
        var version = string.Empty;
        var ts = string.Empty;
        var email = string.Empty;
        var password = string.Empty;
        var ref1 = string.Empty;
        var ref2 = string.Empty;
        var ref3 = string.Empty;
        var ref4 = string.Empty;
        var ref5 = string.Empty;
        var amount = string.Empty;
        var productDesc = string.Empty;
        var messageId = string.Empty;
        var LoginType = string.Empty;
        var terminalId = string.Empty;
        var appType = string.Empty;
        var deviceId = string.Empty;
        var merchantFee = 0.0;
        var branchCode = string.Empty;
        var agentCode = string.Empty;
        var agentName = string.Empty;
        var merchantPaymentProfileId = string.Empty;
        var merchantDs = new DataSet();
        string paymentRefNo = string.Empty;
        string paymentType = string.Empty;
        string paymentMode = string.Empty;

        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidateMerchantAcceptanceReq(ht, out rescode, out resdecs, out version, out ts, out email, out password, out messageId, out ref1, out ref2, out ref3,
            out ref4, out ref5, out appType, out amount, out productDesc, out LoginType, out deviceId, out terminalId, out merchantFee, out branchCode, out agentCode,
            out agentName, out merchantPaymentProfileId, out paymentType, out paymentMode))
        {
            return Utils.getErrorRes(rescode, resdecs);
        }

        string status = string.Empty;
        string desc = string.Empty;
        long txnId = 0;
        var errMsg = string.Empty;
        string errmsg = string.Empty;
        var smsMsg = string.Empty;
        var conRes = new ConfirmResponseModel();

        //Get Merchant Name 
        var merchantName = GetMerchantName(paymentType);
        if (string.IsNullOrEmpty(merchantName))
        {
            merchantName = paymentType;
        }

        // Insert Transaction first with 'PR' status if PaymentMode is C2B
        if (paymentMode == ConfigurationManager.AppSettings["PaymentMode_C2B"])
        {
            status = "PR";
            desc = "Processing";
        }
        // Insert Transaction first with 'PE' status if PaymentMode is B2C
        else
        {
            status = "PE";
            desc = "Pending";
        }

        var tmpRef5 = ref5;
        // Do not save ref5 value to database for card payment
        if (paymentMode == ConfigurationManager.AppSettings["PaymentMode_CARD"])
        {
            ref5 = "";
        }

        var profileName = string.Empty;
        if (!_agentWCF.InsertMerchantTransaction(merchantName, agentCode, agentName, branchCode, email, ref1, ref2, paymentType, merchantFee.ToString(), amount, (Convert.ToDouble(amount) - merchantFee).ToString(), status, desc, string.Empty, messageId, deviceId, terminalId, ref5, appType, profileName, out txnId, out errMsg))
        {
            writeLog("Error in InsertMerchantTransaction : " + errMsg);
            var errorMessage = "Transaction Failed";
            return Utils.getErrorRes("06", errorMessage);
        }

        ref5 = tmpRef5;
        var merchantProfile = new EPaymentMerchant();
        try
        {
            if (_agentWCF.GetMerchantPaymentProfile(Convert.ToInt32(merchantPaymentProfileId), out merchantDs, out errMsg))
            {
                var merchantTable = merchantDs.Tables[0];
                var merchant = merchantTable.Rows[0];
                merchantProfile = new EPaymentMerchant
                {
                    ClientId= merchant["ClientId"].ToString(),
                    ClientSecret= merchant["ClientSecret"].ToString(),
                    MerchantId= merchant["MerchantId"].ToString(),
                    SecretKey= merchant["SecretKey"].ToString(),
                    ProfileName = merchant["ProfileName"].ToString(),
                    Terminal= merchant["Terminal"].ToString()
                };
            }

            writeLog("ClientId : " + merchantProfile.ClientId + " ClientSecret : " + merchantProfile.ClientSecret + " MerchantId : " + merchantProfile.MerchantId + " Terminal: " + merchantProfile.Terminal);
            if ((string.IsNullOrEmpty(merchantProfile.ClientSecret) || string.IsNullOrEmpty(merchantProfile.MerchantId)) || 
                (paymentType != ConfigurationManager.AppSettings["PaymentType_SaiSaiPay"] && paymentType != ConfigurationManager.AppSettings["PaymentType_UABPay"] && string.IsNullOrEmpty(merchantProfile.ClientId)))
            {
                desc = "Merchant Credentials are missing.";
                return Utils.getErrorRes("06", desc);
            }


            writeLog("Merchant Credentials are complete");

            if (!CheckFraud(out errmsg, 0, email, merchantPaymentProfileId, branchCode, agentCode, amount.ToString(), paymentType))
            {
                writeLog("Check E-Payment Fraud Fail : " + errMsg);
                rescode = "01";
                resdecs = errmsg;
                status = "RE";


                if (!_agentWCF.UpdateMerchantTransaction(txnId, status, errmsg, paymentRefNo, string.Empty, out errMsg))
                {
                    writeLog("Error in UpdateMerchantTransaction : " + errMsg);
                }
                return Utils.getErrorRes("06", resdecs);
            }


            string code = string.Empty;
            var ePaymentFactory = new EPaymentFactory();
            var ePayment = ePaymentFactory.CreateEPayment(paymentType, paymentMode);
            if (ePayment != null)
            {
                if (paymentType.Equals(BISConstants.MoMoneyPay)) ref2 = deviceId;
                return ePayment.Confirm(merchantProfile, txnId, ref1, ref2, ref3, ref4, ref5, email, password, amount, branchCode, agentName, appType, productDesc);
            }
            if (paymentMode == ConfigurationManager.AppSettings["PaymentMode_B2C"])
            {
                writeLog("Payment Mode is B2C");
                
                if(ePayment!=null)
                {
                    if (paymentType.Equals(BISConstants.MoMoneyPay)) ref2 = deviceId;
                    return ePayment.Confirm(merchantProfile, txnId, ref1, ref2, ref3, ref4, ref5, email, password, amount, branchCode, agentName, appType, productDesc);
                }

                if (paymentType == ConfigurationManager.AppSettings["PaymentType_MSP"])
                {
                    writeLog("This is MSP.");

                    Dictionary<string, string> paymentInfo = new Dictionary<string, string>();
                    paymentInfo.Add("UserTransInfo", ref1);

                    Dictionary<string, string> paymentProfileInfo = new Dictionary<string, string>();
                    paymentProfileInfo.Add("MspUrl", ConfigurationManager.AppSettings["NewMspApiUrl"]);
                    paymentProfileInfo.Add("TokenUrl", ConfigurationManager.AppSettings["NewMspTokenApiUrl"]);
                    paymentProfileInfo.Add("CheckSumUrl", ConfigurationManager.AppSettings["NewMspCheckSumApiUrl"]);
                    paymentProfileInfo.Add("MerchantId", merchantProfile.MerchantId);
                    paymentProfileInfo.Add("ClientId", merchantProfile.ClientId);
                    paymentProfileInfo.Add("ClientSecret", merchantProfile.ClientSecret);

                    MSPInterfaceRequest req = new MSPInterfaceRequest()
                    {
                        NearMePaymentRefNo = "NearMe" + txnId,
                        Amount = Decimal.Parse(amount),
                        PaymentInfo = paymentInfo,
                        PaymentProfileInfo = paymentProfileInfo
                    };

                    string mspReq = JsonConvert.SerializeObject(req);
                    string mspInterfaceUrl = ConfigurationManager.AppSettings["MSPInterfaceUrl"];
                    var msp = new MSP();
                   
                    var mspRes = msp.ConfirmMSP(mspReq, mspInterfaceUrl);

                    if (mspRes.ResCode == "00")
                    {
                        desc = "Approved";
                        status = "AP";
                        paymentRefNo = mspRes.PaymentSchemeRefNo;
                    }
                    else
                    {
                        desc = mspRes.FailReason;
                        status = "RE";
                    }

                    if (!_agentWCF.UpdateMerchantTransaction(txnId, status, desc, paymentRefNo, string.Empty, out errMsg))
                    {
                        writeLog("Error in UpdateMerchantTransaction : " + errMsg);
                        var errorMessage = "Transaction Failed";
                        return Utils.getErrorRes("06", errorMessage);
                    }

                    if (status == "RE")
                    {
                        return Utils.getErrorRes("06", desc);
                    }

                    if (status == "AP" && appType == "MS" && !string.IsNullOrEmpty(ref5))
                    {
                        var sms = new SMSHelper();
                        var msgService = new MessagingService.MessagingServiceClient();
                        smsMsg = sms.GetMerchantMessage(txnId.ToString(), agentName, string.Empty, ref2, "PaymentType", "PaymentCode", string.Empty, string.Empty, ref2, ref1, string.Empty, string.Empty, amount, branchCode);
                        var isSend = msgService.SendSms("", smsMsg, ref5, "NearMe");
                        if (isSend._success)
                        {
                            writeLog("Send sms successfully");
                            _agentWCF.updateSMSStatusforMerchant(Convert.ToInt64(txnId), "Y", out errMsg);
                        }
                    }

                    conRes.email = email;
                    conRes.password = password;
                    conRes.rescode = mspRes.ResCode;
                    conRes.resdesc = mspRes.FailReason;
                    conRes.ref1 = productDesc;
                    conRes.ref2 = ref1;
                    conRes.ref3 = string.Empty;
                    conRes.ref4 = string.Empty;
                    conRes.ref5 = ref5;
                    conRes.ref1Name = "Payment Type";
                    conRes.ref2Name = "Payment Code";
                    conRes.ref3Name = string.Empty;
                    conRes.ref4Name = string.Empty;
                    conRes.ref5Name = "Mobile No.";
                    conRes.txnID = txnId.ToString();
                    conRes.smsMsg = smsMsg;
                    return Utils.GetMerchantAcceptanceRes(conRes);
                }
                else if (paymentType == ConfigurationManager.AppSettings["PaymentType_OK"])
                {
                    writeLog("This is OK$");

                    Dictionary<string, string> paymentInfo = new Dictionary<string, string>();
                    paymentInfo.Add("Remarks", "Testing");
                    paymentInfo.Add("UserTransInfo", ref1);

                    Dictionary<string, string> paymentProfileInfo = new Dictionary<string, string>();
                    paymentProfileInfo.Add("url", ConfigurationManager.AppSettings["OkDollarUrl"]);
                    paymentProfileInfo.Add("IvectorKey", merchantProfile.SecretKey);
                    paymentProfileInfo.Add("ApiKey", merchantProfile.ClientId);
                    paymentProfileInfo.Add("MerchantNumber", merchantProfile.MerchantId);
                    paymentProfileInfo.Add("EncryptionKey", merchantProfile.ClientSecret);

                    OkDollarInterfaceRequest req = new OkDollarInterfaceRequest()
                    {
                        NearMePaymentRefNo = "NearMe" + txnId,
                        Amount = Decimal.Parse(amount),
                        PaymentInfo = paymentInfo,
                        PaymentProfileInfo = paymentProfileInfo
                    };

                    string okReq = JsonConvert.SerializeObject(req);
                    string okInterfaceUrl = ConfigurationManager.AppSettings["OkDollarInterfaceUrl"];
                    OkDollar ok = new OkDollar();
                    var okRes = ok.ConfirmOkDollar(okReq, okInterfaceUrl);

                    if (okRes.ResCode == "00")
                    {
                        status = "AP";
                        desc = "Approved";
                        paymentRefNo = okRes.PaymentSchemeRefNo;
                    }
                    else
                    {
                        status = "RE";
                        desc = okRes.FailReason;
                    }

                    if (!_agentWCF.UpdateMerchantTransaction(txnId, status, desc, paymentRefNo, string.Empty, out errMsg))
                    {
                        writeLog("Error in UpdateMerchantTransaction : " + errMsg);
                        var errorMessage = "Transaction Failed";
                        return Utils.getErrorRes("06", errorMessage);
                    }
                    if (status == "RE")
                    {
                        return Utils.getErrorRes("06", desc);
                    }
                    if (status == "AP" && appType == "MS" && !string.IsNullOrEmpty(ref5))
                    {
                        var sms = new SMSHelper();
                        var msgService = new MessagingService.MessagingServiceClient();
                        smsMsg = sms.GetMerchantMessage(txnId.ToString(), agentName, string.Empty, ref2, "PaymentType", "PaymentCode", string.Empty, string.Empty, ref2, ref1, string.Empty, string.Empty, amount, branchCode);
                        var isSend = msgService.SendSms("", smsMsg, ref5, "NearMe");
                        if (isSend._success)
                        {
                            writeLog("Send sms successfully");
                            _agentWCF.updateSMSStatusforMerchant(Convert.ToInt64(txnId), "Y", out errMsg);
                        }
                    }

                    conRes.email = email;
                    conRes.password = password;
                    conRes.rescode = okRes.ResCode;
                    conRes.resdesc = okRes.FailReason;
                    conRes.ref1 = productDesc;
                    conRes.ref2 = ref1;
                    conRes.ref3 = string.Empty;
                    conRes.ref4 = string.Empty;
                    conRes.ref5 = ref5;
                    conRes.ref1Name = "Payment Type";
                    conRes.ref2Name = string.Empty;
                    conRes.ref3Name = string.Empty;
                    conRes.ref4Name = string.Empty;
                    conRes.ref5Name = "Mobile No.";
                    conRes.txnID = txnId.ToString();
                    conRes.smsMsg = smsMsg;
                    return Utils.GetMerchantAcceptanceRes(conRes);
                }
                else if (paymentType == ConfigurationManager.AppSettings["PaymentType_CitizenPay"])
                {
                    writeLog("This is CitizenPay");

                    Dictionary<string, string> paymentInfo = new Dictionary<string, string>();
                    paymentInfo.Add("QRToken", ref1);

                    Dictionary<string, string> paymentProfileInfo = new Dictionary<string, string>();
                    paymentProfileInfo.Add("SecretKey", merchantProfile.SecretKey);
                    paymentProfileInfo.Add("ClientId", merchantProfile.ClientId);
                    paymentProfileInfo.Add("Merchant", merchantProfile.MerchantId);
                    paymentProfileInfo.Add("ClientSecret", merchantProfile.ClientSecret);
                    paymentProfileInfo.Add("Terminal", merchantProfile.Terminal);

                    CitizenPayInterfaceRequest req = new CitizenPayInterfaceRequest()
                    {
                        NearMePaymentRefNo = "NearMe" + txnId,
                        Amount = Decimal.Parse(amount),
                        PaymentInfo = paymentInfo,
                        PaymentProfileInfo = paymentProfileInfo
                    };

                    string citizenPayReq = JsonConvert.SerializeObject(req);
                    string citizenPayInterfaceUrl = ConfigurationManager.AppSettings["CitizenPayInterfaceUrl"];
                    CitizenPay citizenPay = new CitizenPay();

                    var citizenPayRes = citizenPay.ConfirmCitizenPay(citizenPayReq, citizenPayInterfaceUrl);

                    if (citizenPayRes.ResCode == "00")
                    {
                        status = "AP";
                        desc = "Approved";
                        paymentRefNo = citizenPayRes.PaymentSchemeRefNo;
                    }
                    else
                    {
                        status = "RE";
                        desc = citizenPayRes.FailReason;
                    }

                    if (!_agentWCF.UpdateMerchantTransaction(txnId, status, desc, paymentRefNo, string.Empty, out errMsg))
                    {
                        writeLog("Error in UpdateMerchantTransaction : " + errMsg);
                        var errorMessage = "Transaction Failed";
                        return Utils.getErrorRes("06", errorMessage);
                    }
                    if (status == "RE")
                    {
                        return Utils.getErrorRes("06", desc);
                    }
                    if (status == "AP" && appType == "MS" && !string.IsNullOrEmpty(ref5))
                    {
                        var sms = new SMSHelper();
                        var msgService = new MessagingService.MessagingServiceClient();
                        smsMsg = sms.GetMerchantMessage(txnId.ToString(), agentName, string.Empty, ref2, "PaymentType", "PaymentCode", string.Empty, string.Empty, ref2, ref1, string.Empty, string.Empty, amount, branchCode);
                        var isSend = msgService.SendSms("", smsMsg, ref5, "NearMe");
                        if (isSend._success)
                        {
                            writeLog("Send sms successfully");
                            _agentWCF.updateSMSStatusforMerchant(Convert.ToInt64(txnId), "Y", out errMsg);
                        }
                    }

                    conRes.email = email;
                    conRes.password = password;
                    conRes.rescode = citizenPayRes.ResCode;
                    conRes.resdesc = citizenPayRes.FailReason;
                    conRes.ref1 = productDesc;
                    conRes.ref2 = ref1;
                    conRes.ref3 = string.Empty;
                    conRes.ref4 = string.Empty;
                    conRes.ref5 = ref5;
                    conRes.ref1Name = "Payment Type";
                    conRes.ref2Name = string.Empty;
                    conRes.ref3Name = string.Empty;
                    conRes.ref4Name = string.Empty;
                    conRes.ref5Name = "Mobile No.";
                    conRes.txnID = txnId.ToString();
                    conRes.smsMsg = smsMsg;
                    return Utils.GetMerchantAcceptanceRes(conRes);
                }
                else if (paymentType == ConfigurationManager.AppSettings["PaymentType_SaiSaiPay"])
                {
                    writeLog("This is SaiSaiPay");

                    Dictionary<string, string> paymentInfo = new Dictionary<string, string>();
                    paymentInfo.Add("QrString", ref1);

                    Dictionary<string, string> paymentProfileInfo = new Dictionary<string, string>();
                    paymentProfileInfo.Add("MerchantId", merchantProfile.MerchantId);
                    paymentProfileInfo.Add("ClientSecret", merchantProfile.ClientSecret);
                    paymentProfileInfo.Add("SecretKey", merchantProfile.SecretKey);

                    SaiSaiPayInterfaceRequest req = new SaiSaiPayInterfaceRequest()
                    {
                        NearMePaymentRefNo = "NearMe" + txnId,
                        Amount = Decimal.Parse(amount),
                        PaymentInfo = paymentInfo,
                        PaymentProfileInfo = paymentProfileInfo
                    };

                    string saisaiPayReq = JsonConvert.SerializeObject(req);
                    string saiSaiPayInterfaceUrl = ConfigurationManager.AppSettings["SaiSaiPayInterfaceUrl"];
                    SaiSaiPay saiSaiPay = new SaiSaiPay();
                    var saiSaiPayRes = saiSaiPay.ConfirmSaiSaiPay(saisaiPayReq, saiSaiPayInterfaceUrl);

                    if (saiSaiPayRes.ResCode == "00")
                    {
                        status = "AP";
                        desc = "Approved";
                        paymentRefNo = saiSaiPayRes.PaymentSchemeRefNo;
                    }
                    else
                    {
                        status = "RE";
                        desc = saiSaiPayRes.FailReason;
                    }

                    if (!_agentWCF.UpdateMerchantTransaction(txnId, status, desc, paymentRefNo, string.Empty, out errMsg))
                    {
                        writeLog("Error in UpdateMerchantTransaction : " + errMsg);
                        var errorMessage = "Transaction Failed";
                        return Utils.getErrorRes("06", errorMessage);
                    }
                    if (status == "RE")
                    {
                        return Utils.getErrorRes("06", desc);
                    }
                    if (status == "AP" && appType == "MS" && !string.IsNullOrEmpty(ref5))
                    {
                        var sms = new SMSHelper();
                        var msgService = new MessagingService.MessagingServiceClient();
                        smsMsg = sms.GetMerchantMessage(txnId.ToString(), agentName, string.Empty, ref2, "PaymentType", "PaymentCode", string.Empty, string.Empty, ref2, ref1, string.Empty, string.Empty, amount, branchCode);
                        var isSend = msgService.SendSms("", smsMsg, ref5, "NearMe");
                        if (isSend._success)
                        {
                            writeLog("Send sms successfully");
                            _agentWCF.updateSMSStatusforMerchant(Convert.ToInt64(txnId), "Y", out errMsg);
                        }
                    }
                    conRes.email = email;
                    conRes.password = password;
                    conRes.rescode = saiSaiPayRes.ResCode;
                    conRes.resdesc = saiSaiPayRes.FailReason;
                    conRes.ref1 = productDesc;
                    conRes.ref2 = ref1;
                    conRes.ref3 = string.Empty;
                    conRes.ref4 = string.Empty;
                    conRes.ref5 = ref5;
                    conRes.ref1Name = "Payment Type";
                    conRes.ref2Name = string.Empty;
                    conRes.ref3Name = string.Empty;
                    conRes.ref4Name = string.Empty;
                    conRes.ref5Name = "Mobile No.";
                    conRes.txnID = txnId.ToString();
                    conRes.smsMsg = smsMsg;
                    return Utils.GetMerchantAcceptanceRes(conRes);
                }
                else if (paymentType == ConfigurationManager.AppSettings["PaymentType_UABPay"])
                {

                    writeLog("This is UAB Pay");

                    Dictionary<string, string> paymentInfo = new Dictionary<string, string>();
                    paymentInfo.Add("QrString", ref1);

                    Dictionary<string, string> paymentProfileInfo = new Dictionary<string, string>();
                    paymentProfileInfo.Add("MerchantId", merchantProfile.MerchantId);
                    paymentProfileInfo.Add("ClientSecret", merchantProfile.ClientSecret);
                    paymentProfileInfo.Add("SecretKey", merchantProfile.SecretKey);

                    var request = new UABPayInterfaceRequest()
                    {
                        NearMePaymentRefNo = "NearMe" + txnId,
                        Amount = Decimal.Parse(amount),
                        PaymentInfo = paymentInfo,
                        PaymentProfileInfo = paymentProfileInfo
                    };

                    string uabPayRequest = JsonConvert.SerializeObject(request);
                    string uabPayInterfaceUrl = ConfigurationManager.AppSettings["UABPayInterfaceUrl"];
                    var uabPayManager = new UABPayManager();
                    var uabPayResponse = uabPayManager.ConfirmUABPay(uabPayRequest, uabPayInterfaceUrl);

                    if (uabPayResponse.ResCode == "00")
                    {
                        status = "AP";
                        desc = "Approved";
                        paymentRefNo = uabPayResponse.PaymentSchemeRefNo;
                    }
                    else
                    {
                        status = "RE";
                        desc = uabPayResponse.FailReason;
                    }

                    if (!_agentWCF.UpdateMerchantTransaction(txnId, status, desc, paymentRefNo, string.Empty, out errMsg))
                    {
                        writeLog("Error in UpdateMerchantTransaction : " + errMsg);
                        var errorMessage = "Transaction Failed";
                        return Utils.getErrorRes("06", errorMessage);
                    }
                    if (status == "RE")
                    {
                        return Utils.getErrorRes("06", desc);
                    }
                    if (status == "AP" && appType == "MS" && !string.IsNullOrEmpty(ref5))
                    {
                        var sms = new SMSHelper();
                        var msgService = new MessagingService.MessagingServiceClient();
                        smsMsg = sms.GetMerchantMessage(txnId.ToString(), agentName, string.Empty, ref2, "PaymentType", "PaymentCode", string.Empty, string.Empty, ref2, ref1, string.Empty, string.Empty, amount, branchCode);
                        var isSend = msgService.SendSms("", smsMsg, ref5, "NearMe");
                        if (isSend._success)
                        {
                            writeLog("Send sms successfully");
                            _agentWCF.updateSMSStatusforMerchant(Convert.ToInt64(txnId), "Y", out errMsg);
                        }
                    }
                    conRes.email = email;
                    conRes.password = password;
                    conRes.rescode = uabPayResponse.ResCode;
                    conRes.resdesc = uabPayResponse.FailReason;
                    conRes.ref1 = productDesc;
                    conRes.ref2 = ref1;
                    conRes.ref3 = string.Empty;
                    conRes.ref4 = string.Empty;
                    conRes.ref5 = ref5;
                    conRes.ref1Name = "Payment Type";
                    conRes.ref2Name = string.Empty;
                    conRes.ref3Name = string.Empty;
                    conRes.ref4Name = string.Empty;
                    conRes.ref5Name = "Mobile No.";
                    conRes.txnID = txnId.ToString();
                    conRes.smsMsg = smsMsg;
                    return Utils.GetMerchantAcceptanceRes(conRes);
                }
                else if (paymentType == ConfigurationManager.AppSettings["PaymentType_KBZPay"])
                {
                    writeLog("This is KBZPay");

                    Dictionary<string, string> paymentInfo = new Dictionary<string, string>();
                    paymentInfo.Add("Auth_Code", ref1);

                    Dictionary<string, string> paymentProfileInfo = new Dictionary<string, string>();
                    paymentProfileInfo.Add("MerchantId", merchantProfile.MerchantId);
                    paymentProfileInfo.Add("ClientId", merchantProfile.ClientId);
                    paymentProfileInfo.Add("ClientSecret", merchantProfile.ClientSecret);
                    paymentProfileInfo.Add("SecretKey", merchantProfile.SecretKey);

                    KBZPayInterfaceRequest req = new KBZPayInterfaceRequest()
                    {
                        NearMePaymentRefNo = "NearMe" + txnId,
                        Amount = Decimal.Parse(amount),
                        PaymentInfo = paymentInfo,
                        PaymentProfileInfo = paymentProfileInfo
                    };

                    string kbzPayReq = JsonConvert.SerializeObject(req);
                    string kbzPayInterfaceUrl = ConfigurationManager.AppSettings["KBZPayInterfaceUrl"];
                    KBZPay kbzPay = new KBZPay();
                    var kbzPayRes = kbzPay.ConfirmKBZPay(kbzPayReq, kbzPayInterfaceUrl);

                    if (kbzPayRes.ResCode == "00")
                    {
                        status = "AP";
                        desc = "Approved";
                        paymentRefNo = kbzPayRes.PaymentSchemeRefNo;
                    }
                    else
                    {
                        status = "RE";
                        desc = kbzPayRes.FailReason;
                    }

                    if (!_agentWCF.UpdateMerchantTransaction(txnId, status, desc, paymentRefNo, string.Empty, out errMsg))
                    {
                        writeLog("Error in UpdateMerchantTransaction : " + errMsg);
                        var errorMessage = "Transaction Failed";
                        return Utils.getErrorRes("06", errorMessage);
                    }
                    if (status == "RE")
                    {
                        return Utils.getErrorRes("06", desc);
                    }
                    if (status == "AP" && appType == "MS" && !string.IsNullOrEmpty(ref5))
                    {
                        var sms = new SMSHelper();
                        var msgService = new MessagingService.MessagingServiceClient();
                        smsMsg = sms.GetMerchantMessage(txnId.ToString(), agentName, string.Empty, ref2, "PaymentType", "PaymentCode", string.Empty, string.Empty, ref2, ref1, string.Empty, string.Empty, amount, branchCode);
                        var isSend = msgService.SendSms("", smsMsg, ref5, "NearMe");
                        if (isSend._success)
                        {
                            writeLog("Send sms successfully");
                            _agentWCF.updateSMSStatusforMerchant(Convert.ToInt64(txnId), "Y", out errMsg);
                        }
                    }

                    conRes.email = email;
                    conRes.password = password;
                    conRes.rescode = kbzPayRes.ResCode;
                    conRes.resdesc = kbzPayRes.FailReason;
                    conRes.ref1 = productDesc;
                    conRes.ref2 = ref1;
                    conRes.ref3 = string.Empty;
                    conRes.ref4 = string.Empty;
                    conRes.ref5 = ref5;
                    conRes.ref1Name = "Payment Type";
                    conRes.ref2Name = string.Empty;
                    conRes.ref3Name = string.Empty;
                    conRes.ref4Name = string.Empty;
                    conRes.ref5Name = "Mobile No.";
                    conRes.txnID = txnId.ToString();
                    conRes.smsMsg = smsMsg;
                    return Utils.GetMerchantAcceptanceRes(conRes);
                }
                else if (paymentType == ConfigurationManager.AppSettings["PaymentType_AYAPay"])
                {
                    writeLog("This is AYAPay");

                    Dictionary<string, string> paymentInfo = new Dictionary<string, string>();
                    paymentInfo.Add("qrCode", ref1);

                    Dictionary<string, string> paymentProfileInfo = new Dictionary<string, string>();
                    paymentProfileInfo.Add("shopId", merchantProfile.MerchantId);
                    paymentProfileInfo.Add("phone", merchantProfile.ClientId);
                    paymentProfileInfo.Add("password", merchantProfile.ClientSecret);

                    AyaPayInterfaceRequest req = new AyaPayInterfaceRequest()
                    {
                        NearMePaymentRefNo = ConfigurationManager.AppSettings["Prefix"].ToString() + txnId,
                        Amount = Decimal.Parse(amount),
                        PaymentInfo = paymentInfo,
                        PaymentProfileInfo = paymentProfileInfo
                    };

                    string ayaPayReq = JsonConvert.SerializeObject(req);
                    string ayaPayInterfaceUrl = ConfigurationManager.AppSettings["AYAPayInterfaceUrl"];
                    AyaPay ayaPay = new AyaPay();

                    var ayaPayRes = ayaPay.Confirm(ayaPayReq, ayaPayInterfaceUrl);

                    if (ayaPayRes != null && ayaPayRes.ResCode == "00")
                    {
                        status = "AP";
                        desc = "Approved";
                        paymentRefNo = ayaPayRes.PaymentSchemeRefNo;
                    }
                    else
                    {
                        status = "RE";
                        desc = ayaPayRes.FailReason;
                    }

                    if (!_agentWCF.UpdateMerchantTransaction(txnId, status, desc, paymentRefNo, string.Empty, out errMsg))
                    {
                        writeLog("Error in UpdateMerchantTransaction : " + errMsg);
                        var errorMessage = "Transaction Failed";
                        return Utils.getErrorRes("06", errorMessage);
                    }
                    if (status == "RE")
                    {
                        return Utils.getErrorRes("06", desc);
                    }
                    if (status == "AP" && appType == "MS" && !string.IsNullOrEmpty(ref5))
                    {
                        var sms = new SMSHelper();
                        var msgService = new MessagingService.MessagingServiceClient();
                        smsMsg = sms.GetMerchantMessage(txnId.ToString(), agentName, string.Empty, ref2, "PaymentType", "PaymentCode", string.Empty, string.Empty, ref2, ref1, string.Empty, string.Empty, amount, branchCode);
                        var isSend = msgService.SendSms("", smsMsg, ref5, "NearMe");
                        if (isSend._success)
                        {
                            writeLog("Send sms successfully");
                            _agentWCF.updateSMSStatusforMerchant(Convert.ToInt64(txnId), "Y", out errMsg);
                        }
                    }

                    conRes.email = email;
                    conRes.password = password;
                    conRes.rescode = ayaPayRes.ResCode;
                    conRes.resdesc = ayaPayRes.FailReason;
                    conRes.ref1 = productDesc;
                    conRes.ref2 = ref1;
                    conRes.ref3 = string.Empty;
                    conRes.ref4 = string.Empty;
                    conRes.ref5 = ref5;
                    conRes.ref1Name = "Payment Type";
                    conRes.ref2Name = string.Empty;
                    conRes.ref3Name = string.Empty;
                    conRes.ref4Name = string.Empty;
                    conRes.ref5Name = "Mobile No.";
                    conRes.txnID = txnId.ToString();
                    conRes.smsMsg = smsMsg;
                    return Utils.GetMerchantAcceptanceRes(conRes);
                }
            }
            else if (paymentMode == ConfigurationManager.AppSettings["PaymentMode_C2B"])
            {
                string qr = string.Empty;
                string transExpiredTime = string.Empty;
                var logAppender = "MessageId : " + messageId + " | CB Pay | ";

                if (paymentType == ConfigurationManager.AppSettings["PaymentType_CBPay"])
                {
                    writeLog(logAppender + "This is CBPay.");

                    Dictionary<string, string> paymentProfileInfo = new Dictionary<string, string>();
                    paymentProfileInfo.Add("MerchantId", merchantProfile.MerchantId);
                    paymentProfileInfo.Add("ClientId", merchantProfile.ClientId);
                    paymentProfileInfo.Add("ClientSecret", merchantProfile.ClientSecret);
                    paymentProfileInfo.Add("Terminal", merchantProfile.Terminal);

                    var req = new CBPayInterfaceRequest()
                    {
                        NearMePaymentRefNo = "NearMe" + txnId,
                        Amount = Decimal.Parse(amount),
                        PaymentProfileInfo = paymentProfileInfo
                    };
                    writeLog(logAppender + "QR Request Created");

                    string cbPayReq = JsonConvert.SerializeObject(req);
                    string cbPayInterfaceUrl = ConfigurationManager.AppSettings["CBPayInterfaceUrl"];
                    var cbPay = new CBPay();
                    var cbPayRes = cbPay.ConfirmCBPay(cbPayReq, cbPayInterfaceUrl);
                    writeLog(logAppender + "QR Request Confirmed");
                    var referenceNo = string.Empty;
                    if (cbPayRes.ResCode == "00")
                    {
                        writeLog(logAppender + "QR Confirm Success");
                        status = "PE";
                        desc = "Pending";
                        paymentRefNo = cbPayRes.QrSchemeRefNo;
                        qr = cbPayRes.QrInfo["MerDqrCode"].ToString();
                        transExpiredTime = cbPayRes.QrInfo["TransExpiredTime"].ToString();
                        referenceNo = cbPayRes.ReferenceNo;
                    }
                    else
                    {
                        writeLog(logAppender + "QR Confirm Fail");
                        status = "RE";
                        desc = cbPayRes.FailReason;
                    }

                    if (!_agentWCF.UpdateCBPayMerchantTransaction(txnId, status, desc, paymentRefNo, qr, referenceNo, out errMsg))
                    {
                        writeLog(logAppender + "Error in UpdateCBPayMerchantTransaction : " + errMsg);
                        var errorMessage = "Transaction Failed";
                        return Utils.getErrorRes("06", errorMessage);
                    }

                    writeLog(logAppender + "Transaction Updated");

                    if (status == "RE")
                    {
                        return Utils.getErrorRes("06", desc);
                    }

                    conRes.email = email;
                    conRes.password = password;
                    conRes.rescode = cbPayRes.ResCode;
                    conRes.resdesc = cbPayRes.FailReason;
                    conRes.ref1 = productDesc;
                    conRes.ref2 = qr;
                    conRes.ref3 = string.Empty;
                    conRes.ref4 = transExpiredTime;
                    conRes.ref5 = ref5;
                    conRes.ref1Name = "Payment Type";
                    conRes.ref2Name = "QR";
                    conRes.ref3Name = string.Empty;
                    conRes.ref4Name = "Txn Expired Time";
                    conRes.ref5Name = "Mobile No.";
                    conRes.txnID = txnId.ToString();
                    conRes.smsMsg = smsMsg;
                    return Utils.GetMerchantAcceptanceRes(conRes);
                }
            }
            else if (paymentMode == ConfigurationManager.AppSettings["PaymentMode_CARD"])
            {
                if (paymentType == ConfigurationManager.AppSettings["PaymentType_MPU"] || paymentType == ConfigurationManager.AppSettings["PaymentType_JCB"])
                {
                    writeLog("This is Card Payment");

                    var arr_ref1 = ref1.Split(';');
                    var cardNo = arr_ref1[0];
                    var expiry = arr_ref1[1];
                    string batchNo = "";
                    string traceNo = "";
                    string issuerInsId = "";


                    _agentWCF.GetBatchNBatchNo(out errMsg, out batchNo, out traceNo);

                    _agentWCF.GetIssuerInsId(cardNo, out errMsg, out issuerInsId);

                    Dictionary<string, string> paymentInfo = new Dictionary<string, string>();
                    paymentInfo.Add("cardNo", cardNo);
                    paymentInfo.Add("expiry", expiry);
                    paymentInfo.Add("pin", ref3);
                    paymentInfo.Add("trackData", ref4);
                    paymentInfo.Add("chipData", ref5);
                    paymentInfo.Add("processType", "P");
                    paymentInfo.Add("batchNo", batchNo);
                    paymentInfo.Add("traceNo", traceNo);
                    paymentInfo.Add("merchantId", merchantProfile.MerchantId);
                    paymentInfo.Add("terminalId", merchantProfile.Terminal);

                    Dictionary<string, string> paymentProfileInfo = new Dictionary<string, string>();
                    paymentProfileInfo.Add("merchantId", merchantProfile.MerchantId);
                    paymentProfileInfo.Add("terminalId", merchantProfile.Terminal);
                    paymentProfileInfo.Add("issuerInsId", issuerInsId);

                    MpuInterfaceRequest req = new MpuInterfaceRequest()
                    {
                        //NearMePaymentRefNo = "NearMe" + txnId,
                        Amount = Decimal.Parse(amount),
                        PaymentInfo = paymentInfo,
                        PaymentProfileInfo = paymentProfileInfo
                    };

                    Mpu mpu = new Mpu();
                    MpuInterfaceResponse mpuRes;

                    string mpuReq = JsonConvert.SerializeObject(req);

                    mpuRes = mpu.TransactionRequest(mpuReq);
                    if (mpuRes.ResCode == "00")
                    {
                        status = "AP";
                        desc = "Approved";
                        paymentRefNo = mpuRes.TransactionRefNo;
                        ref1 = mpu.MaskCardNumber(cardNo) + ";" + mpuRes.PaymentInfo["traceNo"] + ";" + mpuRes.PaymentInfo["batchNo"];
                        conRes.ref5 = mpuRes.PaymentInfo.ContainsKey("approvalCode") ? mpuRes.PaymentInfo["approvalCode"] : "";
                        conRes.approvalCode = mpuRes.PaymentInfo.ContainsKey("approvalCode") ? mpuRes.PaymentInfo["approvalCode"] : "";
                        mpu.SaveCardTransaction(txnId, req, mpuRes);
                    }
                    else
                    {
                        ref1 = mpu.MaskCardNumber(cardNo) + ";" + expiry;
                        status = "RE";
                        desc = mpuRes.FailReason;
                    }
                    
                    conRes.smsMsg = smsMsg;
                    conRes.email = email;
                    conRes.password = password;
                    conRes.rescode = mpuRes.ResCode;
                    conRes.resdesc = mpuRes.FailReason;
                    conRes.ref1 = paymentType;
                    conRes.ref2 = mpu.MaskCardNumber(cardNo);
                    conRes.ref3 = expiry;
                    conRes.ref4 = paymentRefNo;
                    conRes.ref1Name = "Payment Type";
                    conRes.ref2Name = "";
                    conRes.ref3Name = "";
                    conRes.ref4Name = "";
                    conRes.ref5Name = "";
                    conRes.entryMode = "Chip";
                    conRes.Mid = merchantProfile.MerchantId;
                    conRes.Tid = merchantProfile.Terminal;

                    conRes.txnID = txnId.ToString();
                    conRes.isVoidable = true;

                    if (!_agentWCF.UpdateMerchantTransaction(txnId, status, desc, paymentRefNo, ref1, out errMsg))
                    {
                        writeLog("Error in UpdateMerchantTransaction : " + errMsg);
                    }
                    return Utils.GetMerchantAcceptanceRes(conRes);
                }
            }
            else
            {
                code = "01";
                desc = "Invalid Payment Mode!";
                return Utils.getErrorRes(code, desc);
            }
        }
        catch (Exception ex)
        {
            writeLog("Error in MerchantAcceptanceReq : " + ex.Message);

        }

        return string.Empty;
    }

    public string EPaymentVoidReq(string reqXml)
    {
        writeLog("$$$$$$$$$$$$$$$ E-Payment Void Request $$$$$$$$$$$$$$$");
        writeLog("REQ XML : " + reqXml);

        string status = "";
        string desc = "";

        var rescode = string.Empty;
        var resdecs = string.Empty;
        var version = string.Empty;
        var ts = string.Empty;
        var email = string.Empty;
        var password = string.Empty;
        long taxId = 0;
        string amount = string.Empty;
        var productDesc = string.Empty;
        var messageId = string.Empty;
        var clientId = string.Empty;
        var merchantId = string.Empty;
        string paymentRefNo = string.Empty;
        string paymentType = string.Empty;
        string ref1 = string.Empty;
        string ref2 = string.Empty;
        string ref3 = string.Empty;
        string ref4 = string.Empty;
        string ref5 = string.Empty;
        string batchNo = string.Empty;
        string traceNo = string.Empty;

        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidEPaymentVoidReq(ht, out rescode, out resdecs, out version, out ts, out email, out password, out paymentType
            , out messageId, out ref1, out ref2, out ref3, out ref4, out ref5, out productDesc))
        {
            Utils.getErrorRes(rescode, resdecs);
        }

        if (paymentType == ConfigurationManager.AppSettings["PaymentType_MPU"] || paymentType == ConfigurationManager.AppSettings["PaymentType_JCB"])
        {
            writeLog("Card Payment Void");

            Mpu mpu = new Mpu();
            taxId = long.Parse(ref1);
            var ds = mpu.GetCardTransactionByMerchantTransactionId(taxId);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {

                DataRow cardTransactionRow = ds.Tables[0].Rows[0];


                if (cardTransactionRow["IsVoid"] + "" == "True")
                {
                    return Utils.getErrorRes("06", "The transaction is voided already.");
                }
                else if (cardTransactionRow["TransactionStatus"] + "" != "AP")
                {
                    return Utils.getErrorRes("06", "Cannot void this transaction.");
                }

                amount = cardTransactionRow["Amount"].ToString();
                string cardNo = cardTransactionRow["CardNo"].ToString();
                string transactionRefNo = cardTransactionRow["TransactionRefNo"].ToString();
                string expiry = cardTransactionRow["Expiry"].ToString();
                string entryMode = cardTransactionRow["Entrymode"] + "";
                string approvalCode = cardTransactionRow["ApprovalCode"] + "";
                string issuerInsId = "";

                _agentWCF.GetBatchNBatchNo(out errMsg, out batchNo, out traceNo);
                _agentWCF.GetIssuerInsId(cardNo, out errMsg, out issuerInsId);

                Dictionary<string, string> paymentInfo = mpu.PrepareVoidPaymentInfo(cardTransactionRow, batchNo, traceNo);


                Dictionary<string, string> paymentProfileInfo = new Dictionary<string, string>();
                paymentProfileInfo.Add("merchantId", cardTransactionRow["MerchantId"].ToString());
                paymentProfileInfo.Add("terminalId", cardTransactionRow["TerminalId"].ToString());
                paymentProfileInfo.Add("issuerInsId", issuerInsId);

                MpuInterfaceRequest req = new MpuInterfaceRequest()
                {
                    //NearMePaymentRefNo = "NearMe" + txnId,
                    Amount = Decimal.Parse(amount),
                    PaymentInfo = paymentInfo,
                    PaymentProfileInfo = paymentProfileInfo
                };

                string mpuReq = JsonConvert.SerializeObject(req);

                MpuInterfaceResponse mpuRes;

                mpuRes = mpu.TransactionRequest(mpuReq);

                if (mpuRes.ResCode == "00")
                {
                    desc = ref2;

                    if (!_agentWCF.VoidCardTransaction(taxId, desc, out errMsg))
                    {
                        writeLog("Error in VoidEPaymnetTransaction : " + errMsg);
                        mpuRes.ResCode = "06";
                        mpuRes.ResDescription = "Void Fail";
                    }

                }

                ConfirmResponseModel conRes = new ConfirmResponseModel();
                conRes.messageid = messageId;
                conRes.email = email;
                conRes.password = password;
                conRes.rescode = mpuRes.ResCode;
                conRes.resdesc = mpuRes.FailReason;
                conRes.ref1 = productDesc;
                conRes.ref2 = mpu.MaskCardNumber(cardNo);
                conRes.ref3 = expiry;
                conRes.ref4 = transactionRefNo; // mpuRes.PaymentInfo["traceNo"];
                conRes.ref5 = approvalCode;
                conRes.ref1Name = "Payment Type";
                conRes.ref2Name = "";
                conRes.ref3Name = "";
                conRes.ref4Name = "";
                conRes.ref5Name = "";
                conRes.txnID = taxId.ToString();
                conRes.Mid = cardTransactionRow["MerchantId"].ToString();
                conRes.Tid = cardTransactionRow["TerminalId"].ToString();
                conRes.smsMsg = "";
                return Utils.GetEPaymentVoidRes(conRes);
            }
            else
            {
                return Utils.getErrorRes("06", "Transaction not found!");
            }


        }
        else if (paymentType == ConfigurationManager.AppSettings["PaymentType_AYAPay"])
        {
            writeLog("AYAPay Void");

            taxId = long.Parse(ref1);
            DataSet ds;
            var ret = _agentWCF.GetMerchantTransactionById(taxId, out errMsg, out ds);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                DataRow transactionRow = ds.Tables[0].Rows[0];
                var transactionId = transactionRow.Field<long>("MerchantTransactionId");
                writeLog("This is AYAPay");


                AyaPay ayaPay = new AyaPay();
                var ayaPayRes = ayaPay.Refund(transactionId);


                if (ayaPayRes != null && ayaPayRes.ResCode == "00")
                {
                    AdminWcf.ServiceClient adminWCF = new AdminWcf.ServiceClient();
                    string errorMessage = "";
                    if (!adminWCF.updateMerchantTxnStatus(transactionId, "RF", "", out errorMessage))
                    {
                        writeLog("AYAPay : " + transactionId + " Database Update Fails | Error : " + errorMessage);
                    }
                }

                ConfirmResponseModel conRes = new ConfirmResponseModel();
                conRes.messageid = messageId;
                conRes.email = email;
                conRes.password = password;
                conRes.rescode = ayaPayRes.ResCode;
                conRes.resdesc = ayaPayRes.FailReason;
                conRes.ref1 = productDesc;
                conRes.ref2 = "";
                conRes.ref3 = "";
                conRes.ref4 = "";
                conRes.ref5 = "";
                conRes.ref1Name = "Payment Type";
                conRes.ref2Name = "";
                conRes.ref3Name = "";
                conRes.ref4Name = "";
                conRes.ref5Name = "";
                conRes.txnID = taxId.ToString();
                conRes.Mid = "";
                conRes.Tid = "";
                conRes.smsMsg = "";
                return Utils.GetEPaymentVoidRes(conRes);
            }
            else
            {
                return Utils.getErrorRes("06", "Transaction not found!");
            }


        }

        return Utils.getErrorRes("06", "No Payment Type Found");
    }

    public string ConfirmToBiller(string reqXml)
    {
        writeLog("$$$$$$$$$$$$$$$ ConfirmToBiller $$$$$$$$$$$$$$$");
        writeLog("REQ XML : " + reqXml);
        string sendername = "936600004";
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;

        string ref1 = string.Empty;
        string ref2 = string.Empty;
        string ref3 = string.Empty;
        string ref4 = string.Empty;
        string ref5 = string.Empty;
        string ref6 = string.Empty;
        string phoneNumber = string.Empty;
        string ref1Name = string.Empty;
        string ref2Name = string.Empty;
        string ref3Name = string.Empty;
        string ref4Name = string.Empty;
        string ref5Name = string.Empty;

        string amount = string.Empty;
        string inquirytype = string.Empty;
        string locLatitude = string.Empty;
        string locLongitude = string.Empty;
        string rescode = string.Empty;
        string resdecs = string.Empty;
        string appType = "";
        string status = string.Empty;
        string taxID = string.Empty;
        string MapTaxID = string.Empty;
        string expiry = string.Empty;

        string messageid = string.Empty;
        string confirmedby = string.Empty;
        string totalAmount = "";
        string imgnrc = string.Empty;
        string imgcert = string.Empty;
        string response = "";
        double amt = 0;
        string productdesc = string.Empty;
        string isAgreement = "N"; //Added by HNT 26-03-2015
        string topupType;
        string TodayTxnCount = string.Empty;
        string TodayTxnAmount = string.Empty;
        string totalAgentAmount = string.Empty;
        string smsMsg = string.Empty;
        string payeecommissionamt = string.Empty;
        string payeechargeamt = string.Empty;
        string totalpayeecharge = string.Empty;
        string taxxid = string.Empty;
        string meterBiller = string.Empty;
        string isTitan = "TITAN";
        string isCNP = "CNP";
        string titanResult = string.Empty;
        string townshipcode = string.Empty;
        string titanCustRefNumber = string.Empty;
        string titanCustomerName = string.Empty;
        string titanTotalUnitUse = string.Empty;
        string esbGetGiftCardMethod = "GetGiftCardPIN";
        string esbAirTimeTopup = "AirTimeTopUp";
        string esbaGcardAirtimeReq = "TopUpGiftCardAirTime";
        string fourTVproductID = string.Empty;
        string ServiceFeeFor123Remit = string.Empty;
        double availablebalance = 0;
        double ledgerbalance = 0;
        string canalPlusConfirmType = string.Empty;
        string sessionID = string.Empty;
        string packageCode = string.Empty;
        string durationCode = string.Empty;
        var logAppender = string.Empty;
        var terminalId = string.Empty;
        string paymentType = string.Empty;

        List<PGReqConfirmInvoice> lstInvoices = new List<PGReqConfirmInvoice>();
        string LoginType = string.Empty;

        try
        {
            Hashtable ht = Utils.getHTableFromXML(reqXml);

            if (!IsValidateConfirmReq(reqXml, ht, out rescode, out resdecs, out version, out ts, out email, out password, out ref1, out ref2, out ref3,
                out ref4, out ref5, out imgcert, out imgnrc, out inquirytype, out amount, out locLatitude, out locLongitude, out serviceFee,
                out productdesc, out taxID, out messageid, out confirmedby, out topupType, out MapTaxID, out canalPlusConfirmType, out sessionID,
                out packageCode, out durationCode, out lstInvoices, out LoginType, out terminalId, out paymentType))
            {
                writeLog("Confirm Request is not valid");
                return Utils.getErrorRes(rescode, resdecs);
            }

            else
            {
                logAppender += messageid + " | ";
                writeLog(logAppender + "Confirm Request is valid");
                try
                {
                    if (MapTaxID == ConfigurationManager.AppSettings["AEONMapTaxId"].ToString() || MapTaxID == ConfigurationManager.AppSettings["FtthMapTaxId"].ToString() || MapTaxID == ConfigurationManager.AppSettings["WtthMapTaxId"].ToString() || MapTaxID == ConfigurationManager.AppSettings["OoredooFtth"].ToString() || MapTaxID == ConfigurationManager.AppSettings["MmBusticket"].ToString() || MapTaxID == ConfigurationManager.AppSettings["Flight"].ToString())
                    {
                        phoneNumber = ref5;
                    }
                    else if (MapTaxID == ConfigurationManager.AppSettings["MotherFinanceTaxId"].ToString() || MapTaxID == ConfigurationManager.AppSettings["MyanPwel"].ToString() || MapTaxID == ConfigurationManager.AppSettings["MinTheinKha"].ToString())
                    {
                        ref6 = imgnrc;
                    }

                    if (MapTaxID == "0000000000031")
                    {
                        string[] fourTVProuct = ref5.Split(':');
                        fourTVproductID = fourTVProuct[0];
                    }
                    if (MapTaxID == "0000000000020" || MapTaxID == "0000000000021" || MapTaxID == "0000000000022")
                    {
                        string[] chargecomm = ref5.Split(':');
                        meterBiller = chargecomm[0];
                        if (meterBiller == isTitan)//For Titan Titan Result and get townshipcode to sent 
                        {
                            titanResult = chargecomm[1];
                            townshipcode = chargecomm[2];
                            titanCustRefNumber = chargecomm[3];
                            titanCustomerName = chargecomm[4];
                            titanTotalUnitUse = chargecomm[5];
                        }
                        else
                        {
                            if (meterBiller != isCNP)//For Oder version of Andriod APP V1.1.1 and below CNP Meter Bills
                            {
                                payeechargeamt = chargecomm[0];
                                payeecommissionamt = chargecomm[1];
                                totalpayeecharge = (double.Parse(payeechargeamt) + double.Parse(payeecommissionamt)).ToString();
                                ref4 = ref5;
                                writeLog(logAppender + "Charge:" + payeechargeamt + "|Comission:" + payeecommissionamt + "|Totalpayeecharge:" + totalpayeecharge);
                            }
                            else if (meterBiller == isCNP)//For Newer Version of Andriod App V1.1.2 and above CNP Billers
                            {

                                payeechargeamt = chargecomm[1];
                                payeecommissionamt = chargecomm[2];
                                totalpayeecharge = (double.Parse(payeechargeamt) + double.Parse(payeecommissionamt)).ToString();
                                ref4 = ref5;
                                writeLog(logAppender + "Charge:" + payeechargeamt + "|Comission:" + payeecommissionamt + "|Totalpayeecharge:" + totalpayeecharge);

                                //for newer cnp version
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    writeLog(logAppender + "Exception Error in Get Payee charge and comission amount" + ex.Message);
                }

                sendername = (ref3.StartsWith("099") || (ref3.StartsWith("097") && !ref3.StartsWith("0973"))) ? ConfigurationManager.AppSettings["senderNameNumber"].ToString() : ConfigurationManager.AppSettings["senderName"].ToString();//if mobile number is Orredoo Sender name Must Be 936600004 

                DataSet dsBiller = null;
                string errmsg = string.Empty;
                string billerid = string.Empty;
                if (ht.ContainsKey("AppType"))
                {
                    appType = ht["AppType"].ToString();
                }

                if (String.IsNullOrEmpty(appType))
                    appType = "CP";

                #region Validate Min Max Amount for Some Loan billers
                string code = string.Empty;
                string desc = string.Empty;
                if (!string.IsNullOrEmpty(ConfigurationManager.AppSettings["ValidateMinMaxAtConfirmBillerList"].ToString().Split(',').Where(x => x == MapTaxID).FirstOrDefault()))
                {
                    // Add 'CONFIRM' in TaxId to get Configuration Key
                    bool isValidAmount = true;
                    string name = taxID + "Confirm";
                    isValidAmount = Utils.ValidateAmountLimitation(name, Convert.ToDecimal(amount), out code, out desc);
                    if (!isValidAmount) return Utils.getErrorRes(code, desc);
                }
                #endregion
                #region <-- Check the biller is 123  start from 25-April-2016 Tz -->

                if (MapTaxID == "1230000000000")
                {
                    if (ref1.StartsWith("000000"))
                    {
                        ref1 = ref1.Substring(6, ref1.Length - 6);
                    }

                    if (IsABCCashCard(ref1))
                    {
                        writeLog(logAppender + " $$$$$$$$$$$$$$$$$$$$$$$ This Is ABC CashCard $$$$$$$$$$$$$$$$$$$$$$$$");
                        this.serviceFlatFee = ConfigurationManager.AppSettings["AbcCardServiceFlatFee"].ToString();
                        this.servicePercent = ConfigurationManager.AppSettings["AbcCardServicePercentFee"].ToString();
                        this.agentFlatFee = ConfigurationManager.AppSettings["AbcCardAgentFlatFee"].ToString();
                        this.agentPercent = ConfigurationManager.AppSettings["AbcCardAgentPercentFee"].ToString();
                        this.oneStopFlatFee = ConfigurationManager.AppSettings["AbcCard1StopFlatFee"].ToString();
                        this.oneStopPercent = ConfigurationManager.AppSettings["AbcCard1StopPercentFee"].ToString();
                        taxxid = "AbcCashCard";
                    }
                    else
                    {
                        #region <-- If Request is from 123  get Merchent ID from 123 to set service fees for Airline. -->
                        string agentcode = ConfigurationManager.AppSettings["123ChannelCode"].ToString();// "1STOP";
                        string hashstr = Utils.hashstrReq123(version, ts, messageid, agentcode, ref1);



                        string reqXML123 = "<InquiryReq><Version>" + version + "</Version><TimeStamp>" + ts
                            + "</TimeStamp>"
                            + "<MessageID>" + messageid + "</MessageID>"
                            + "<AgentCode>" + agentcode + "</AgentCode>"
                           + "<PaymentCode>" + ref1
                            + "</PaymentCode><RequestBy>" + taxID
                            + "</RequestBy><Hash>" + hashstr
                            + "</Hash></InquiryReq>";
                        writeLog(logAppender + "| Payment Code :" + ref1 + "taxID :" + taxID);

                        RouteAPI api_service = new RouteAPI();
                        writeLog(logAppender + " 123 Inquiry Req QR : " + reqXML123);
                        response = api_service.Apicalling123(reqXML123);
                        writeLog(logAppender + " 123 Inquiry Res QR : " + response);
                        Hashtable htt = Utils.getHTableFromXML(response);
                        string responsecode = string.Empty;
                        string resDesc = string.Empty;
                        if (IsValidateInquiryFirstRes123(htt, out taxxid, out responsecode, out resDesc))
                        {
                            writeLog(logAppender + " $$$$$$$$$$$$$$$$QR 123 RESPONSE OK Old Tax ID" + taxID + "| taxid:" + taxxid + "$$$$$$$$$$$$$$$$$$$$$$$$");


                        }
                        else
                        {

                            writeLog(logAppender + " $$$$$$$$$$$$$$$$$VALADATE NOT OK$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
                            return Utils.getErrorRes(responsecode, resDesc);
                        }
                        #endregion
                    }
                }

                #endregion

                if (_agentWCF.checkBillerIDWithSourceName(taxID, agentID, email, out dsBiller, out errmsg))
                {

                    Utils.WriteLog_Biller(logAppender + " BillerID check starts for taxID : " + taxID);
                    Utils.WriteLog_Biller(logAppender + " BillerID check starts for agentID : " + agentID);

                    #region <-- Check BillerID -->
                    if (dsBiller.Tables[0].Rows.Count > 0)
                    {
                        billerid = Convert.ToString(dsBiller.Tables[0].Rows[0]["BILLERID"]);
                        billerName = dsBiller.Tables[0].Rows[0]["BILLERNAME"].ToString();
                        billerSource = dsBiller.Tables[0].Rows[0]["SOURCE"].ToString();

                        if (!string.IsNullOrEmpty(dsBiller.Tables[0].Rows[0]["BILLERLOGO"].ToString()))
                            billerLogo = Convert.ToBase64String((byte[])dsBiller.Tables[0].Rows[0]["BILLERLOGO"]);
                        ref1Name = dsBiller.Tables[0].Rows[0]["REF1NAME"].ToString();
                        writeLog(logAppender + string.Format("ref1 : {0}, ref1Name : {1}", ref1, ref1Name));
                        ref2Name = dsBiller.Tables[0].Rows[0]["REF2NAME"].ToString();
                        writeLog(logAppender + string.Format("ref2 : {0}, ref2Name : {1}", ref2, ref2Name));
                        ref3Name = dsBiller.Tables[0].Rows[0]["REF3NAME"].ToString();
                        writeLog(logAppender + string.Format("ref3 : {0}, ref3Name : {1}", ref3, ref3Name));
                        ref4Name = dsBiller.Tables[0].Rows[0]["REF4NAME"].ToString();
                        writeLog(logAppender + string.Format("ref4 : {0}, ref4Name : {1}", ref4, ref4Name));
                        ref5Name = dsBiller.Tables[0].Rows[0]["REF5NAME"].ToString();
                        writeLog(logAppender + string.Format("ref5 : {0}, ref5Name : {1}", ref4, ref5Name));

                        creditlimit = dsBiller.Tables[0].Rows[0]["CREDITLIMIT"].ToString();
                        creditterm = dsBiller.Tables[0].Rows[0]["CREDITTERM"].ToString();
                        credittemrstart = dsBiller.Tables[0].Rows[0]["CREDITTERMSTART"].ToString();
                        isAutoCreditReset = dsBiller.Tables[0].Rows[0]["ISAUTORESETCREDIT"] == DBNull.Value ? "N" : dsBiller.Tables[0].Rows[0]["ISAUTORESETCREDIT"].ToString();
                        isSendCreditResetEmail = dsBiller.Tables[0].Rows[0]["ISSENDCREDITRESETEMAIL"] == DBNull.Value ? "N" : dsBiller.Tables[0].Rows[0]["ISSENDCREDITRESETEMAIL"].ToString();
                        billerFlatFee = dsBiller.Tables[0].Rows[0]["BillerFlatFee"].ToString();
                        billerPercentFee = dsBiller.Tables[0].Rows[0]["BillerPercentFee"].ToString();
                        billerServiceFlatFee = dsBiller.Tables[0].Rows[0]["BillerServiceFlatFee"].ToString();
                        billerServicePercentFee = dsBiller.Tables[0].Rows[0]["BillerServicePercentFee"].ToString();

                        if (MapTaxID == "1230000000000")
                        {
                            if (taxxid == "1230000000000")
                            {
                                serviceFlatFee = dsBiller.Tables[0].Rows[0]["SERVICEFLATFEE"].ToString();
                                servicePercent = dsBiller.Tables[0].Rows[0]["SERVICEPERCENTFEE"].ToString();
                                agentFlatFee = dsBiller.Tables[0].Rows[0]["AGENTFLATFEE"].ToString();
                                agentPercent = dsBiller.Tables[0].Rows[0]["AGENTPERCENTFEE"].ToString();
                                oneStopFlatFee = dsBiller.Tables[0].Rows[0]["ONESTOPFLATFEE"].ToString();
                                oneStopPercent = dsBiller.Tables[0].Rows[0]["ONESTOPPERCENTFEE"].ToString();
                            }
                            else
                            {
                                //will use servicefees/agentfees and onestopfees from web config for airline that implement at IsValidateInquiryFirstRes123(htt, out taxxid)
                            }
                        }
                        else if (MapTaxID == "0000000000020")//YCDC
                        {


                            string amtToCompare = ConfigurationManager.AppSettings["YCDCMiniumAmount"].ToString();


                            if (double.Parse(amount) <= double.Parse(amtToCompare))
                            {
                                serviceFlatFee = ConfigurationManager.AppSettings["YCDCServiceFlatFee"].ToString();
                                servicePercent = ConfigurationManager.AppSettings["YCDCServicePercentFee"].ToString();
                                agentFlatFee = ConfigurationManager.AppSettings["YCDCAgentFlatFee"].ToString();
                                agentPercent = ConfigurationManager.AppSettings["YCDCAgentPercentFee"].ToString();
                                oneStopFlatFee = ConfigurationManager.AppSettings["YCDCAgentFlatFee"].ToString();
                                oneStopPercent = ConfigurationManager.AppSettings["YCDC1StopPercentFee"].ToString();
                            }
                            else
                            {
                                serviceFlatFee = dsBiller.Tables[0].Rows[0]["SERVICEFLATFEE"].ToString();
                                servicePercent = dsBiller.Tables[0].Rows[0]["SERVICEPERCENTFEE"].ToString();
                                agentFlatFee = dsBiller.Tables[0].Rows[0]["AGENTFLATFEE"].ToString();
                                agentPercent = dsBiller.Tables[0].Rows[0]["AGENTPERCENTFEE"].ToString();
                                oneStopFlatFee = dsBiller.Tables[0].Rows[0]["ONESTOPFLATFEE"].ToString();
                                oneStopPercent = dsBiller.Tables[0].Rows[0]["ONESTOPPERCENTFEE"].ToString();
                            }

                        }
                        else
                        {
                            serviceFlatFee = dsBiller.Tables[0].Rows[0]["SERVICEFLATFEE"].ToString();
                            servicePercent = dsBiller.Tables[0].Rows[0]["SERVICEPERCENTFEE"].ToString();
                            agentFlatFee = dsBiller.Tables[0].Rows[0]["AGENTFLATFEE"].ToString();
                            agentPercent = dsBiller.Tables[0].Rows[0]["AGENTPERCENTFEE"].ToString();
                            oneStopFlatFee = dsBiller.Tables[0].Rows[0]["ONESTOPFLATFEE"].ToString();
                            oneStopPercent = dsBiller.Tables[0].Rows[0]["ONESTOPPERCENTFEE"].ToString();
                        }


                        isAgreement = dsBiller.Tables[0].Rows[0]["AGREEMENTTYPE"].ToString(); //Added By HNT 26-03-2015                     




                        //Added By HNT 03-04-2015
                        if (dsBiller.Tables[1].Rows.Count > 0)
                        {
                            TodayTxnCount = String.IsNullOrEmpty(dsBiller.Tables[1].Rows[0]["TODAYTXNCOUNT"].ToString()) ? "0" : dsBiller.Tables[1].Rows[0]["TODAYTXNCOUNT"].ToString();
                            TodayTxnAmount = String.IsNullOrEmpty(dsBiller.Tables[1].Rows[0]["TODAYTXNAMOUNT"].ToString()) ? "0" : dsBiller.Tables[1].Rows[0]["TODAYTXNAMOUNT"].ToString();
                        }
                        if (dsBiller.Tables[2].Rows.Count > 0)
                        {
                            totalAgentAmount = String.IsNullOrEmpty(dsBiller.Tables[2].Rows[0]["AGENTAMOUNT"].ToString()) ? "0" : dsBiller.Tables[2].Rows[0]["AGENTAMOUNT"].ToString();
                        }

                        if (String.IsNullOrEmpty(amount))
                            amount = "0";

                        if (string.IsNullOrEmpty(serviceFlatFee))
                            serviceFlatFee = "0";
                        if (string.IsNullOrEmpty(servicePercent))
                            servicePercent = "0";

                        if (string.IsNullOrEmpty(agentFlatFee))
                            agentFlatFee = "0";

                        if (string.IsNullOrEmpty(agentPercent))
                            agentPercent = "0";
                        if (string.IsNullOrEmpty(creditterm))
                            creditterm = "0";
                        if (string.IsNullOrEmpty(creditlimit))
                            creditlimit = "0.00";

                        // 123Remit Cashout
                        if (string.IsNullOrEmpty(serviceFee))
                            agentFee = "0";
                        else
                            agentFee = serviceFee;

                        if (MapTaxID == "0000000000007")//663 Remit Calculate  fees as below
                        {
                            #region <-- 663 remit fees calculation -->
                            DataSet ds = new DataSet();
                            string minAmount = string.Empty;
                            string maxAmount = string.Empty;
                            string txnFee = string.Empty;
                            string serviceCharge = string.Empty;
                            string agentCommissionPercent = string.Empty;
                            string superAgentCommissionPercent = string.Empty;
                            if (_agentWCF.get663FeesByAmount(int.Parse(billerid), decimal.Parse(amount), out ds, out errmsg))
                            {
                                minAmount = ds.Tables[0].Rows[0]["MINAMOUNT"].ToString();
                                maxAmount = ds.Tables[0].Rows[0]["MAXAMOUNT"].ToString();
                                txnFee = ds.Tables[0].Rows[0]["TRANSACTIONFEES"].ToString();
                                serviceCharge = ds.Tables[0].Rows[0]["SERVICECHARGE"].ToString();
                                agentCommissionPercent = ds.Tables[0].Rows[0]["AGENTCOMMISSIONPERCENT"].ToString();
                                superAgentCommissionPercent = ds.Tables[0].Rows[0]["SUPERAGENTCOMMISSIONPERCENT"].ToString();
                                writeLog("amount range:" + minAmount + "to" + maxAmount + "|TransactionFees:" + txnFee + "|ServiceCharge:" + serviceCharge + "|AgentCommissionPercent:" + agentCommissionPercent + "|SuperAgentComissionPercent:" + superAgentCommissionPercent);
                                serviceFeeDbl = (double.Parse(txnFee) + double.Parse(serviceCharge));
                                serviceFee = serviceFeeDbl.ToString("###0.00");
                                totalAmount = (double.Parse(amount) + serviceFeeDbl).ToString("###0.00");

                                oneStopFeeDbl = ((double.Parse(txnFee) + double.Parse(serviceCharge)) - ((double.Parse(txnFee) * double.Parse(agentCommissionPercent)) / 100));
                                oneStopFee = oneStopFeeDbl.ToString("###0.00");

                                agentFeeDbl = 0;
                                agentAmount = double.Parse(amount) - agentFeeDbl;
                                agentAmount += oneStopFeeDbl;

                                billerAmount = GetBillerAmount(double.Parse(amount));

                                writeLog(logAppender + "Amount : " + amount + " | ServiceFee : " + serviceFee +
                               " | AgentFee : " + agentFee + " | 1-Stop Fee : " + oneStopFee.ToString() +
                               " | AgentAmount : " + agentAmount + " | BillerAmount : " + billerAmount + " | BillerDiscountFee : " + BillerDiscountFee + " | BillerServiceFee" + BillerServiceFee);
                            }

                            else
                            {
                                writeLog(logAppender + "Error In Getting 663 Service Fees");
                                return Utils.getErrorRes("06", "Transaction not successful cannot calculate service fees.");
                            }
                            #endregion
                        }
                        else if (MapTaxID == "0000000000009")
                        {
                            #region <-- 663 Cashout fees calculation -->
                            DataSet ds = new DataSet();
                            string minAmount = string.Empty;
                            string maxAmount = string.Empty;
                            string txnFee = string.Empty;
                            string serviceCharge = string.Empty;
                            string agentCommissionPercent = string.Empty;
                            string superAgentCommissionPercent = string.Empty;
                            if (_agentWCF.get663FeesByAmount(int.Parse(billerid), decimal.Parse(amount), out ds, out errmsg))
                            {
                                minAmount = ds.Tables[0].Rows[0]["MINAMOUNT"].ToString();
                                maxAmount = ds.Tables[0].Rows[0]["MAXAMOUNT"].ToString();
                                txnFee = ds.Tables[0].Rows[0]["TRANSACTIONFEES"].ToString();
                                serviceCharge = ds.Tables[0].Rows[0]["SERVICECHARGE"].ToString();
                                agentCommissionPercent = ds.Tables[0].Rows[0]["AGENTCOMMISSIONPERCENT"].ToString();
                                superAgentCommissionPercent = ds.Tables[0].Rows[0]["SUPERAGENTCOMMISSIONPERCENT"].ToString();
                                writeLog(logAppender + "amount range:" + minAmount + "to" + maxAmount + "|TransactionFees:" + txnFee + "|ServiceCharge:" + serviceCharge + "|AgentCommissionPercent:" + agentCommissionPercent + "|SuperAgentComissionPercent:" + superAgentCommissionPercent);

                                serviceFeeDbl = double.Parse(serviceCharge);
                                serviceFee = serviceFeeDbl.ToString("###0.00");
                                totalAmount = (double.Parse(amount) + serviceFeeDbl).ToString("###0.00");

                                oneStopFeeDbl = 0;
                                oneStopFee = oneStopFeeDbl.ToString("###0.00");

                                agentFeeDbl = ((double.Parse(txnFee) * double.Parse(agentCommissionPercent)) / 100);
                                agentAmount = double.Parse(amount) + agentFeeDbl;
                                agentAmount += oneStopFeeDbl;

                                billerAmount = GetBillerAmount(double.Parse(amount));

                                writeLog(logAppender + "Amount : " + amount + " | ServiceFee : " + serviceFee +
                                " | AgentFee : " + agentFee + " | 1-Stop Fee : " + oneStopFee.ToString() +
                                " | AgentAmount : " + agentAmount + " | BillerAmount : " + billerAmount + " | BillerDiscountFee : " + BillerDiscountFee + " | BillerServiceFee" + BillerServiceFee);
                            }

                            else
                            {
                                writeLog(logAppender + "Error In Getting 663 Service Fees");
                                return Utils.getErrorRes("06", "Transaction not successful cannot calculate service fees.");
                            }
                            #endregion
                        }
                        else
                        {
                            Utils.WriteLog_Biller(logAppender + "Near Me Flat Fee : " + oneStopFlatFee);
                            Utils.WriteLog_Biller(logAppender + "Near Me Percent Fee : " + oneStopPercent);
                            Utils.WriteLog_Biller(logAppender + "Service Flat Fee : " + serviceFlatFee);
                            Utils.WriteLog_Biller(logAppender + "Service Percent Fee : " + servicePercent);
                            Utils.WriteLog_Biller(logAppender + "Agent Flat Fee : " + agentFlatFee);
                            Utils.WriteLog_Biller(logAppender + "Agent Percent Fee : " + agentPercent);
                            //Calculate Agent Fee
                            serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                            Utils.WriteLog_Biller(logAppender + "Service Fee : " + serviceFeeDbl);
                            serviceFee = serviceFeeDbl.ToString("###0.00"); // For Log Only

                            // totalAmount is to show in SMS only
                            if (MapTaxID == "0000000000026")//MyKyaeCashOut
                                totalAmount = (double.Parse(amount) - serviceFeeDbl).ToString("###0.00");
                            else
                                totalAmount = (double.Parse(amount) + serviceFeeDbl).ToString("###0.00");

                            oneStopFeeDbl = Utils.getFeeNotRound(double.Parse(amount), float.Parse(oneStopPercent), double.Parse(oneStopFlatFee));
                            Utils.WriteLog_Biller(logAppender + "Near Me Fee : " + oneStopFeeDbl);
                            oneStopFee = oneStopFeeDbl.ToString("###0.00"); // For log only                            

                            agentFeeDbl = Utils.getFeeNotRound(double.Parse(amount), float.Parse(agentPercent), double.Parse(agentFlatFee));
                            Utils.WriteLog_Biller(logAppender + "Partner Fee : " + agentFeeDbl);
                            agentAmount = double.Parse(amount) - agentFeeDbl;
                            Utils.WriteLog_Biller(logAppender + "Agent Amount after amount minus Partner Fee : " + agentAmount);

                            if (agentAmount <= 0)
                            {
                                rescode = "01";
                                resdecs = "Invalid Fees Setting";

                                return Utils.getErrorRes(rescode, resdecs, MapTaxID);
                            }

                            agentAmount += oneStopFeeDbl;
                            Utils.WriteLog_Biller(logAppender + "Agent Amount after adding nearMe Fee : " + agentAmount);

                            billerAmount = GetBillerAmount(double.Parse(amount));

                            writeLog(logAppender + "Amount : " + amount + " | ServiceFee : " + serviceFee +
                          " | AgentFee : " + agentFee + " | 1-Stop Fee : " + oneStopFee.ToString() +
                          " | AgentAmount : " + agentAmount + " | BillerAmount : " + billerAmount + " | BillerDiscountFee : " + BillerDiscountFee + " | BillerServiceFee" + BillerServiceFee);


                        }

                        double avlBal = 0;
                        double ledBal = 0;

                        if (isAgreement == "N")
                        {
                            if (MapTaxID != "7777777777777" && MapTaxID != ConfigurationManager.AppSettings["123RemitCashOut"].ToString() && MapTaxID != "0000000000018" && MapTaxID != "0000000000009" && MapTaxID != "0000000000010" && MapTaxID != "0000000000011")//if not MalarMyaineRedeem,123RemitCashOut , MalarMyaineCodeGenerate , 663 Cashout , MercyCorps Generate,MercyCorpsRedeem will check balance.
                            {
                                #region <-- Balance Base -->
                                writeLog(logAppender + "AGREEMENT TYPE is N. Balance must be available.");
                                if (!_agentWCF.getBalance(agentID, out avlBal, out ledBal))
                                {
                                    writeLog(logAppender + "Error in getBalance");
                                }

                                if (avlBal >= agentAmount)
                                {
                                    writeLog(logAppender + "Balance Enough = Agent ID : " + agentID.ToString() + " | Balance : " + avlBal.ToString());

                                    CreditLimitResultModel result = new CreditLimitResultModel();
                                    CreditLimitModel CreditLimitMdl = new CreditLimitModel();
                                    CreditLimitMdl.totalAgentAmount = totalAgentAmount;
                                    result = isEnoughCreditTermsAndLimit(CreditLimitMdl);
                                    if (!result.result)
                                    {
                                        writeLog(logAppender + "Response Code : " + result.rescode + ", Response Description : " + result.resdesc);
                                        return Utils.getErrorRes(result.rescode, result.resdesc);
                                    }



                                }
                                else
                                {
                                    writeLog(logAppender + "Balance NOT Enough = Agent ID : " + agentID.ToString() + " | Balance : " + avlBal.ToString());

                                    rescode = "10";
                                    resdecs = "Insufficient amount. Please load your balance.";

                                    return Utils.getErrorRes(rescode, resdecs, MapTaxID);
                                }
                                #endregion
                            }
                        }
                        else
                        {
                            if (MapTaxID == "0000000000009")//if biller taxid is 663 Check To reject Non Balance Base User
                            {
                                writeLog("Non Balance Base Agent is Not Allow to do 663 CashOut");
                                return Utils.getErrorRes("10", "Agent not allowed");
                            }

                            writeLog(logAppender + "Agent Total Amount : " + totalAgentAmount);
                            writeLog(logAppender + "AGREEMENT TYPE is Y. Balance will not be needed.");
                            writeLog(logAppender + "Credit term Startdate:" + credittemrstart);
                            writeLog(logAppender + "CreditLimit:" + creditlimit);
                            writeLog(logAppender + "CreditTerm:" + creditterm);
                            CreditLimitResultModel result = new CreditLimitResultModel();
                            CreditLimitModel CreditLimitMdl = new CreditLimitModel();
                            CreditLimitMdl.totalAgentAmount = totalAgentAmount;
                            result = isEnoughCreditTermsAndLimit(CreditLimitMdl);
                            if (!result.result)
                            {
                                return Utils.getErrorRes(result.rescode, result.resdesc);
                            }
                        }
                    }
                    else
                    {
                        rescode = "01";
                        resdecs = "Invalid Services";

                        return Utils.getErrorRes(rescode, resdecs);
                    }

                    writeLog(logAppender + "BillerID check ends for taxID : " + taxID);
                    #endregion
                }
                else
                {
                    rescode = "01";
                    resdecs = "Invalid Services";

                    return Utils.getErrorRes(rescode, resdecs);

                }

                long txnID = 0;
                string transactionDateTime = "";
                int batchID = 0;
                amt = double.Parse((double.Parse(amount)).ToString("#,##0.00"));
                double tempServiceFeeDbl = 0;
                if (MapTaxID == ConfigurationManager.AppSettings["123RemitCashIn"].ToString() || MapTaxID == ConfigurationManager.AppSettings["123RemitCashOut"].ToString())
                {
                    tempServiceFeeDbl = serviceFeeDbl;
                    serviceFeeDbl = Convert.ToDouble(agentFee);
                }


                #region <-- MmBusticket -->

                if (MapTaxID == ConfigurationManager.AppSettings["MmBusticket"].ToString())
                {
                    writeLog(logAppender + "This is MmBusticket.");
                    var ds = new DataSet();
                    var errMsg = string.Empty;
                    var availableBalance = 0.0;
                    var ledgerBalance = 0.0;

                    var existTxn = _agentWCF.GetTxn(Convert.ToInt64(ref4), out ds, out errMsg);
                    if (!existTxn) return Utils.getErrorRes("91", "Transaction not found.");

                    var data = ds.Tables[0].Rows;
                    if (data.Count > 0)
                    {
                        var txnStatus = data[0]["TRANSACTIONSTATUS"].ToString();
                        if (txnStatus == "PA" || txnStatus == "ER") return Utils.getErrorRes("91", "Duplicate transaction.");

                        var rf1 = data[0]["REFID1"].ToString();
                        var rf2 = data[0]["REFID2"].ToString();
                        var rf3 = data[0]["REFID3"].ToString();
                        var rf4 = data[0]["REFID4"].ToString();

                        var txnId = data[0]["TRANSACTIONID"].ToString();
                        var txnAmount = data[0]["TRANSACTIONAMOUNT"].ToString();
                        var agentAmt = data[0]["AGENTAMOUNT"].ToString();
                        var busServiceFee = data[0]["SERVICEFEE"].ToString();
                        var agentFee = data[0]["AGENTFEE"].ToString();

                        if (isAgreement == "N")
                        {
                            var updateTxn = _agentWCF.minusAgentAmt(Convert.ToInt64(txnId), agentID, Convert.ToDouble(agentAmt), isAgreement, out errMsg, out availableBalance, out ledgerBalance);
                            if (!updateTxn) return Utils.getErrorRes("91", errMsg);
                        }

                        var sgs = new StringBuilder();
                        sgs.Append(txnId);
                        sgs.Append(rf1);
                        sgs.Append(rf4);
                        sgs.Append("00");

                        var sKey = ConfigurationManager.AppSettings["MSecreteKey"];
                        var hashValue = EncryptionManager.GetHmac(sgs.ToString(), sKey);
                        var notify = new NotifyRequest(txnId, rf1, rf4, "00", "Success", string.Empty, hashValue);
                        writeLog(logAppender + "Notify request:" + JsonConvert.SerializeObject(notify));
                        writeLog(logAppender + "Url " + rf3);

                        var mmBusticektResponse = Utils.PostEba(JsonConvert.SerializeObject(notify), rf3);
                        if (string.IsNullOrEmpty(mmBusticektResponse))
                        {
                            resdecs = "No Response From MMBusticket.";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, Convert.ToInt64(txnId), resdecs, agentID, Convert.ToDouble(agentAmt), isAgreement);
                        }

                        var mResult = JsonConvert.DeserializeObject<NotifyResponse>(mmBusticektResponse);

                        if (mResult.ResponseCode == "00")
                        {
                            var notifySg = new StringBuilder();
                            notifySg.Append(mResult.PartnerReference);
                            notifySg.Append(mResult.AgentCode);
                            notifySg.Append(mResult.TransactionReference);
                            notifySg.Append(mResult.AgentAmount);
                            notifySg.Append(mResult.ResponseCode);

                            var notifyHashValue = EncryptionManager.GetHmac(notifySg.ToString(), sKey);
                            if (notifyHashValue != mResult.HashValue)
                            {
                                resdecs = "Hash Value mismatch";
                                rescode = "06";
                                return GetErrorResponseWithAddBalance(rescode, resdecs, Convert.ToInt64(txnId), resdecs, agentID, Convert.ToDouble(agentAmt), isAgreement);
                            }

                            #region <-- Update Transaction -->

                            writeLog(logAppender + "PhoneNumber : " + phoneNumber);
                            var shortBookUrl = GetShortUrl(mResult.BookingUrl);
                            writeLog(logAppender + "ShortUrl : " + shortBookUrl);

                            writeLog(logAppender + "Update Transaction");
                            if (!_agentWCF.ConfirmUpdate(Convert.ToInt64(txnId), rf1, rf2, rf3, mResult.BookingUrl, phoneNumber, "", "PA", "Success", agentID, email, Convert.ToDouble(agentAmt), Convert.ToDouble(agentFee), isAgreement, "N", availableBalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                            }

                            writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availableBalance.ToString(System.Globalization.CultureInfo.InvariantCulture) + "| smsStatus:" + smsStatus);
                            var sms = string.Empty;

                            #endregion

                            #region <-- Send SMS -->

                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S")
                                {
                                    MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();
                                    SMSHelper smsH = new SMSHelper();

                                    var txnAmountDouble = double.Parse(txnAmount);
                                    txnAmount = (new MMBusService()).AddAgentAmountToTotalAmount(txnAmountDouble).ToString();
                                    sms = smsH.GetMessageBiller(txnId, agentName, MapTaxID, billerName, "", "", "", ref4Name, "", "", "", shortBookUrl, double.Parse(txnAmount).ToString("#,##0.00"), busServiceFee, (Convert.ToDouble(txnAmount) + Convert.ToDouble(busServiceFee)).ToString("#,##0.00"), branchCode);

                                    try
                                    {
                                        writeLog(logAppender + "Mobile No :" + phoneNumber + "| Message :" + sms + "| Sender Name :" + sendername + "|txn ID :" + txnId);
                                        var isSend = smsWcf.SendSms("", sms, phoneNumber, sendername);
                                        if (isSend._success)
                                        {
                                            _agentWCF.updateSMSStatus(Convert.ToInt64(txnId), "Y", out errMsg);
                                            writeLog(logAppender + "sendSMSWithTxnID ends.");
                                        }

                                    }
                                    catch (Exception ex)
                                    {
                                        writeLog(logAppender + "SendSms Failed. " + ex.Message);
                                    }
                                }
                            }

                            #endregion

                            #region <-- Response Back To Client -->

                            rescode = "00";
                            resdecs = "Success";
                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = rescode;
                            confirmres.resdesc = resdecs;
                            confirmres.ref1 = Utils.ReplaceAmpersandString(rf1);
                            confirmres.ref2 = Utils.ReplaceAmpersandString(rf2);
                            confirmres.ref3 = string.Empty;
                            confirmres.ref4 = shortBookUrl;
                            confirmres.ref5 = phoneNumber;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref4Name = ref4Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availableBalance.ToString();
                            confirmres.txnID = txnId;
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = sms;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }
                    }
                    else
                    {
                        return Utils.getErrorRes("91", "Transaction not found.");
                    }
                }

                #endregion

                #region <-- Flight -->

                if (MapTaxID == ConfigurationManager.AppSettings["Flight"].ToString())
                {
                    writeLog("This is Flight");
                    var ds = new DataSet();
                    var errMsg = string.Empty;
                    var availableBalance = 0.0;
                    var ledgerBalance = 0.0;

                    var existTxn = _agentWCF.GetTxn(Convert.ToInt64(ref4), out ds, out errMsg);
                    if (!existTxn) return Utils.getErrorRes("91", "Transaction not found.");

                    var data = ds.Tables[0].Rows;
                    if (data.Count > 0)
                    {
                        var txnStatus = data[0]["TRANSACTIONSTATUS"].ToString();
                        if (txnStatus == "PA" || txnStatus == "ER") return Utils.getErrorRes("91", "Duplicate transaction.");

                        var flightUrl = ConfigurationManager.AppSettings["FlightUrl"].ToString();
                        var billerCode = GetBillerCode(MapTaxID);

                        var rf1 = data[0]["REFID1"].ToString();
                        var rf2 = data[0]["REFID2"].ToString();
                        var rf3 = data[0]["REFID3"].ToString();
                        var rf4 = data[0]["REFID4"].ToString();
                        var rf5 = data[0]["REFID5"].ToString();

                        var txnId = data[0]["TRANSACTIONID"].ToString();
                        var txnAmount = data[0]["TRANSACTIONAMOUNT"].ToString();
                        var agentAmt = data[0]["AGENTAMOUNT"].ToString();
                        var flightServiceFee = data[0]["SERVICEFEE"].ToString();
                        var agentFee = data[0]["AGENTFEE"].ToString();

                        if (isAgreement == "N")
                        {
                            var updateTxn = _agentWCF.minusAgentAmt(Convert.ToInt64(txnId), agentID, Convert.ToDouble(agentAmt), isAgreement, out errMsg, out availableBalance, out ledgerBalance);
                            if (!updateTxn) return Utils.getErrorRes("91", errMsg);
                        }

                        var r1 = rf1.Split('/').ToList();
                        var r2 = rf2.Split('/').ToList();
                        var r4 = rf4.Split('/').ToList();

                        var detailFlight = new DetailFlight
                        {
                            refCode = r1.FirstOrDefault(),
                            refID = r1.LastOrDefault(),
                            amount = r2.FirstOrDefault(),
                            ticketCount = r2.LastOrDefault(),
                            contactEmail = rf3,
                            departureDate = r4.FirstOrDefault(),
                            mobileNumber = r4.LastOrDefault(),
                            route = rf5
                        };

                        var notify = EbaFlightConfirm(txnId, txnAmount, billerCode, JsonConvert.SerializeObject(detailFlight), flightUrl).Result;

                        if (notify == null)
                        {
                            resdecs = "No Response From Flight.";
                            rescode = "91";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, Convert.ToInt64(ref4), resdecs, agentID, Convert.ToDouble(agentAmt), isAgreement);
                        }

                        if (notify.TransactionStatus == "0")
                        {
                            var detail = JsonConvert.DeserializeObject<FlightDetail>(notify.Detail);

                            #region <-- Update Transaction -->

                            writeLog("PhoneNumber : " + phoneNumber);
                            writeLog("Update Transaction");
                            if (!_agentWCF.ConfirmUpdate(Convert.ToInt64(txnId), detail.BookingSuccessCode, detail.DepartureDate, detail.Route, detail.ContactEmail, phoneNumber, "", "PA", "Success", agentID, email, Convert.ToDouble(agentAmt), Convert.ToDouble(agentFee), isAgreement, "N", availableBalance, out errMsg, out batchID))
                            {
                                writeLog("Error in ConfirmUpdate : " + errMsg);

                            }

                            writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availableBalance.ToString(System.Globalization.CultureInfo.InvariantCulture) + "| smsStatus:" + smsStatus);
                            var sms = string.Empty;

                            #endregion

                            #region <-- Send SMS -->

                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S")
                                {
                                    MessagingService.MessagingServiceClient smsWcf =
                                        new MessagingService.MessagingServiceClient();
                                    SMSHelper smsH = new SMSHelper();

                                    sms = smsH.GetMessageBiller(txnId, agentName, MapTaxID,
                                        billerName, ref1Name, ref2Name, ref3Name, ref4Name, detail.BookingSuccessCode,
                                        detail.DepartureDate, detail.Route, detail.ContactEmail,
                                        double.Parse(txnAmount).ToString("#,##0.00"),
                                        flightServiceFee,
                                        (Convert.ToDouble(txnAmount) +
                                         Convert.ToDouble(flightServiceFee)).ToString("#,##0.00"), branchCode);

                                    try
                                    {
                                        writeLog("Mobile No :" + phoneNumber + "| Message :" + sms + "| Sender Name :" + sendername + "|txn ID :" + txnId);
                                        var isSend = smsWcf.SendSms("", sms, phoneNumber, sendername);
                                        if (isSend._success)
                                        {
                                            _agentWCF.updateSMSStatus(Convert.ToInt64(txnId), "Y", out errMsg);
                                            writeLog("sendSMSWithTxnID ends.");
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        writeLog("SendSms Failed. " + ex.Message);
                                    }
                                }
                            }

                            #endregion

                            #region <-- Response Back To Client -->

                            rescode = "00";
                            resdecs = "Success";
                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = rescode;
                            confirmres.resdesc = resdecs;
                            confirmres.ref1 = Utils.ReplaceAmpersandString(detail.BookingSuccessCode);
                            confirmres.ref2 = Utils.ReplaceAmpersandString(detail.DepartureDate);
                            confirmres.ref3 = Utils.ReplaceAmpersandString(detail.Route);
                            confirmres.ref4 = Utils.ReplaceAmpersandString(detail.ContactEmail);
                            confirmres.ref5 = phoneNumber;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref4Name = ref4Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnId;
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = sms;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }

                        else
                        {
                            var resCode = "91";
                            return GetErrorResponseWithAddBalance(resCode, notify.ErrorMessage, txnID, resdecs, agentID,
                                agentAmount, isAgreement);
                        }
                    }
                    else
                    {
                        return Utils.getErrorRes("91", "Transaction not found.");
                    }
                }

                #endregion

                #region <-- B2B Order -->
                if (!string.IsNullOrEmpty(ConfigurationManager.AppSettings["B2BList"].ToString().Split(',').Where(x => x == MapTaxID).FirstOrDefault()))
                {


                    ConfirmBillerRequest request = new ConfirmBillerRequest()
                    {
                        TaxId = MapTaxID,
                        Ref4 = ref4,
                        IsAgreement = isAgreement,
                        AgentID = agentID,
                        AgentName = agentName,
                        PhoneNumber = ref5,
                        AgentAmt = agentAmount,
                        Email = email,
                        //IsSMS= false,

                        AppType = appType,
                        TopupType = topupType,
                        BillerName = billerName,
                        BillerLogo = billerLogo,
                        SMSStatus = smsStatus,
                        Password = password,
                        MessageId = messageid,
                        Ref1Name = ref1Name,
                        Ref2Name = ref2Name,
                        Ref3Name = ref3Name,
                        Ref4Name = ref4Name,
                        Ref5Name = ref5Name,
                        TodayTxnAmount = TodayTxnAmount,
                        TodayTxnCount = TodayTxnCount

                    };

                    ConfirmB2BManager confirmBillerManager = new ConfirmB2BManager();
                    string confirmRes = confirmBillerManager.Confirm2Biller_B2BOrder(request);
                    return confirmRes;
                }
                #endregion


                #region <-- Insert Transaction Region -->
                try
                {
                    writeLog(logAppender + "Insert Transaction Region Starts");
                    if (_agentWCF.getTransactionByMsgID(messageid))
                    {
                        writeLog(logAppender + "MessageID:" + messageid);
                        if (MapTaxID == "0000000000019")
                        {
                            #region <-- If Tax ID is GRAND GUARDIAN -->
                            if (_agentWCF.getTransactionByPolicyNo(ref1))
                            {
                                #region CheckFraud

                                try
                                {
                                    if (!CheckFraud(out errmsg, 0, email, billerid.ToString(), branchCode, agentCode, amt.ToString(), "", messageid))
                                    {
                                        writeLog(logAppender + "Check Fraud Fail : " + errMsg);
                                        rescode = "01";
                                        resdecs = errmsg;

                                        return Utils.getErrorRes(rescode, resdecs);
                                    }
                                }
                                catch (Exception ex)
                                {
                                    writeLog(logAppender + "Error in Check Fraud : " + ex.Message);
                                }
                                #endregion

                                #region <-- IF Policy No Is Not Duplicated Do Insert Transaction -->

                                double percent = (Convert.ToDouble(servicePercent) + Convert.ToDouble(agentPercent)) - Convert.ToDouble(oneStopPercent);
                                double flat = (Convert.ToDouble(serviceFlatFee) + Convert.ToDouble(agentFlatFee)) - Convert.ToDouble(oneStopFlatFee);
                                double earning = amt * (percent / 100) + flat;
                                string earningConfig = percent + "%+" + flat + "Ks";
                                
                                if (!_agentWCF.insertTransactionWithDeductBalanceAndSourceName(billerid, agentID, email, "MMK", "MM", ref1, ref2, ref3, ref4, ref5, agentCode, amt, serviceFeeDbl, oneStopFeeDbl, "OVERTHECOUNTER", email, version,
                                                      locLatitude, locLongitude, productdesc, "", branchCode, "", appType, messageid, isAgreement, agentAmount, billerAmount, BillerDiscountFee, BillerServiceFee, earning, earningConfig, billerSource, out txnID, out transactionDateTime, out errMsg, out batchID, out availablebalance, out ledgerbalance))
                                {

                                    writeLog(logAppender + "Error in insertTransaction : " + errMsg);
                                    rescode = "01";
                                    resdecs = "Error in Transaction";

                                    return Utils.getErrorRes(rescode, resdecs);
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(terminalId))
                                    {
                                        _agentWCF.AddTerminal(txnID, terminalId, out errMsg);
                                    }

                                    writeLog(logAppender + "After Insert Agent With Deduct Balance TXN ID : " + txnID.ToString() + " | BILLER ID : " + billerid + " | Agent ID:" + agentID + " | AvailableBalance:" + availablebalance + " | LedgerBalance :" + ledgerbalance);
                                }
                                #endregion
                            }
                            else
                            {

                                writeLog(logAppender + "This is Duplicated Policy No GGI");
                                rescode = "01";
                                resdecs = "Duplicated Policy No";

                                return Utils.getErrorRes(rescode, resdecs);
                            }


                            #endregion
                        }
                        else
                        {
                            string REFF3 = string.Empty;
                            string REFF5 = string.Empty;
                            if (topupType == "A")
                            {
                                REFF3 = "Airtime";
                                REFF5 = ref3;
                            }
                            else
                            {
                                REFF3 = ref3;
                                REFF5 = ref5;
                            }
                            if (MapTaxID != "7777777777777" && MapTaxID != ConfigurationManager.AppSettings["123RemitCashOut"].ToString() && MapTaxID != "0000000000018" && MapTaxID != "0000000000009" && MapTaxID != "0000000000010" && MapTaxID != "0000000000011")
                            {
                                #region CheckFraud
                                //TEST

                                try
                                {
                                    if (!CheckFraud(out errmsg, 0, email, billerid.ToString(), branchCode, agentCode, amt.ToString(), "", messageid))
                                    {
                                        writeLog(logAppender + "Check Fraud Fail : " + errMsg);
                                        rescode = "01";
                                        resdecs = errmsg;

                                        return Utils.getErrorRes(rescode, resdecs);
                                    }
                                }
                                catch (Exception)
                                {
                                }
                                #endregion

                                double percent = (Convert.ToDouble(servicePercent) + Convert.ToDouble(agentPercent)) - Convert.ToDouble(oneStopPercent);
                                double flat = (Convert.ToDouble(serviceFlatFee) + Convert.ToDouble(agentFlatFee)) - Convert.ToDouble(oneStopFlatFee);
                                double earning = amt * (percent / 100) + flat;
                                string earningConfig = percent + "%+" + flat + "Ks";

                                //(Service Fee% + Comm %)-Process % As % + (Service Fee Flat + Comm Flat) -  Process Flat As Flat
                                //#region <-- If MapTaxID is not contain above Non-Balance Base MapTaxID (Insert Transaction With Balance Deduction) -->
                               
                                if (!_agentWCF.insertTransactionWithDeductBalanceAndSourceName(billerid, agentID, email, "MMK", "MM", ref1, ref2, REFF3, ref4, REFF5, agentCode, amt, serviceFeeDbl, oneStopFeeDbl, "OVERTHECOUNTER", email, version,
                                                     locLatitude, locLongitude, productdesc, "", branchCode, "", appType, messageid, isAgreement, agentAmount, billerAmount, BillerDiscountFee, BillerServiceFee, earning, earningConfig,billerSource, out txnID, out transactionDateTime, out errMsg, out batchID, out availablebalance, out ledgerbalance))
                                {

                                    writeLog(logAppender + "Error in insertTransaction : " + errMsg);
                                    rescode = "01";
                                    resdecs = "Error in Transaction";

                                    return Utils.getErrorRes(rescode, resdecs);
                                }
                                else
                                {

                                    writeLog(logAppender + "Insert Transaction Region : After Insert Agent With Deduct Balance AgentAmount:" + agentAmount + "| TXN ID : " + txnID.ToString() + " | BILLER ID : " + billerid + " | Agent ID:" + agentID + " | AvailableBalance:" + availablebalance + " | LedgerBalance :" + ledgerbalance);
                                    if (MapTaxID.Trim() == ConfigurationManager.AppSettings["123RemitCashOut"].ToString() || MapTaxID.Trim() == ConfigurationManager.AppSettings["123RemitCashIn"].ToString())
                                    {
                                        ServiceFeeFor123Remit = serviceFeeDbl.ToString();
                                        serviceFeeDbl = tempServiceFeeDbl;
                                    }

                                    if (!string.IsNullOrEmpty(terminalId))
                                    {
                                        _agentWCF.AddTerminal(txnID, terminalId, out errMsg);
                                    }

                                }

                            }
                            else
                            {
                                #region CheckFraud

                                try
                                {
                                    if (!CheckFraud(out errmsg, 0, email, billerid.ToString(), branchCode, agentCode, amt.ToString(), "", messageid))
                                    {
                                        writeLog(logAppender + "Check Fraud Fail : " + errMsg);
                                        rescode = "01";
                                        resdecs = errmsg;

                                        return Utils.getErrorRes(rescode, resdecs);
                                    }
                                }
                                catch (Exception)
                                {
                                }
                                #endregion

                                #region <-- If MapTaxID is contain above Non-Balance Base MapTaxID (Insert Transaction Without Balance Deduction) -->
                                if (!_agentWCF.insertTransactionWithSourceName(billerid, agentID, email, "MMK", "MM", ref1, ref2, REFF3, ref4, REFF5, agentCode, amt, serviceFeeDbl, oneStopFeeDbl, "OVERTHECOUNTER", email, version,
                                                  locLatitude, locLongitude, productdesc, "", branchCode, "", appType, messageid, billerSource,billerAmount, BillerDiscountFee, BillerServiceFee, out txnID, out errMsg, out batchID))
                                {

                                    writeLog(logAppender + "Error in insertTransaction : " + errMsg);
                                    rescode = "01";
                                    resdecs = "Error in Transaction";

                                    return Utils.getErrorRes(rescode, resdecs);
                                }
                                else
                                {
                                    writeLog(logAppender + "TXN ID : " + txnID.ToString() + " | BILLER ID : " + billerid);
                                    if (MapTaxID.Trim() == ConfigurationManager.AppSettings["123RemitCashOut"].ToString() || MapTaxID.Trim() == ConfigurationManager.AppSettings["123RemitCashIn"].ToString())
                                    {
                                        ServiceFeeFor123Remit = serviceFeeDbl.ToString();
                                        serviceFeeDbl = tempServiceFeeDbl;
                                    }

                                    if (!string.IsNullOrEmpty(terminalId))
                                    {
                                        _agentWCF.AddTerminal(txnID, terminalId, out errMsg);
                                    }
                                }
                                #endregion
                            }
                        }
                    }
                    else
                    {
                        writeLog(logAppender + "This is Duplicated request");
                        rescode = "01";
                        resdecs = "Your transaction may be successful. Please go to History";

                        return Utils.getErrorRes(rescode, resdecs);

                    }
                    writeLog(logAppender + "Insert Transaction Region Ends");
                }
                catch (Exception ex)
                {
                    writeLog(logAppender + "Exception in insertTransaction : " + ex.ToString());

                    rescode = "01";
                    resdecs = "Error in Transaction";

                    return Utils.getErrorRes(rescode, resdecs);
                }


                #endregion
                writeLog(logAppender + "MessageId : " + messageid + ", TxnId : " + txnID + " ......... Biller Confirm Starts");

                bool TopUpHistory = false;
                bool AddAmountToUser = false;
                logAppender += "txnId : " + txnID + " | taxId : " + MapTaxID + " | ";
                try
                {
                    writeLog(logAppender + "Biller Confirm region Starts");

                    #region eService Factory
                    var factory = new eServiceFactory();
                    var billerManager = factory.GetBillerManager(taxID);
                    string eServiceBillerCode = GetBillerCode(taxID);
                    if (billerManager != null)
                    {
                        var billerConfirmResponseModel = new ConfirmResponseModel()
                        {
                            taxID = taxID,
                            email = email,
                            password = password,
                            messageid = messageid,
                            billername = billerName,
                            billerlogo = billerLogo,
                            billersource = billerSource,
                            ref1 = ref1,
                            ref2 = ref2,
                            ref3 = ref3,
                            ref4 = ref4,
                            ref5 = ref5,
                            ref6 = ref6,
                            ref1Name = ref1Name,
                            ref2Name = ref2Name,
                            ref3Name = ref3Name,
                            ref4Name = ref4Name,
                            ref5Name = ref5Name,
                            availablebalance = availablebalance.ToString(),
                            txnID = txnID.ToString(),
                            TodayTxnAmount = TodayTxnAmount,
                            TodayTxnCount = TodayTxnCount,
                            smsMsg = smsMsg
                        };
                        var billerResponseInfo = new ResponseInfo()
                        {
                            agentID = agentID,
                            txnID = txnID,
                            agentAmount = agentAmount,
                            isAgreement = isAgreement,
                            agentFeeDbl = agentFeeDbl,
                            smsStatus = smsStatus,
                            availablebalance = availablebalance,
                            appType = appType,
                            topupType = topupType,
                            agentName = agentName,
                            MapTaxID = MapTaxID,
                            serviceFee = serviceFee,
                            totalAmount = totalAmount,
                            branchCode = branchCode,
                            sendername = sendername,
                            amount = amount,
                            billerCode = eServiceBillerCode
                        };
                        return billerManager.Confirm(billerConfirmResponseModel, billerResponseInfo);
                    }

                    #endregion

                    #region <-- SKYNET -->
                    if (MapTaxID == ConfigurationManager.AppSettings["SkynetTaxId"].ToString())
                    {
                        Utils.WriteLog_Biller(logAppender + "MessageId : " + messageid + ", TxnId : " + txnID + ", SKYNET Confirm Start");
                        SkyNetConfirmResponseModel confirmres = new SkyNetConfirmResponseModel();
                        confirmres.taxID = taxID;
                        confirmres.email = email;
                        confirmres.password = password;
                        confirmres.messageid = messageid;
                        confirmres.billername = billerName;
                        confirmres.billerlogo = billerLogo;
                        confirmres.ref1 = ref1;
                        confirmres.ref2 = ref2;
                        confirmres.ref3 = ref3;
                        confirmres.ref4 = ref4;
                        confirmres.ref5 = ref5;
                        confirmres.ref1Name = ref1Name;
                        confirmres.ref2Name = ref2Name;
                        confirmres.ref3Name = ref3Name;
                        confirmres.ref4Name = ref4Name;
                        confirmres.ref5Name = ref5Name;
                        confirmres.availablebalance = availablebalance.ToString();
                        confirmres.txnID = txnID.ToString();
                        confirmres.TodayTxnAmount = TodayTxnAmount;
                        confirmres.TodayTxnCount = TodayTxnCount;
                        confirmres.smsMsg = smsMsg;
                        confirmres.txnID = txnID.ToString();
                        confirmres.PaymentType = paymentType;

                        Utils.WriteLog_Biller(logAppender + "MessageId : " + messageid + ", TxnId : " + txnID + ", SKYNET Confirm Response Initiated");
                        return (new SkyNetManager()).ConfrimToEBA(confirmres, amount, agentID, agentAmount, isAgreement, agentFeeDbl, smsStatus,
                            availablebalance, appType, topupType, agentName, MapTaxID, serviceFee, totalAmount, branchCode, sendername, messageid);
                    }
                    #endregion <-- SKYNET -->

                    #region <-- 123 Biller -->
                    if (MapTaxID == "1230000000000") //|| MapTaxID == "0000000000010" || MapTaxID == "0000000000012" || taxID == "0000000000011" || taxID == "0000000000009" || taxID == "0000000000008" || taxID == "0000000000007" || taxID == "0000000000013" || taxID == "0000000000014")/////For 123API
                    {
                        writeLog(logAppender + "MessageId : " + messageid + " Transaction ID : " + taxID + " This is 1-2-3 confirm starts.");

                        string amountTo123 = Utils.getFromOrginalTo12Digit(amount);
                        // Version+ TimeStamp+ MessageID + AgentCode+ PaymentCode 
                        string agentcode = ConfigurationManager.AppSettings["123ChannelCode"].ToString(); //"1STOP";
                        // Version+ TimeStamp+ MessageID + AgentCode+ PaymentCode + InvoiceNo + Amount + ConfirmedBy+ LocLatitude + LocLongitude
                        string hashstr = Utils.hashstrConfirmReq123(version, ts, messageid, agentcode, ref1, ref2, amountTo123, confirmedby, locLatitude, locLongitude);

                        string reqXML123 = "<ConfirmReq><Version>" + version + "</Version><TimeStamp>" + ts
                            + "</TimeStamp><MessageID>" + messageid + "</MessageID>"
                            + "<AgentCode>" + agentcode
                            + "</AgentCode><PaymentCode>" + ref1
                            + "</PaymentCode><InvoiceNo>" + ref2
                            + "</InvoiceNo><Amount>" + amountTo123
                            + "</Amount><ConfirmedBy>" + confirmedby + "</ConfirmedBy><LocLatitude>" + locLatitude
                            + "</LocLatitude><LocLongitude>" + locLongitude
                            + "</LocLongitude><TranRef>" + txnID + "</TranRef><HashValue>" + hashstr
                            + "</HashValue></ConfirmReq>";
                        RouteAPI api_service = new RouteAPI();
                        //writeLog(logAppender+"123 Confirm Req : " + reqXML123);

                        double avalbal = 0;
                        double legbal = 0;

                        if (!_agentWCF.InsertTransactionLog(txnID, "ConfirmReq", reqXML123, out errMsg))
                        {
                            writeLog(logAppender + "MessageId : " + messageid + " Transaction ID : " + txnID + " 123 Confirm : Error in InsertTransactionLog Req : " + errMsg);
                        }

                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            #region <-- When Simulator is turn on -->
                            writeLog(logAppender + "Simulator Y");


                            #region <-- Edit by Tz -->

                            int batchid = 0;
                            //double availablebalance = 0;
                            //double ledgerbalance = 0;
                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                        agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "MessageId : " + messageid + " Error in ConfirmUpdate : " + errMsg);

                            }
                            else
                            {
                                writeLog(logAppender + "MessageId : " + messageid + " After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            ConfirmResponseModel conRes = new ConfirmResponseModel();
                            conRes.taxID = taxID;
                            conRes.email = email;
                            conRes.password = password;
                            conRes.messageid = messageid;
                            conRes.billerlogo = billerLogo;
                            conRes.billername = billerName;
                            conRes.rescode = "00";
                            conRes.resdesc = "Successed";
                            conRes.ref1 = ref1;
                            conRes.ref2 = System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                            conRes.ref3 = string.Empty;
                            conRes.ref4 = string.Empty;
                            conRes.ref5 = string.Empty;
                            conRes.ref1Name = "Payment Code";
                            conRes.ref2Name = "Invoice No";
                            conRes.ref3Name = ref3Name;
                            conRes.ref4Name = ref4Name;
                            conRes.ref5Name = ref5Name;
                            conRes.availablebalance = availablebalance.ToString();
                            conRes.txnID = txnID.ToString();
                            conRes.TodayTxnCount = TodayTxnCount;
                            conRes.TodayTxnAmount = TodayTxnAmount;
                            conRes.smsMsg = smsMsg;
                            return Utils.getConfirmRes(conRes);
                            #endregion Edit by Tz
                            #endregion
                        }
                        else
                        {
                            writeLog(logAppender + "MessageId : " + messageid + " Transaction ID : " + txnID + " 123 Confirm Req : " + reqXML123);
                            try
                            {
                                response = api_service.Apicalling123Confirm(reqXML123, messageid, txnID);

                                writeLog(logAppender + "MessageId : " + messageid + " Transaction ID : " + txnID + " 123 Confirm Res : " + response);
                            }
                            catch (Exception ex)
                            {
                                writeLog(logAppender + "MessageId : " + messageid + " Transaction ID : " + txnID + " 123 Confirm catch : Exception Error in Confirm Request :" + ex.Message);
                                writeLog(logAppender + "MessageId : " + messageid + " Transaction ID : " + txnID + " 123 Confirm catch : $$$$$$$$$$$$Enter to cache Block$$$$$$$$$$$$$$$");
                                string msg = string.Empty;
                                #region <-- When exception was occur at confirm request Re check 123 Payment Status if Status respose is paid already update 1Stop transaction to Paid -->
                                string hashstrs = Utils.hashstrReq123(version, ts, messageid, agentcode, ref1);

                                #region <-- Inquiry request for check 123 paid status -->

                                string checkstatusreqXML123 = "<InquiryReq><Version>" + version + "</Version><TimeStamp>" + ts
                                    + "</TimeStamp>"
                                    + "<MessageID>" + messageid + "</MessageID>"
                                    + "<AgentCode>" + agentcode + "</AgentCode>"
                                   + "<PaymentCode>" + ref1
                                    + "</PaymentCode><RequestBy>" + taxID
                                    + "</RequestBy><Hash>" + hashstrs
                                    + "</Hash></InquiryReq>";
                                #endregion
                                writeLog(logAppender + "MessageId : " + messageid + " Transaction ID : " + txnID + " 123 Confirm catch : Exception Error Occur at 1-2-3 confirm request recheck payment status of 123 Request:" + checkstatusreqXML123);
                                response = api_service.Apicalling123(checkstatusreqXML123);
                                writeLog(logAppender + "MessageId : " + messageid + " Transaction ID : " + txnID + " 123 Confirm catch : 123 Inquiry Res After Getting payment status Request  for reaponse timeout exception handler: " + response);


                                Hashtable htts = Utils.getHTableFromXML(response);
                                string tempcode = string.Empty;
                                string tempdesp = string.Empty;
                                string tempmerchantid = string.Empty;
                                string tempmerchantname = string.Empty;
                                string tempRef1 = string.Empty;
                                string tempRef2 = string.Empty;
                                string tempamt = string.Empty;
                                string tempproductdesc = string.Empty;
                                string tempstatus = string.Empty;
                                string tempexpiry = string.Empty;

                                StringBuilder sbs = new StringBuilder();
                                //  out  version, out ts, out  messageid, out agentcode, out  code, out  desp, out  merchantid, out  merchantname, out  ref1, out  ref2, out  amount, out  productdesc, out  status, out expiry
                                if (!IsValidateInquiryRes123(htts, out version, out ts, out messageid, out agentcode, out tempcode, out tempdesp, out tempmerchantid, out tempmerchantname, out tempRef1, out tempRef2, out tempamt, out tempproductdesc, out tempstatus, out tempexpiry))
                                {
                                    return Utils.getErrorRes(tempcode, tempdesp);
                                }
                                if (tempcode == "02")
                                {
                                    #region <-- If status is PA doing this -->
                                    mobileNo = ref3;
                                    if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                                 agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                                    {
                                        writeLog(logAppender + "MessageId : " + messageid + " Transaction ID : " + txnID + " 123 Confirm catch : Error in ConfirmUpdate : " + errMsg);

                                    }
                                    else
                                    {
                                        writeLog(logAppender + "MessageId : " + messageid + " Transaction ID : " + txnID + " 123 Confirm catch : After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                                    }

                                    if (appType == "CS" || appType == "MS")
                                    {
                                        writeLog(logAppender + "MessageId : " + messageid + " Transaction ID : " + txnID + " 123 Confirm catch : **********Service Fees:************" + serviceFee.ToString());
                                        SMSHelper smsH = new SMSHelper();
                                        MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();

                                        smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, ref1Name, ref2Name, "", "Ref", ref1, ref2, "", txnID.ToString(),
                                            double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);


                                        try
                                        {
                                            writeLog(logAppender + "MessageId : " + messageid + " Transaction ID : " + txnID + " 123 Confirm catch : sendSMSWithTxnID starts.");
                                            writeLog(logAppender + "MessageId : " + messageid + " Transaction ID : " + txnID + " 123 Confirm catch : Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                            smsWcf.SendSms(txnID.ToString(), smsMsg, mobileNo, sendername);
                                            writeLog(logAppender + "MessageId : " + messageid + " Transaction ID : " + txnID + " 123 Confirm catch : sendSMSWithTxnID ends.");
                                        }
                                        catch
                                        {
                                        }
                                    }


                                    ConfirmResponseModel conRes = new ConfirmResponseModel();
                                    conRes.taxID = taxID;
                                    conRes.email = email;
                                    conRes.password = password;
                                    conRes.messageid = messageid;
                                    conRes.billerlogo = billerLogo;
                                    conRes.billername = billerName;
                                    conRes.rescode = "00";
                                    conRes.resdesc = "Successed";
                                    conRes.ref1 = ref1;
                                    conRes.ref2 = ref2;
                                    conRes.ref3 = string.Empty;
                                    conRes.ref4 = string.Empty;
                                    conRes.ref5 = mobileNo;
                                    conRes.ref1Name = ref1Name;
                                    conRes.ref2Name = ref2Name;
                                    conRes.ref3Name = ref3Name;
                                    conRes.ref4Name = ref4Name;
                                    conRes.ref5Name = ref5Name;
                                    conRes.availablebalance = availablebalance.ToString();
                                    conRes.txnID = txnID.ToString();
                                    conRes.TodayTxnCount = TodayTxnCount;
                                    conRes.TodayTxnAmount = TodayTxnAmount;
                                    conRes.smsMsg = smsMsg;
                                    return Utils.getConfirmRes(conRes);
                                    #endregion

                                }
                                #endregion
                            }
                        }

                        if (!_agentWCF.InsertTransactionLog(txnID, "ConfirmRes", response, out errMsg))
                        {
                            writeLog(logAppender + "MessageId : " + messageid + " Transaction ID : " + txnID + " 123 Confirm : Error in InsertTransactionLog Res : " + errMsg);
                        }

                        Hashtable htt = Utils.getHTableFromXML(response);
                        //writeLog(logAppender+"123 Confirm Res : " + response);
                        // break response from Biller 
                        StringBuilder sb = new StringBuilder();
                        mobileNo = ref3;
                        if (!IsValidateConfirmRes123(htt, out rescode, out resdecs, out version, out ts, out rescode, out resdecs))
                        {
                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }
                        if (rescode != "00")
                        {
                            // rescode = "01";                           
                            //double availablebalance = 0;


                            if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                            {
                                writeLog(logAppender + "MessageId : " + messageid + " Transaction ID : " + txnID + " 123 confirm : Error in updateError : " + errMsg);
                            }

                            ConfirmResponseModel conRes = new ConfirmResponseModel();
                            conRes.taxID = taxID;
                            conRes.email = email;
                            conRes.password = password;
                            conRes.messageid = messageid;
                            conRes.billerlogo = billerLogo;
                            conRes.billername = billerName;
                            conRes.rescode = rescode;
                            conRes.resdesc = resdecs;
                            conRes.ref1 = ref1;
                            conRes.ref2 = ref2;
                            conRes.ref3 = string.Empty;
                            conRes.ref4 = string.Empty;
                            conRes.ref5 = mobileNo;
                            conRes.ref1Name = ref1Name;
                            conRes.ref2Name = ref2Name;
                            conRes.ref3Name = ref3Name;
                            conRes.ref4Name = ref4Name;
                            conRes.ref5Name = ref5Name;
                            conRes.availablebalance = availablebalance.ToString();
                            conRes.txnID = txnID.ToString();
                            conRes.TodayTxnCount = TodayTxnCount;
                            conRes.TodayTxnAmount = TodayTxnAmount;
                            conRes.smsMsg = smsMsg;
                            return Utils.getConfirmRes(conRes);
                        }
                        else
                        {
                            int batchid = 0;
                            //double availablebalance = 0;
                            //double ledgerbalance = 0;

                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                         agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "MessageId : " + messageid + " Transaction ID : " + txnID + " 123 Confirm : Error in ConfirmUpdate : " + errMsg);

                            }
                            else
                            {
                                writeLog(logAppender + "MessageId : " + messageid + " Transaction ID : " + txnID + " 123 Confirm : After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }
                            // writeLog(logAppender+"After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                            if (appType == "CS" || appType == "MS")
                            {
                                writeLog(logAppender + "MessageId : " + messageid + " Transaction ID : " + txnID + " 123 Confirm **********Service Fees:************" + serviceFee.ToString());
                                SMSHelper smsH = new SMSHelper();
                                MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();

                                smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, ref1Name, ref2Name, "", "Ref", ref1, ref2, "", txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                try
                                {
                                    writeLog(logAppender + "MessageId : " + messageid + " Transaction ID : " + txnID + " 123 Confirm : sendSMSWithTxnID starts.");

                                    writeLog(logAppender + "MessageId : " + messageid + " Transaction ID : " + txnID + " 123 Confirm : Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                    smsWcf.SendSms(txnID.ToString(), smsMsg, mobileNo, sendername);
                                    writeLog(logAppender + "MessageId : " + messageid + " Transaction ID : " + txnID + " 123 Confirm : sendSMSWithTxnID ends.");
                                }
                                catch (Exception ex)
                                {
                                }
                            }
                            Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));

                            ConfirmResponseModel conRes = new ConfirmResponseModel();
                            conRes.taxID = taxID;
                            conRes.email = email;
                            conRes.password = password;
                            conRes.messageid = messageid;
                            conRes.billerlogo = billerLogo;
                            conRes.billername = billerName;
                            conRes.rescode = rescode;
                            conRes.resdesc = resdecs;
                            conRes.ref1 = ref1;
                            conRes.ref2 = ref2;
                            conRes.ref3 = string.Empty;
                            conRes.ref4 = string.Empty;
                            conRes.ref5 = mobileNo;
                            conRes.ref1Name = ref1Name;
                            conRes.ref2Name = ref2Name;
                            conRes.ref3Name = ref3Name;
                            conRes.ref4Name = ref4Name;
                            conRes.ref5Name = ref5Name;
                            conRes.availablebalance = availablebalance.ToString();
                            conRes.txnID = txnID.ToString();
                            conRes.TodayTxnCount = TodayTxnCount;
                            conRes.TodayTxnAmount = TodayTxnAmount;
                            conRes.smsMsg = smsMsg;
                            return Utils.getConfirmRes(conRes);
                        }
                        // }
                    }
                    #endregion

                    #region <-- Putet Tz -->
                    else if (MapTaxID == "0000000000006") /////For PutetAPI
                    {


                        //<PINReq> 
                        // <Version>1.0</Version> 
                        // <TimeStamp>yyyyMMddhhmmssffff</TimeStamp> 
                        // <MessageID>eee43434333</MessageID> 
                        // <PINType></PINType> 
                        // <Amount></Amount>
                        // <HashValue></HashValue> 
                        //     </PINReq>


                        //                  <Version>1.0</Version>
                        //<TimeStamp>2015-05-22 18:29:40:238</TimeStamp>
                        //<MessageID>dfea8909-b7f9-456f-8ab1-79a8d51a5b86</MessageID>
                        //<PINType>3M</PINType>
                        //<Amount>000000148500</Amount>

                        //version = "1.0";
                        //ts = "2015-05-22 18:29:40:238";
                        //messageid = "dfea8909-b7f9-456f-8ab1-79a8d51a5b86";
                        //ref1 = "3M";
                        //amount = "1485";
                        writeLog(logAppender + "This is Putet.");
                        int batchid = 0;
                        //double availablebalance = 0;
                        //double ledgerbalance = 0;
                        string amountToPutet = Utils.getFromOrginalTo12Digit(amount);
                        string hashstr = Utils.hashstrConfirmPutetReq(version, ts, messageid, ref1, amountToPutet);
                        double avalbal = 0;
                        double legbal = 0;

                        string reqXMLPutet = "<PINReq><Version>1.0</Version><TimeStamp>" + ts
                            + "</TimeStamp><MessageID>" + messageid + "</MessageID>"
                            + "<PINType>" + ref1 + "</PINType>"
                            + "<Amount>" + amountToPutet + "</Amount>"

                            + "<HashValue>" + hashstr.ToLower()
                            + "</HashValue></PINReq>";

                        RouteAPI api_service = new RouteAPI();


                        if (!_agentWCF.InsertTransactionLog(txnID, "ConfirmReq", reqXMLPutet, out errMsg))
                        {
                            writeLog(logAppender + "Error in InsertTransactionLog Req : " + errMsg);
                        }
                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            writeLog(logAppender + "Simulator Y");
                            StringBuilder sb = new StringBuilder();

                            //<PINRes> 
                            //<Version>1.0</Version> 
                            //<TimeStamp>yyyyMMddhhmmssffff</TimeStamp> 
                            //<MessageID>eee43434333</MessageID>
                            //<ResCode>00</ResCode>
                            //<ResDesc></ResDesc> 
                            //<PINType></PINType> 
                            //<Amount></Amount> 
                            //<PIN>1234567890123456</PIN> 
                            //<Expiry></Expiry> 
                            //<SerialNo></SerialNo> 
                            //<HashValue></HashValue>
                            // </PINRes>
                            string testpin = System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                            string time = System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                            string hash = Utils.hashstrConfirmPutetRes(version, time, messageid, "00", "Success", ref1, amount, testpin, "", "54185");
                            string lowercasehash = hash.ToLower();
                            sb.Append("<PINRes>");
                            sb.Append("<Version>1.0</Version>");
                            sb.Append("<TimeStamp>" + time + "</TimeStamp>");//System.DateTime.Now.ToString("yyyyMMddhhmmssffff")
                            sb.Append("<MessageID>" + messageid + "</MessageID>");


                            sb.Append("<ResDesc>" + "Success" + "</ResDesc>");
                            sb.Append("<PINType>" + ref1 + "</PINType>");
                            sb.Append("<Amount>" + amount + "</Amount>");
                            sb.Append("<PIN>" + testpin + "</PIN>");
                            sb.Append("<Expiry></Expiry>");
                            sb.Append("<SerialNo>" + "54185" + "</SerialNo>");
                            sb.Append("<ResCode>00</ResCode>");
                            sb.Append("<HashValue>" + lowercasehash + "</HashValue>");
                            sb.Append("</PINRes>");
                            // writeLog(logAppender+"RES XML : " + sb.ToString());
                            response = sb.ToString();
                            // return sb.ToString();
                        }
                        else
                        {
                            writeLog(logAppender + "Putet Confirm Req : " + reqXMLPutet);
                            response = api_service.ApicallingPutet(reqXMLPutet);
                            writeLog(logAppender + "Putet Confirm Res : " + response);
                        }
                        if (!_agentWCF.InsertTransactionLog(txnID, "ConfirmRes", response, out errMsg))
                        {
                            writeLog(logAppender + "Error in InsertTransactionLog Res : " + errMsg);
                        }
                        Hashtable htt = Utils.getHTableFromXML(response);

                        // break response from Biller 
                        mobileNo = ref3;
                        if (!IsValidateConfirmReqPutet(htt, out rescode, out resdecs, out version,
                            out messageid, out ref1, out ref2, out ref3))
                        {

                            writeLog(logAppender + "Error in IsValidateConfirmReqPutet : " + resdecs);
                            return GeterrorResponse(rescode, resdecs, txnID, resdecs);

                        }
                        if (rescode != "00")
                        {

                            if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                            {
                                writeLog(logAppender + "Error in updateError : " + errMsg);
                            }

                            ConfirmResponseModel conRes = new ConfirmResponseModel();
                            conRes.taxID = taxID;
                            conRes.email = email;
                            conRes.password = password;
                            conRes.messageid = messageid;
                            conRes.billername = billerName;
                            conRes.billerlogo = billerLogo;
                            conRes.rescode = rescode;
                            conRes.resdesc = resdecs;
                            conRes.ref1 = ref1;
                            conRes.ref2 = ref2;
                            conRes.ref3 = string.Empty;
                            conRes.ref4 = ref3;
                            conRes.ref5 = mobileNo;
                            conRes.ref1Name = ref1Name;
                            conRes.ref2Name = ref2Name;
                            conRes.ref3Name = string.Empty;
                            conRes.ref4Name = ref3Name;
                            conRes.ref5Name = ref5Name;
                            conRes.batchID = batchid.ToString();
                            conRes.availablebalance = availablebalance.ToString();
                            conRes.txnID = txnID.ToString();
                            conRes.TodayTxnCount = TodayTxnCount;
                            conRes.TodayTxnAmount = TodayTxnAmount;
                            conRes.smsMsg = smsMsg;
                            return Utils.getConfirmRes(conRes);


                        }
                        else
                        {
                            writeLog(logAppender + "***************Enter Confirm Update *******************");
                            //if (_agentWCF.ConfirmUpdate(out  errMsg, out  batchID, out  availablebalance, out  ledgerbalance, txnID,
                            //    ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                            //    agentAmount, agentFeeDbl, isAgreement))
                            //{
                            //    writeLog(logAppender+"After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                     agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);

                                resdecs = "Error in update database";
                                rescode = "06";
                                //if (!_agentWCF.updateError(out errMsg, txnID, "ER", resdecs))
                                //{
                                //    writeLog(logAppender+"Error in updateError : " + errMsg);
                                //}
                                //return Utils.getErrorRes(rescode, "Transaction fail");
                                return GetErrorResponseWithAddBalance(rescode, "Transaction fail", txnID, resdecs, agentID, agentAmount, isAgreement);
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            SMSHelper smsH = new SMSHelper();
                            ref2 = (ref2 == "3M" ? "3-Month" : ref2 == "6M" ? "6-Month" : "12-Month");
                            // amount = (ref2 == "3M" ? "1500" : ref2 == "6M" ? "3000" : "6000");
                            // totalAmount = (ref2 == "3M" ? "1500" : ref2 == "6M" ? "3000" : "6000");
                            smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, "Code", "Duration", "", "Ref", ref3, ref2, "", txnID.ToString(),
                                double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);
                            if (appType == "CS" || appType == "MS")
                            {

                                MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();


                                try
                                {
                                    writeLog(logAppender + "sendSMSWithTxnID starts.");
                                    // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                    writeLog(logAppender + "Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                    smsWcf.SendSms(txnID.ToString(), smsMsg, mobileNo, sendername);
                                    writeLog(logAppender + "sendSMSWithTxnID ends.");
                                }
                                catch (Exception ex)
                                {
                                }
                            }

                            ConfirmResponseModel conRes = new ConfirmResponseModel();
                            conRes.taxID = taxID;
                            conRes.email = email;
                            conRes.password = password;
                            conRes.messageid = messageid;
                            conRes.billername = billerName;
                            conRes.billerlogo = billerLogo;
                            conRes.rescode = rescode;
                            conRes.resdesc = resdecs;
                            conRes.ref1 = ref1;
                            conRes.ref2 = ref2;
                            conRes.ref3 = string.Empty;
                            conRes.ref4 = ref3;
                            conRes.ref5 = mobileNo;
                            conRes.ref1Name = ref1Name;
                            conRes.ref2Name = ref2Name;
                            conRes.ref3Name = string.Empty;
                            conRes.ref4Name = ref4Name;
                            conRes.ref5Name = ref5Name;
                            conRes.batchID = batchid.ToString();
                            conRes.availablebalance = availablebalance.ToString();
                            conRes.txnID = txnID.ToString();
                            conRes.TodayTxnCount = TodayTxnCount;
                            conRes.TodayTxnAmount = TodayTxnAmount;
                            conRes.smsMsg = smsMsg;
                            return Utils.getConfirmRes(conRes);

                        }
                    }
                    #endregion

                    #region <-- EBAGiftCardEPinBillers -->
                    else if (ConfigurationManager.AppSettings["EBAGiftCardEPinBillersList"].ToString().Split(',').Where(x => x == MapTaxID).Any())
                    {

                        var billerCode = GetBillerCode(MapTaxID);
                        Utils.WriteLog_Biller(billerCode + " Confirm Response Initiated : MessageId : " + messageid);

                        var confirmres = new ConfirmResponseModel
                        {
                            taxID = taxID,
                            email = email,
                            password = password,
                            messageid = messageid,
                            billername = billerName,
                            billerlogo = billerLogo,
                            ref1 = ref1,
                            ref2 = ref2,
                            ref3 = string.Empty,
                            ref4 = ref4,
                            ref5 = ref3,
                            ref1Name = ref1Name,
                            ref2Name = ref2Name,
                            ref3Name = ref3Name,
                            ref4Name = ref4Name,
                            ref5Name = ref5Name,
                            availablebalance = availablebalance.ToString(),
                            txnID = txnID.ToString(),
                            TodayTxnAmount = TodayTxnAmount,
                            TodayTxnCount = TodayTxnCount,
                            smsMsg = smsMsg
                        };

                        var responseInfo = new ResponseInfo
                        {
                            agentID = agentID,
                            txnID = txnID,
                            agentAmount = agentAmount,
                            isAgreement = isAgreement,
                            agentFeeDbl = agentFeeDbl,
                            smsStatus = smsStatus,
                            availablebalance = availablebalance,
                            appType = appType,
                            topupType = topupType,
                            agentName = agentName,
                            MapTaxID = MapTaxID,
                            serviceFee = serviceFee,
                            totalAmount = totalAmount,
                            branchCode = branchCode,
                            sendername = sendername
                        };
                        return (new EBAGiftCardEPinManager()).ConfrimToEBA(confirmres, responseInfo, amount, billerCode);

                    }
                    #endregion

                    #region <-- Easypoing Code Generate Tz 28-sep-2015 -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["EasyPointTaxId"].ToString()) /////For Easy Point/MercyCrop(Shan)/MercyCrop(Rakhine) Code Generate
                    {
                        writeLog("This is EasyPoint DigitalCode Buy.");
                        string agnid = string.Empty;
                        ref2 = productdesc;
                        mobileNo = ref3;
                        Utils.WriteLog_Biller("EasyPoint Confirm Start : messageId : " + messageid);
                        var confirmres = new ConfirmResponseModel
                        {
                            taxID = taxID,
                            email = email,
                            password = password,
                            messageid = messageid,
                            billername = billerName,
                            billerlogo = billerLogo,
                            ref1 = ref1,
                            ref2 = ref2,
                            ref3 = ref3,
                            ref4 = string.Empty,
                            ref5 = mobileNo,
                            ref1Name = ref1Name,
                            ref2Name = ref2Name,
                            ref3Name = ref3Name,
                            ref4Name = string.Empty,
                            ref5Name = ref5Name,
                            availablebalance = availablebalance.ToString(),
                            txnID = txnID.ToString(),
                            TodayTxnAmount = TodayTxnAmount,
                            TodayTxnCount = TodayTxnCount,
                            smsMsg = smsMsg
                        };

                        var responseInfo = new ResponseInfo
                        {
                            agentID = agentID,
                            txnID = txnID,
                            agentAmount = agentAmount,
                            isAgreement = isAgreement,
                            agentFeeDbl = agentFeeDbl,
                            smsStatus = smsStatus,
                            availablebalance = availablebalance,
                            appType = appType,
                            topupType = topupType,
                            agentName = agentName,
                            MapTaxID = MapTaxID,
                            serviceFee = serviceFee,
                            totalAmount = totalAmount,
                            branchCode = branchCode,
                            sendername = sendername
                        };
                        Utils.WriteLog_Biller("EasyPoint Confirm Response Initiated : MessageId : " + messageid);
                        return (new EasyPointManager()).ConfrimToEBA(confirmres, amount, responseInfo);
                    }
                    #endregion

                    #region <-- MarlarMyine/MercyCorps Code Generate Tz 2017-Feb-07 -->
                    else if (MapTaxID == "0000000000018" || MapTaxID == "0000000000010") ///
                    {
                        writeLog(logAppender + "This is Marlarmyaing DigitalCode Buy.");
                        int batchid = 0;
                        //double availablebalance = 0;
                        //double ledgerbalance = 0;
                        string agnid = string.Empty;
                        string customerName = string.Empty;
                        customerName = ref1;
                        ref2 = productdesc;
                        string amountToeasypoint = Utils.getFromOrginalTo12Digit(amount);
                        string easypointid = MapTaxID == "0000000000010" ? ConfigurationManager.AppSettings["MercycorpsAgentID"].ToString() : ConfigurationManager.AppSettings["easyPointMercyID"].ToString();
                        string key = MapTaxID == "0000000000010" ? ConfigurationManager.AppSettings["MercycorpsGenerateKey"].ToString() : ConfigurationManager.AppSettings["easyPointMercyKey"].ToString();
                        string hashstr = Utils.hashstrConfirmEasyPointReq(messageid, easypointid.ToString(), amountToeasypoint, email, locLatitude, locLongitude, key);
                        double avalbal = 0;
                        double legbal = 0;

                        string reqXMLeasyPoint = "<ConfirmReq><Version>1.0</Version><TimeStamp>" + ts
                            + "</TimeStamp><MessageID>" + messageid + "</MessageID>"
                            + "<AgentID>" + easypointid + "</AgentID>"
                            + "<Amount>" + amountToeasypoint + "</Amount>"
                            + "<ConfirmedBy>" + email + "</ConfirmedBy>"
                            + "<CodeDesc>" + productdesc + "</CodeDesc>"
                            + "<LocLatitude>" + locLatitude + "</LocLatitude>"
                             + "<LocLongitude>" + locLongitude + "</LocLongitude>"

                            + "<HashValue>" + hashstr
                            + "</HashValue></ConfirmReq>";

                        RouteAPI api_service = new RouteAPI();


                        if (!_agentWCF.InsertTransactionLog(txnID, "ConfirmReq", reqXMLeasyPoint, out errMsg))
                        {
                            writeLog(logAppender + "Error in InsertTransactionLog Req : " + errMsg);
                        }
                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            #region <-- If Simulator is on -->
                            writeLog(logAppender + "Simulator Y");
                            //                         <ConfirmRes>
                            //<Version>1.0</Version>
                            //<TimeStamp>yyyyMMddhhmmssffff</TimeStamp>
                            //<MessageID>eee43434333</MessageID>
                            //<AgentID>2</AgentID>
                            //<ResCode>00</ResCode>
                            //<ResDesc></ResDesc>
                            //<DigitalCode></DigitalCode>  // 18 Digit codes
                            //<SerialNo></SerialNo>  // 18 Digit codes
                            //<Expiry></Expiry>  
                            //<HashValue></HashValue> // MessageID + AgentID + ResCode+ ResDesc + DigitalCode + SerialNo + Expiry
                            //</ConfirmRes>

                            StringBuilder sb = new StringBuilder();


                            string testpin = System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                            string time = System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                            string expirys = System.DateTime.Now.ToShortDateString();
                            string hash = Utils.hashstrConfirmeasypointRes(messageid, easypointid.ToString(), "00", "Success", time, time, expirys, "5000", key);
                            // string lowercasehash = hash.ToLower();
                            sb.Append("<ConfirmRes>");
                            sb.Append("<Version>1.0</Version>");
                            sb.Append("<TimeStamp>" + time + "</TimeStamp>");//System.DateTime.Now.ToString("yyyyMMddhhmmssffff")
                            sb.Append("<MessageID>" + messageid + "</MessageID>");
                            sb.Append("<AgentID>" + easypointid + "</AgentID>");
                            sb.Append("<ResCode>00</ResCode>");
                            sb.Append("<ResDesc>" + "Success" + "</ResDesc>");
                            sb.Append("<DigitalCode>" + time + "</DigitalCode>");
                            sb.Append("<SerialNo>" + time + "</SerialNo>");

                            sb.Append("<Expiry>" + expirys + "</Expiry>");
                            sb.Append("<HashValue>" + hash + "</HashValue>");
                            sb.Append("</ConfirmRes>");
                            // writeLog(logAppender+"RES XML : " + sb.ToString());
                            response = sb.ToString();
                            // return sb.ToString();
                            #endregion
                        }
                        else
                        {
                            writeLog(logAppender + "EasyPoint CodeGenerate Confirm Req : " + reqXMLeasyPoint);
                            response = api_service.ApicallingEasypoint(reqXMLeasyPoint);
                            writeLog(logAppender + "EasyPoint Confirm Res : " + response);
                        }
                        if (!_agentWCF.InsertTransactionLog(txnID, "ConfirmRes", response, out errMsg))
                        {
                            writeLog(logAppender + "Error in InsertTransactionLog Res : " + errMsg);
                        }
                        Hashtable htt = Utils.getHTableFromXML(response);

                        // break response from Biller 
                        mobileNo = ref3;
                        // messageid = string.Empty;
                        if (!IsValidateConfirmResEasyPoint(htt, MapTaxID, out rescode, out resdecs, out version, out messageid, out ref1, out ref3, out agnid))
                        {

                            writeLog(logAppender + "Error in IsValidateConfirmResEasypoint : " + resdecs);
                            return GeterrorResponse(rescode, resdecs, txnID, resdecs);
                        }
                        if (rescode != "00")
                        {

                            if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                            {
                                writeLog(logAppender + "Error in updateError : " + errMsg);
                            }


                            ConfirmResponseModel conRes = new ConfirmResponseModel();
                            conRes.taxID = taxID;
                            conRes.email = email;
                            conRes.password = password;
                            conRes.messageid = messageid;
                            conRes.billername = billerName;
                            conRes.billerlogo = billerLogo;
                            conRes.rescode = rescode;
                            conRes.resdesc = resdecs;
                            conRes.ref1 = ref1;
                            conRes.ref2 = ref2;
                            conRes.ref3 = string.Empty;
                            conRes.ref4 = ref3;
                            conRes.ref5 = mobileNo;
                            conRes.ref1Name = ref1Name;
                            conRes.ref2Name = ref2Name;
                            conRes.ref3Name = string.Empty;
                            conRes.ref4Name = ref4Name;
                            conRes.ref5Name = ref5Name;
                            conRes.batchID = batchid.ToString();
                            conRes.availablebalance = availablebalance.ToString();
                            conRes.txnID = txnID.ToString();
                            conRes.TodayTxnCount = TodayTxnCount;
                            conRes.TodayTxnAmount = TodayTxnAmount;
                            conRes.smsMsg = smsMsg;
                            return Utils.getConfirmRes(conRes);
                        }
                        else
                        {
                            writeLog(logAppender + "***************Enter Confirm Update *******************");

                            ref1 = customerName;
                            if (!_agentWCF.ConfirmUpdateCashOut(txnID, ref3, ref2, ref1, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                     agentAmount, agentFeeDbl, isAgreement, smsStatus, out errMsg, out batchID, out avalbal, out legbal))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");

                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }


                            SMSHelper smsH = new SMSHelper();
                            smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, "Code", "Description", "", "Ref", ref3, ref2, "", txnID.ToString(),
                                   double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                            if (appType == "CS" || appType == "MS")
                            {
                                MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();
                                try
                                {
                                    writeLog(logAppender + "sendSMSWithTxnID starts.");

                                    writeLog(logAppender + "Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                    smsWcf.SendSms(txnID.ToString(), smsMsg, mobileNo, sendername);
                                    writeLog(logAppender + "sendSMSWithTxnID ends.");
                                }
                                catch (Exception ex)
                                {
                                }
                            }
                            Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));

                            ConfirmResponseModel conRes = new ConfirmResponseModel();
                            conRes.taxID = taxID;
                            conRes.email = email;
                            conRes.password = password;
                            conRes.messageid = messageid;
                            conRes.billername = billerName;
                            conRes.billerlogo = billerLogo;
                            conRes.rescode = rescode;
                            conRes.resdesc = resdecs;
                            conRes.ref1 = ref1;
                            conRes.ref2 = ref2;
                            conRes.ref3 = string.Empty;
                            conRes.ref4 = string.Empty;
                            conRes.ref5 = mobileNo;
                            conRes.ref1Name = ref3Name;
                            conRes.ref2Name = ref2Name;
                            conRes.ref3Name = string.Empty;
                            conRes.ref4Name = string.Empty;
                            conRes.ref5Name = ref5Name;
                            conRes.batchID = batchid.ToString();
                            conRes.availablebalance = availablebalance.ToString();
                            conRes.txnID = txnID.ToString();
                            conRes.TodayTxnCount = TodayTxnCount;
                            conRes.TodayTxnAmount = TodayTxnAmount;
                            conRes.smsMsg = smsMsg;
                            return Utils.getConfirmRes(conRes);

                        }
                    }
                    #endregion

                    #region <-- Easypoint/mercy corps Redeem 24-Jan-2017 tz -->
                    if (MapTaxID == "7777777777777" || MapTaxID == "0000000000011")
                    {

                        //<ConfirmReq>
                        //<Version></Version>
                        //<TimeStamp></TimeStamp>
                        //<MessageID></MessageID>
                        //<PartnerID></PartnerID>
                        //<PartnerID></DigitalCode>
                        //<TranRef></TranRef>
                        //<HashValue></HashValue>
                        //</ConfirmReq>

                        writeLog(logAppender + "This is EasyPoint/Mercy Corps Redeem.");
                        int batchid = 0;
                        int topupid = 0;
                        //double availablebalance = 0;
                        //double ledgerbalance = 0;
                        string agnid = string.Empty;
                        // ref2 = productdesc;
                        string amountToeasypoint = Utils.getFromOrginalTo12Digit(amount);
                        string easypointid = MapTaxID == "7777777777777" ? ConfigurationManager.AppSettings["easyPointMercyRedeemID"].ToString() : ConfigurationManager.AppSettings["MercyCorpsPartnerID"].ToString();
                        // Version + TimeStamp + MessageID + PartnerID + DigitalCode + TranRef
                        string key = MapTaxID == "7777777777777" ? ConfigurationManager.AppSettings["easyPointMercyRedeemKey"].ToString() : ConfigurationManager.AppSettings["MercyCorpsRedeemKey"].ToString();
                        string hashstr = Utils.hashstrRedeemConfirmEasyPointReq(version, ts, messageid, easypointid.ToString(), ref1, ref5, amountToeasypoint, key);
                        double avalbal = 0;
                        double legbal = 0;

                        string reqXMLeasyPoint = "<ConfirmReq><Version>1.0</Version><TimeStamp>" + ts
                            + "</TimeStamp><MessageID>" + messageid + "</MessageID>"
                            + "<PartnerID>" + easypointid + "</PartnerID>"
                            + "<DigitalCode>" + ref1 + "</DigitalCode>"
                            + "<TranAmount>" + amountToeasypoint + "</TranAmount>"
                            + "<TranRef>" + ref5 + "</TranRef>"
                            + "<HashValue>" + hashstr
                            + "</HashValue></ConfirmReq>";
                        RouteAPI api_service = new RouteAPI();

                        StringBuilder sb = new StringBuilder();

                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            #region <-- If Simulator is on -->
                            writeLog(logAppender + "Simulator Y");

                            string testpin = System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                            string time = System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                            string expirys = System.DateTime.Now.ToShortDateString();
                            string hash = Utils.hashstrRedeemConfirmEasyPointRes(version, time, messageid, easypointid, "12", ref1, "00", "50", amountToeasypoint, key);

                            sb.Append("<ConfirmRes>");
                            sb.Append("<Version>1.0</Version>");
                            sb.Append("<TimeStamp>" + time + "</TimeStamp>");//System.DateTime.Now.ToString("yyyyMMddhhmmssffff")
                            sb.Append("<MessageID>" + messageid + "</MessageID>");
                            sb.Append("<PartnerID>" + easypointid + "</PartnerID>");
                            sb.Append("<AgentID>" + "50" + "</AgentID>");
                            sb.Append("<DigitalCode>" + ref1 + "</DigitalCode>");
                            sb.Append("<TranAmount>" + amountToeasypoint + "</TranAmount>");
                            sb.Append("<ResCode>00</ResCode>");
                            sb.Append("<ResDesc>" + "Approved" + "</ResDesc>");

                            sb.Append("<TranRef>12</TranRef>");


                            sb.Append("<HashValue>" + hash + "</HashValue>");
                            sb.Append("</ConfirmRes>");
                            // writeLog(logAppender+"RES XML : " + sb.ToString());
                            response = sb.ToString();
                            // return sb.ToString();


                            #endregion
                        }
                        else
                        {
                            writeLog(logAppender + "EasyPoint Redeem Confirm Req : " + reqXMLeasyPoint);
                            response = api_service.RedeemApicallingEasypoint(reqXMLeasyPoint);
                            writeLog(logAppender + "EasyPoint Redeem Confirm Res : " + response);
                        }

                        Hashtable htt = Utils.getHTableFromXML(response);

                        mobileNo = ref3;
                        if (!IsValidateRedeemConfirmResEasyPoint(htt, MapTaxID, out rescode, out resdecs, out version, out messageid, out ref1, out ref5, out agnid))
                        {
                            return GeterrorResponse(rescode, resdecs, txnID, resdecs);
                        }
                        if (rescode != "00")
                        {
                            availablebalance = 0;

                            if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                            {
                                writeLog(logAppender + "Error in updateError : " + errMsg);
                            }

                            ConfirmResponseModel conRes = new ConfirmResponseModel();
                            conRes.taxID = taxID;
                            conRes.email = email;
                            conRes.password = password;
                            conRes.messageid = messageid;
                            conRes.billerlogo = billerLogo;
                            conRes.billername = billerName;
                            conRes.rescode = rescode;
                            conRes.resdesc = resdecs;
                            conRes.ref1 = ref1;
                            conRes.ref2 = ref2;
                            conRes.ref3 = ref5;
                            conRes.ref4 = string.Empty;
                            conRes.ref5 = string.Empty;
                            conRes.ref1Name = ref1Name;
                            conRes.ref2Name = ref2Name;
                            conRes.ref3Name = ref3Name;
                            conRes.ref4Name = ref4Name;
                            conRes.ref5Name = ref5Name;
                            conRes.batchID = batchid.ToString();
                            conRes.availablebalance = availablebalance.ToString();
                            conRes.txnID = txnID.ToString();
                            conRes.TodayTxnCount = TodayTxnCount;
                            conRes.TodayTxnAmount = TodayTxnAmount;
                            conRes.smsMsg = smsMsg;
                            return Utils.getConfirmRes(conRes);


                        }
                        else
                        {
                            if (!_agentWCF.ConfirmUpdateCashOut(txnID, ref1, ref2, ref5, "", mobileNo, "", "PA", "Paid Successfully", agentID, email,
                             agentAmount, agentFeeDbl, isAgreement, smsStatus, out errMsg, out batchID, out avalbal, out legbal))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }
                            if (appType == "CS" || appType == "MS")
                            {
                                SMSHelper smsH = new SMSHelper();
                                MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();

                                smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, ref1Name, ref2Name, "", "Ref", ref1, ref2, "", txnID.ToString(),
                                       double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                try
                                {
                                    writeLog(logAppender + "sendSMSWithTxnID starts." + " smsMsg :" + smsMsg);
                                    writeLog(logAppender + "Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                    smsWcf.SendSms(txnID.ToString(), smsMsg, mobileNo, sendername);
                                    writeLog(logAppender + "sendSMSWithTxnID ends.");
                                }
                                catch
                                {
                                }
                            }

                            ConfirmResponseModel conRes = new ConfirmResponseModel();
                            conRes.taxID = taxID;
                            conRes.email = email;
                            conRes.password = password;
                            conRes.messageid = messageid;
                            conRes.rescode = rescode;
                            conRes.resdesc = resdecs;
                            conRes.ref1 = ref1;
                            conRes.ref2 = ref2;
                            conRes.ref3 = ref5;
                            conRes.ref4 = string.Empty;
                            conRes.ref5 = mobileNo;
                            conRes.ref1Name = ref1Name;
                            conRes.ref2Name = ref2Name;
                            conRes.ref3Name = ref3Name;
                            conRes.ref4Name = ref4Name;
                            conRes.ref5Name = ref5Name;
                            conRes.batchID = batchid.ToString();
                            conRes.availablebalance = availablebalance.ToString();
                            conRes.txnID = txnID.ToString();
                            conRes.TodayTxnCount = TodayTxnCount;
                            conRes.TodayTxnAmount = TodayTxnAmount;
                            conRes.smsMsg = smsMsg;
                            return Utils.getConfirmRes(conRes);
                        }

                    }
                    #endregion

                    #region <-- 1-Stop+ -->
                    else if (MapTaxID == "0000000000005") /////For OneStop+
                    {
                        writeLog(logAppender + "This is Channel+.");
                        int batchid = 0;
                        StringBuilder sb = new StringBuilder();
                        double avalbal = 0;
                        double legbal = 0;
                        string maha_User = string.Empty;
                        int agentIDplusForChannel = 0;
                        double readdedamount = 0;


                        if (!_agentWCF.InsertTransactionLog(txnID, "ConfirmReq", reqXml, out errMsg))
                        {
                            writeLog(logAppender + "Error in InsertTransactionLog Req : " + errMsg);
                        }

                        Hashtable htt = Utils.getHTableFromXML(reqXml);

                        if (!IsValidateConfirmReqOneStop(htt, out rescode, out resdecs, out version, out messageid, out ref1, out ref3))
                        {
                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }
                        else
                        {
                            try
                            {
                                bool isOKAddFund = false;
                                mobileNo = ref3;
                                DataSet dsAgnt;
                                if (!_agentWCF.getAgentNameByAgentCode(ref1, out dsAgnt, out errmsg))//Ref1 is agentCode
                                {
                                    writeLog(logAppender + "Error in getAgentNameByAgentCode : " + errmsg);
                                }
                                if (dsAgnt.Tables[0].Rows.Count > 0)
                                {
                                    if (dsAgnt.Tables[0].Rows[0]["AGREEMENTTYPE"].ToString() != "Y")
                                    {


                                        writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                        int agentIDPlus = 0;
                                        string agentNamePlus = "";
                                        agentIDPlus = int.Parse(dsAgnt.Tables[0].Rows[0]["AGENTID"].ToString());
                                        agentNamePlus = dsAgnt.Tables[0].Rows[0]["AGENTNAME"].ToString();
                                        agentIDplusForChannel = agentIDPlus;
                                        if (agentIDPlus > 0)
                                        {
                                            DataSet dsFirstUser = null;
                                            _agentWCF.getMaHaOneStopPlusPartnerFirstUser(ref1, out dsFirstUser, out errmsg);
                                            if (dsFirstUser.Tables[0].Rows.Count > 0)
                                            {
                                                maha_User = dsFirstUser.Tables[0].Rows[0]["AGENTUSERNAME"].ToString() + "," + dsFirstUser.Tables[0].Rows[0]["PHNO"].ToString() + "," + dsFirstUser.Tables[0].Rows[0]["NRC"].ToString() + "," + transactionDateTime;
                                            }

                                            double avalBal = 0;
                                            double ledeBal = 0;
                                            double amountToTopup = 0;
                                            #region <-- Add Balance Into Payee -->

                                            if (_agentWCF.addFund2OneStopPlus(agentIDPlus, amt, out avalBal, out ledeBal, out errMsg))
                                            {
                                                readdedamount = amt;
                                                AddAmountToUser = true;
                                                isOKAddFund = true;
                                                writeLog(logAppender + "After addFund = AgentIDPlus : " + agentIDPlus.ToString() + " |Topuped Amount :" + amt.ToString() + "| AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                            }
                                            else
                                            {
                                                writeLog(logAppender + "Error in addFund2OneStopPlus : " + errMsg);
                                            }
                                            #endregion
                                        }
                                        else
                                        {
                                            writeLog(logAppender + "No AgentID for 1Stop+ : " + agentIDPlus.ToString());
                                        }

                                        if (isOKAddFund)
                                        {
                                            writeLog(logAppender + "Fund Added OK to AgentID : " + agentIDPlus);
                                            #region <-- Update Transaction Region -->


                                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                                            {
                                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                            }
                                            else
                                            {
                                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                                if (!_agentWCF.insertAgentTopupBy1Stop(amt, agentIDPlus, agentUserUniqueID, "AP", ConfigurationManager.AppSettings["ChannelTopup"].ToString(), txnID, agentCode, mobileNo, serviceFee, agentName, ConfigurationManager.AppSettings["ChannelTopup"].ToString(), out errMsg))
                                                {
                                                    writeLog(logAppender + "Error in insertAgentTopupBy1Stop : " + errMsg);
                                                }

                                                else
                                                {
                                                    TopUpHistory = true;
                                                }
                                            }
                                            #endregion
                                            #region <-- Push Noti Region -->
                                            try
                                            {
                                                // push noti
                                                pushNotiWCF.ServiceClient pushnoti = new pushNotiWCF.ServiceClient();
                                                AdminWcf.ServiceClient _admWS = new AdminWcf.ServiceClient();
                                                DataSet ds = new DataSet();
                                                string notiMsg = "You have successfully reloaded " + amount + " Ks to your account.";
                                                string notiType = "Login Device";

                                                List<AgentUserInfo> agentUserInfoList = new List<AgentUserInfo>();

                                                // get agent users information
                                                if (dsAgnt.Tables[2].Rows.Count > 0)
                                                {
                                                    DataTable dt = new DataTable();
                                                    dt = dsAgnt.Tables[2];
                                                    agentUserInfoList = (from DataRow row in dt.Rows
                                                                         select new AgentUserInfo
                                                                         {
                                                                             DeviceToken = row["DEVICETOKEN"] == DBNull.Value ? string.Empty : Convert.ToString(row["DEVICETOKEN"]),
                                                                             DeviceInfo = row["DEVICEINFO"] == DBNull.Value ? string.Empty : Convert.ToString(row["DEVICEINFO"]),
                                                                             AgentUserId = row["AGENTUSERID"] == DBNull.Value ? string.Empty : Convert.ToString(row["AGENTUSERID"])
                                                                         }).ToList();

                                                    // add noti into notification table
                                                    if (_admWS.pushNotification("NearMe+", notiMsg, "NearMe", DateTime.Now.ToString(), "Notification", out errMsg, out ds))
                                                    {
                                                        var ii = ds.Tables[0].Rows[0].ItemArray[0];
                                                        int id = Convert.ToInt32(ii);
                                                        string agentUserNotiId = string.Empty;
                                                        log.Info("Pushed Noti to Agent: " + ref1 + ", NotiId: " + id);
                                                        foreach (AgentUserInfo agentUserInfo in agentUserInfoList)
                                                        {
                                                            if (_admWS.AddNotiProfile(id, notiType, agentUserInfo.AgentUserId, out errMsg))
                                                            {
                                                                if (_admWS.AddAgentNotiList(agentUserInfo.AgentUserId, id, out errMsg, out agentUserNotiId))
                                                                {
                                                                    if (agentUserInfo.DeviceInfo.StartsWith("iOS"))
                                                                    {
                                                                        log.Info("Device Info is  " + agentUserInfo.DeviceInfo + "PushToApple For agent user  " + agentUserInfo.AgentUserId);
                                                                        pushnoti.PushToApple(agentUserInfo.DeviceToken, notiMsg, 0, out errmsg);
                                                                    }
                                                                    else
                                                                    {
                                                                        log.Info("Device Info is  " + agentUserInfo.DeviceInfo + "PushToAndroid For agent user  " + agentUserInfo.AgentUserId);
                                                                        pushnoti.PushToAndroid(agentUserInfo.DeviceToken, notiMsg, "NearMe+", agentUserNotiId, out errmsg);
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    log.Info("Failed to AddAgentNotiList!");
                                                                }
                                                            }
                                                            else
                                                            {
                                                                log.Info("Failed to AddNotiProfile!");
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        log.Info("Failed to add noti into notification table!");
                                                    }
                                                }
                                                else
                                                {
                                                    log.Info("No agent user in the agent :" + ref1);
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                writeLog(logAppender + "Exception error occure at NearMe+ push notification: " + ex.Message);
                                            }

                                            #endregion

                                            #region <-- Success Confirm Response to Client -->

                                            Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amt.ToString()), ConfigurationManager.AppSettings["ChannelTopup"].ToString()));
                                            Task.Factory.StartNew(() => _fraudWCF.CheckReceiver(agentIDPlus, decimal.Parse(amt.ToString()), ConfigurationManager.AppSettings["ChannelTopup"].ToString(), txnID.ToString()));

                                            ConfirmResponseModel conRes = new ConfirmResponseModel();

                                            conRes.email = email;
                                            conRes.password = password;
                                            conRes.messageid = messageid;
                                            conRes.billerlogo = billerLogo;
                                            conRes.billername = billerName;
                                            conRes.taxID = taxID;
                                            conRes.rescode = "00";
                                            conRes.resdesc = "Success";
                                            conRes.ref1 = ref1;
                                            conRes.ref2 = ref2;
                                            conRes.ref3 = ref3;
                                            conRes.ref4 = txnID.ToString();
                                            //conRes.ref5 = mobileNo;
                                            conRes.ref5 = maha_User;
                                            conRes.ref1Name = ref1Name;
                                            conRes.ref2Name = ref2Name;
                                            conRes.ref3Name = ref3Name;
                                            conRes.ref4Name = ref4Name;
                                            //conRes.ref5Name = ref5Name;
                                            conRes.ref5Name = "";
                                            conRes.batchID = batchid.ToString();
                                            conRes.availablebalance = availablebalance.ToString();
                                            conRes.txnID = txnID.ToString();
                                            conRes.TodayTxnCount = TodayTxnCount;
                                            conRes.TodayTxnAmount = TodayTxnAmount;
                                            conRes.smsMsg = smsMsg;
                                            return Utils.getConfirmRes(conRes);

                                            #endregion
                                        }


                                        else
                                        {
                                            writeLog(logAppender + "Fund Added NOT OK to AgentID : " + agentIDPlus);
                                            rescode = "10";
                                            resdecs = "Adding Fund Failed";
                                            //return Utils.getErrorRes(rescode, resdecs);
                                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                        }


                                    } ///////////  end of --> if (isOKAddFund) and else {}

                                    else
                                    {
                                        ///  if (dsAgnt.Tables[0].Rows[0]["AGREEMENTTYPE"].ToString() != "Y")   else 
                                        return GetErrorResponseWithAddBalance("01", "Agent NOT Applicable", txnID, resdecs, agentID, agentAmount, isAgreement);
                                    }

                                }//////////////////////// end of --> if (dsAgnt.Tables[0].Rows[0]["AGREEMENTTYPE"].ToString() != "Y")


                                else  ////////////////else statement of  if (dsAgnt.Tables[0].Rows.Count > 0)
                                {
                                    rescode = "01";
                                    resdecs = errMsg;
                                    //return Utils.getErrorRes(rescode, "Ref Not Found");
                                    return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                }


                            }
                            catch (Exception ex)
                            {
                                if (MapTaxID == "0000000000005" && AddAmountToUser == true)
                                {
                                    writeLog(logAppender + "Error ConfirmToBiller : " + ex.ToString());
                                    rescode = "97";
                                    resdecs = "BIS API Error";
                                    return ChannelPlusGetErrorResponse(rescode, resdecs, txnID, resdecs, agentID, agentIDplusForChannel, agentAmount, readdedamount, isAgreement);
                                }
                                else
                                {
                                    writeLog(logAppender + "Error ConfirmToBiller : " + ex.ToString());
                                    rescode = "97";
                                    resdecs = "BIS API Error";
                                    return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                }

                            }
                        } // Conclusion of  the wohole else { 

                    }

                    #endregion                  

                    #region <-- Iflix Confirm -->
                    else if (MapTaxID == "0000000000055")
                    {
                        writeLog(logAppender + "This is Iflix from EBA.");
                        mobileNo = ref3;
                        double avalbal = 0;
                        double legbal = 0;

                        giftcardConfirmReq pinreq = new giftcardConfirmReq();
                        GetGiftCardPINResults pinres = new GetGiftCardPINResults();
                        string aesKey = string.Empty;
                        aesKey = ConfigurationManager.AppSettings["EsbaAesKey"].ToString();
                        if (IsTokenNullOrExpire(Token))
                        {
                            Token = GetOAuthToken();
                        }
                        string billercode = string.Empty;
                        billercode = getBillerCode(MapTaxID);
                        pinreq.Channel = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
                        pinreq.ChannelRefID = txnID.ToString();
                        pinreq.PriceType = ref2;
                        pinreq.Token = Token.Token;
                        pinreq.BillerCode = billercode;
                        // string url = ConfigurationManager.AppSettings["IflixConfirmUrl"].ToString();
                        var json_serializer1 = new JavaScriptSerializer();
                        string jsonReq = json_serializer1.Serialize(pinreq);
                        writeLog(logAppender + "EBA Iflix  JasonReq:" + jsonReq);

                        SSLPost post = new SSLPost();

                        string jsonres = Utils.pinRequest(jsonReq, esbGetGiftCardMethod);
                        writeLog(logAppender + "EBA Iflix  JasonRes:" + jsonres);

                        if (string.IsNullOrEmpty(jsonres))
                        {
                            resdecs = "No Response From ESBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }

                        var json_serializerpinres = new JavaScriptSerializer();
                        pinres = json_serializerpinres.Deserialize<GetGiftCardPINResults>(jsonres);

                        if (pinres.GetGiftCardPINResult.TransactionStatus == "0" && !string.IsNullOrEmpty(pinres.GetGiftCardPINResult.PIN))
                        {
                            pinres.GetGiftCardPINResult.PIN = Utils.AESDecryptText(pinres.GetGiftCardPINResult.PIN, aesKey);
                            ref4 = pinres.GetGiftCardPINResult.PIN + " " + pinres.GetGiftCardPINResult.ExpiryDate;
                            ref3 = ConfigurationManager.AppSettings["iflixURL"].ToString();
                            amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));

                            #region <-- Update Transaction -->
                            if (!_agentWCF.ConfirmUpdate(txnID,
                                ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                            }
                            #endregion

                            writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                            #region <-- Send SMS -->
                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S")//topup type is null or S
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();

                                    string[] words = ref4.Split(' ');
                                    string PIN = words[0].ToString();
                                    string Expiry = words[1].ToString();


                                    smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, "Code", "Expiry", "", "Ref", PIN, Expiry, "", txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);


                                    try
                                    {

                                        writeLog(logAppender + "Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.SendSms(txnID.ToString(), smsMsg, mobileNo, sendername);
                                        writeLog(logAppender + "sendSMSWithTxnID ends.");
                                    }
                                    catch
                                    {
                                    }
                                }
                                else
                                {
                                    //To Develop Airtime
                                }
                            }
                            #endregion
                            #region <-- Response Back To Client -->
                            rescode = "00";
                            resdecs = "Success";
                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = rescode;
                            confirmres.resdesc = resdecs;
                            confirmres.ref1 = "";
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = ref4;
                            confirmres.ref5 = mobileNo;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref4Name = ref4Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);
                            #endregion


                        }


                        else
                        {
                            resdecs = Utils.EsbResponseDescription(pinres.GetGiftCardPINResult.ResponseCode);
                            return GetErrorResponseWithAddBalance(pinres.GetGiftCardPINResult.ResponseCode, "Out of Stock", txnID, resdecs, agentID, agentAmount, isAgreement);
                        }







                    } //Whole Block



                    #endregion

                    #region <-- //Grand Guardian Insurance -->


                    else if (MapTaxID == "0000000000019")
                    {
                        writeLog(logAppender + "This is GRAND GUARDIAN INSURENCE.");
                        string imgpath = ConfigurationManager.AppSettings["GngImgPath"].ToString();
                        string imgpathweb = ConfigurationManager.AppSettings["GngImgPathweb"].ToString();

                        string cerpath = string.Empty;
                        string nrcpath = string.Empty;
                        string cerpathweb = string.Empty;
                        string nrcpathweb = string.Empty;
                        string shotcerpath = string.Empty;
                        string shortnrcpath = string.Empty;

                        string imgcertname = string.Empty;
                        string imgnrcname = string.Empty;

                        string nrcexpiry = string.Empty;

                        double avalbal = 0;
                        double legbal = 0;

                        // DateTime expirydt;
                        try
                        {
                            #region <-- When simulator is turn off do this job -->
                            //byte[] test;
                            int batchid = 0;
                            //double availablebalance = 0;
                            //double ledgerbalance = 0;
                            mobileNo = ref3;
                            imgcertname = ref1 + "cer.jpg";
                            imgnrcname = ref1 + "nrc.jpg";

                            cerpath = imgpath + imgcertname;
                            nrcpath = imgpath + imgnrcname;
                            cerpathweb = imgpathweb + imgcertname;
                            nrcpathweb = imgpathweb + imgnrcname;
                            DateTime expirya = DateTime.Now.AddDays(365);

                            if (Utils.Base64Decode(imgcert, cerpath))
                            {
                                writeLog(logAppender + "Saving Cretificate Image OK");
                                writeLog(logAppender + "certificate path:" + cerpathweb);
                                shotcerpath = Utils.getQUrl(cerpathweb);
                                writeLog(logAppender + "Short Certificate Path:" + shotcerpath);
                                ref3 = shotcerpath + " ";

                            }
                            else
                            {

                                writeLog(logAppender + "Saving Cretificate Image Not OK");
                                //return Utils.getErrorRes("99", "Duplicated Policy No");
                                rescode = "99";
                                resdecs = "Duplicated Policy No";
                                return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                            }

                            if (Utils.Base64Decode(imgnrc, nrcpath))
                            {
                                writeLog(logAppender + "NRC Path:" + nrcpathweb);
                                shortnrcpath = Utils.getQUrl(nrcpathweb);
                                writeLog(logAppender + "Short NRC path:" + shortnrcpath);
                                ref3 += shortnrcpath;
                                writeLog(logAppender + "Saving NRC Image OK");
                            }
                            else
                            {
                                writeLog(logAppender + "Saving NRC Image Not OK");
                                //return Utils.getErrorRes("99", "Duplicated Policy No");
                                rescode = "99";
                                resdecs = "Duplicated Policy No";
                                return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                            }

                            writeLog(logAppender + "***************Enter Confirm Update *******************");

                            nrcexpiry = ref4 + " " + expirya.ToShortDateString();
                            if (!_agentWCF.ConfirmUpdate(txnID,
                                     ref1, ref2, ref3, nrcexpiry, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                     agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }
                            if (appType == "CS" || appType == "MS")
                            {
                                SMSHelper smsH = new SMSHelper();
                                MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();
                                smsMsg = smsH.getMessageBillerGGI(agentName, MapTaxID, billerName, "Policy No", "", "", "", ref1, txnID.ToString(), expirya.ToString(), "",
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);
                                try
                                {
                                    writeLog(logAppender + "sendSMSWithTxnID starts.");
                                    // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                    writeLog(logAppender + "Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                    //  smsWcf.SendSms(txnID.ToString(), smsMsg, mobileNo, sendername);
                                    writeLog(logAppender + "sendSMSWithTxnID ends.");
                                }
                                catch (Exception ex)
                                {
                                }
                            }


                            StringBuilder sb = new StringBuilder();
                            sb.Append("<ConfirmRes>");
                            sb.Append("<Version>1.0</Version>");
                            sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                            sb.Append("<MessageID>" + messageid + "</MessageID>");
                            sb.Append("<ResCode>" + rescode + "</ResCode>");
                            sb.Append("<ResDesc>" + resdecs + "</ResDesc>");
                            sb.Append("<Ref1>" + ref1 + "</Ref1>");
                            sb.Append("<Ref2>" + ref2 + "</Ref2>");
                            sb.Append("<Ref3>" + ref4 + "</Ref3>");
                            sb.Append("<Ref4>" + ref4 + " " + expirya.ToShortDateString() + "</Ref4>");
                            sb.Append("<Ref5>" + mobileNo + "</Ref5>");
                            sb.Append("<Ref1Name>" + ref1Name + "</Ref1Name>");
                            sb.Append("<Ref2Name>" + ref2Name + "</Ref2Name>");
                            sb.Append("<Ref3Name>" + "NRC" + "</Ref3Name>");
                            sb.Append("<Ref4Name>" + "NRC/Expiry" + "</Ref4Name>");
                            sb.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                            sb.Append("<BatchID>" + batchid + "</BatchID>");
                            sb.Append("<Balance>" + avalbal + "</Balance>");
                            sb.Append("<TxnID>" + txnID + "</TxnID>");
                            sb.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                            sb.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");

                            sb.Append("<SMS>" + smsMsg + "</SMS>");
                            sb.Append("</ConfirmRes>");
                            writeLog(logAppender + "RES XML : " + sb.ToString());
                            return sb.ToString();


                            #endregion
                        }
                        catch (Exception ex)
                        {
                            writeLog(logAppender + "Error in GGI Response Request :" + ex.ToString());
                            rescode = "99";
                            resdecs = "BIS API Error";
                            //return Utils.getErrorRes(rescode, resdecs);
                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }


                    }


                    #endregion

                    #region <-- YCDC/MPTLANDLINE/YES 0000000000020,0000000000021,0000000000022 || taxID == "0000000000022" 4-Jan-2016 tz -->
                    if (MapTaxID == "0000000000020")
                    {
                        #region <-- Initialize stage to request to payyee -->
                        ReqPaymentByCash reqPayCash = new ReqPaymentByCash();
                        ResPaymentByCash resPayCash = new ResPaymentByCash();
                        //ReqBillAmount reqBillAmt = new ReqBillAmount();
                        //ResBillAmount resBilAmt = new ResBillAmount();
                        ResError err = new ResError();
                        string success = ConfigurationManager.AppSettings["payeesuccess"].ToString().Trim();
                        string fail = ConfigurationManager.AppSettings["payeefailed"].ToString().Trim();
                        string merchantcode = MapTaxID == "0000000000020" ? ConfigurationManager.AppSettings["YCDCMerchantCode"].ToString().Trim() : MapTaxID == "0000000000021" ? ConfigurationManager.AppSettings["MPTLandLineMearchantCode"].ToString().Trim() : ConfigurationManager.AppSettings["YESCMerchantCode"].ToString().Trim();
                        reqPayCash.apiKey = ConfigurationManager.AppSettings["payeeApiKey"].ToString().Trim();
                        //reqPayCash.billRefNo = taxID == "0000000000020" ? ref1 : "";
                        reqPayCash.billRefNo = ref1;
                        reqPayCash.custRefNo = (MapTaxID == "0000000000021" || MapTaxID == "0000000000022") ? ref1 : "";
                        reqPayCash.billingMerchantCode = merchantcode.Trim();
                        reqPayCash.currencyCode = ConfigurationManager.AppSettings["payeeCurrencyCode"].ToString().Trim();
                        reqPayCash.billAmount = amount;
                        reqPayCash.chargesAmount = totalpayeecharge;

                        reqPayCash.transferRefNo1 = string.Empty;
                        reqPayCash.transferRefNo2 = string.Empty;
                        reqPayCash.extRefNo1 = string.Empty;

                        double avalbal = 0;
                        double legbal = 0;

                        mobileNo = ref3;
                        ref3 = ref2;
                        #endregion
                        #region <-- Request To Payee -->
                        BillPayment payment = new BillPayment();
                        payment.PaymentByCash(reqPayCash, out resPayCash, out err, out errMsg);//Payment Request To Payee
                        try
                        {
                            int batchid = 0;
                            //double availablebalance = 0;
                            //double ledgerbalance = 0;

                            if (!string.IsNullOrEmpty(resPayCash.status))
                            {
                                #region <-- If Response Status is not Empty Do This Job -->
                                if (resPayCash.status == success)
                                {
                                    rescode = "00";
                                    resdecs = "Success";
                                    ref2 = resPayCash.txnId;

                                    #region <-- If response status is Success Do this Job -->
                                    if (!_agentWCF.ConfirmUpdate(txnID,
                                         ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                         agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                                    {
                                        writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                    }
                                    else
                                    {
                                        writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                                    }
                                    if (appType == "CS" || appType == "MS")
                                    {
                                        SMSHelper smsH = new SMSHelper();
                                        MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();
                                        smsMsg = smsH.getMessageBillerGGI(agentName, MapTaxID, billerName, ref1Name,
                                            ref3Name, "Receipt No", "Ref", ref1, ref3, ref2, txnID.ToString(),
                                            double.Parse(amount).ToString("#,##0.00"), serviceFee,
                                            double.Parse(totalAmount).ToString("#,##0.00"), branchCode);
                                        try
                                        {
                                            writeLog(logAppender + "sendSMSWithTxnID starts.");
                                            // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                            writeLog(logAppender + "Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                            smsWcf.SendSms(txnID.ToString(), smsMsg, mobileNo, sendername);
                                            writeLog(logAppender + "sendSMSWithTxnID ends.");
                                        }
                                        catch (Exception ex)
                                        {
                                        }
                                    }


                                    StringBuilder sb = new StringBuilder();
                                    sb.Append("<ConfirmRes>");
                                    sb.Append("<Version>1.0</Version>");
                                    sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                                    sb.Append("<MessageID>" + messageid + "</MessageID>");
                                    sb.Append("<ResCode>" + rescode + "</ResCode>");
                                    sb.Append("<ResDesc>" + resdecs + "</ResDesc>");
                                    sb.Append("<Ref1>" + ref1 + "</Ref1>");
                                    sb.Append("<Ref2>" + ref2 + "</Ref2>");
                                    sb.Append("<Ref3>" + ref3 + "</Ref3>");
                                    sb.Append("<Ref4></Ref4>");
                                    sb.Append("<Ref5>" + mobileNo + "</Ref5>");
                                    sb.Append("<Ref1Name>" + ref1Name + "</Ref1Name>");
                                    sb.Append("<Ref2Name>" + ref2Name + "</Ref2Name>");
                                    sb.Append("<Ref3Name>" + ref3Name + "</Ref3Name>");
                                    sb.Append("<Ref4Name> </Ref4Name>");
                                    sb.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                                    sb.Append("<BatchID>" + batchid + "</BatchID>");
                                    sb.Append("<Balance>" + avalbal + "</Balance>");
                                    sb.Append("<TxnID>" + txnID + "</TxnID>");
                                    sb.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                                    sb.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");

                                    sb.Append("<SMS>" + smsMsg + "</SMS>");
                                    sb.Append("</ConfirmRes>");
                                    writeLog(logAppender + "RES XML : " + sb.ToString());
                                    return sb.ToString();
                                    #endregion
                                }
                                else if (resPayCash.status == fail)
                                {
                                    writeLog(logAppender + "CNP Fail Response:" + resPayCash.status);
                                    writeLog(logAppender + "Error Code:" + err.errorCode);
                                    writeLog(logAppender + "Error Message:" + err.errorMessage);
                                    //return Utils.getErrorRes("97", getCNPErrMsg(err.errorCode));
                                    return GetErrorResponseWithAddBalance("97", getCNPErrMsg(err.errorCode), txnID, getCNPErrMsg(err.errorCode), agentID, agentAmount, isAgreement);
                                }
                                #endregion
                            }
                            else
                            {
                                writeLog(logAppender + "CNP Response with empty status:");
                                writeLog(logAppender + "Error Code:" + err.errorCode);
                                writeLog(logAppender + "Error Message:" + err.errorMessage);
                                //return Utils.getErrorRes("97", getCNPErrMsg(err.errorCode));
                                return GetErrorResponseWithAddBalance("97", getCNPErrMsg(err.errorCode), txnID, getCNPErrMsg(err.errorCode), agentID, agentAmount, isAgreement);
                            }
                        }
                        catch (Exception ex)
                        {
                            writeLog(logAppender + "Exception Error In Confirm Insert" + ex.Message);
                            return GetErrorResponseWithAddBalance("97", "System Error", txnID, "System Error", agentID, agentAmount, isAgreement);
                        }
                        #endregion
                    }
                    #endregion

                    #region <-- OfflinePayment MPT landLine -->
                    if (MapTaxID == "0000000000021")
                    {
                        double avalbal = 0;
                        double legbal = 0;

                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            int batchid = 0;
                            //double availablebalance = 0;
                            //double ledgerbalance = 0;
                            writeLog(logAppender + "Simulator Y");

                            writeLog(logAppender + "***************Enter Confirm Update *******************");

                            ref4 = DateTime.Now.ToShortDateString() + " " + DateTime.Now.AddDays(30).ToShortDateString();
                            if (!_agentWCF.ConfirmUpdate(txnID,
                                     ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                     agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }
                            if (appType == "CS" || appType == "MS")
                            {
                                SMSHelper smsH = new SMSHelper();
                                MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();
                                // ref2 = (ref2 == "3M" ? "3-Month" : ref2 == "6M" ? "6-Month" : "12-Month");

                                smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, "BillRefNo", "ContactName", "ContactPhone", "Ref", ref1, ref2, ref3, txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), ref4);



                                try
                                {
                                    writeLog(logAppender + "sendSMSWithTxnID starts.");
                                    // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);

                                    writeLog(logAppender + "Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                    smsWcf.SendSms(txnID.ToString(), smsMsg, mobileNo, sendername);
                                    writeLog(logAppender + "sendSMSWithTxnID ends.");

                                }
                                catch (Exception ex)
                                {
                                }
                            }
                            Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));

                            #region <-- Response Back To Client -->
                            rescode = "00";
                            resdecs = "Success";
                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = rescode;
                            confirmres.resdesc = resdecs;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = ref4;
                            confirmres.ref5 = mobileNo;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref4Name = ref4Name;
                            confirmres.ref5Name = string.Empty;
                            confirmres.availablebalance = availablebalance.ToString();

                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);
                            #endregion

                        }
                        else
                        {

                            int batchid = 0;
                            //double availablebalance = 0;
                            //double ledgerbalance = 0;
                            string method = "OfflinePaymentInquiry";
                            string fromdate = string.Empty;
                            string todate = string.Empty;
                            OfflinePaymentInquiryRequest inqReq = new OfflinePaymentInquiryRequest();
                            OfflinePaymentInquiryResp responsedata = new OfflinePaymentInquiryResp();
                            string reqJson = "";
                            string[] fromandToDate;
                            if (!string.IsNullOrEmpty(ref4))
                            {
                                fromandToDate = ref4.Split(' ');
                                fromdate = fromandToDate[0];
                                todate = fromandToDate[1];
                            }
                            //root.offlinePaymentAPIRequest = new OfflinePaymentAPIRequest();            
                            inqReq.ChannelCode = ConfigurationManager.AppSettings["offlineChannelCode"].ToString();
                            inqReq.BillerCode = ConfigurationManager.AppSettings["offlineBillerCode"].ToString();
                            inqReq.BillRefNo = ref1;
                            inqReq.Amount = Convert.ToDecimal(amount);


                            if (!string.IsNullOrEmpty(fromdate))
                            {
                                inqReq.BillFromDate = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null); //Convert.ToDateTime(txtBillFromDate.Text);
                            }
                            else
                            {
                                inqReq.BillFromDate = null;
                            }

                            if (!string.IsNullOrEmpty(todate))
                            {
                                inqReq.BillEndDate = DateTime.ParseExact(todate, "dd/MM/yyyy", null);  //Convert.ToDateTime(txtBillEndDate.Text);
                            }
                            else
                            {
                                inqReq.BillEndDate = null;
                            }

                            inqReq.ChannelRefNo = txnID.ToString();
                            inqReq.ContactName = ref2;
                            inqReq.ContactPhone = ref3;
                            mobileNo = ref3;
                            reqJson = JsonConvert.SerializeObject(inqReq);
                            string jasonresponse = string.Empty;
                            writeLog(logAppender + "OfflinePayment Request:" + reqJson);
                            jasonresponse = Utils.offlinePayRequest(reqJson, method);
                            writeLog(logAppender + "OfflinePayment Response:" + jasonresponse);



                            if (String.IsNullOrEmpty(jasonresponse))
                            {
                                //return GeterrorResponse("06", "Payment Unsuccessful", txnID, "JasonResponseisEmpty");
                                return GetErrorResponseWithAddBalance("06", "Payment Unsuccessful", txnID, "JasonResponseisEmpty", agentID, agentAmount, isAgreement);
                            }
                            try
                            {
                                RootObject rootobj = new RootObject();
                                //Main note of jason response
                                rootobj = JsonConvert.DeserializeObject<RootObject>(jasonresponse);
                                //Get OfflinePaymentInquiryResult Jason Note
                                var pasreRoot = rootobj.OfflinePaymentInquiryResult.ToString();
                                //parse OfflinePaymentInquiryResult Jason note to ObjectClass
                                responsedata = JsonConvert.DeserializeObject<OfflinePaymentInquiryResp>(pasreRoot);
                            }
                            catch (Exception ex)
                            {
                                writeLog(logAppender + "exception Error wher converting Jasonresult:" + ex.Message);
                            }

                            if (responsedata.IsEncrypt.ToUpper() == "TRUE")
                            {
                                writeLog(logAppender + "Is encrypt is true before encrypted:" + responsedata.resCode + ":" + responsedata.resDesc);
                                responsedata = Utils.DecryptOfflinePaymentResponse(responsedata);
                                writeLog(logAppender + "Is encrypt is true After encrypted:" + responsedata.resCode + ":" + responsedata.resDesc);

                            }
                            if (responsedata.resCode == "0")
                            {
                                #region <-- Update Transaction -->
                                if (!_agentWCF.ConfirmUpdate(txnID,
                                    ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                    agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                                {
                                    writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                }
                                else
                                {
                                    writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                }
                                #endregion
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                #region <-- Send SMS -->
                                if (appType == "CS" || appType == "MS")
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();
                                    // ref2 = (ref2 == "3M" ? "3-Month" : ref2 == "6M" ? "6-Month" : "12-Month");

                                    smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, "BillRefNo", "ContactName", "ContactPhone", "Ref", ref1, ref2, ref3, txnID.ToString(),
                                        double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), ref4);



                                    try
                                    {
                                        writeLog(logAppender + "sendSMSWithTxnID starts.");
                                        // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);

                                        writeLog(logAppender + "Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.SendSms(txnID.ToString(), smsMsg, mobileNo, sendername);

                                        writeLog(logAppender + "sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                    }
                                }
                                #endregion
                                Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));

                                #region <-- Response Back To Client -->
                                rescode = "00";
                                resdecs = "Success";
                                ConfirmResponseModel confirmres = new ConfirmResponseModel();
                                confirmres.taxID = taxID;
                                confirmres.email = email;
                                confirmres.password = password;
                                confirmres.messageid = messageid;
                                confirmres.billername = billerName;
                                confirmres.billerlogo = billerLogo;
                                confirmres.rescode = rescode;
                                confirmres.resdesc = resdecs;
                                confirmres.ref1 = ref1;
                                confirmres.ref2 = ref2;
                                confirmres.ref3 = ref3;
                                confirmres.ref4 = ref4;
                                confirmres.ref5 = mobileNo;
                                confirmres.ref1Name = ref1Name;
                                confirmres.ref2Name = ref2Name;
                                confirmres.ref3Name = ref3Name;
                                confirmres.ref5Name = string.Empty;
                                confirmres.availablebalance = availablebalance.ToString();
                                confirmres.txnID = txnID.ToString();
                                confirmres.TodayTxnAmount = TodayTxnAmount;
                                confirmres.TodayTxnCount = TodayTxnCount;
                                confirmres.smsMsg = smsMsg;

                                return Utils.getConfirmRes(confirmres);
                                #endregion
                            }
                            else
                            {
                                //return GeterrorResponse("06", "Payment Fail Please Try Again!", txnID, responsedata.resDesc);
                                return GetErrorResponseWithAddBalance("06", "Payment Fail Please Try Again!", txnID, responsedata.resDesc, agentID, agentAmount, isAgreement);
                            }
                        }

                    }

                    #endregion

                    #region <-- TITAN SOURCE -->
                    if (MapTaxID == "0000000000022")
                    {
                        double avalbal = 0;
                        double legbal = 0;

                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            #region <-- Simulator Mode -->
                            int batchid = 0;
                            //double availablebalance = 0;
                            //double ledgerbalance = 0;
                            mobileNo = ref3;

                            rescode = "00";
                            resdecs = "Success";
                            ref2 = DateTime.Now.ToString("ddMMyyyHHmmss");
                            ref1 = ref1 + "CNP";
                            ref3 = "";
                            ref4 = "TestTxn" + " " + "CNP";
                            #region <-- If response status is Success Do this Job -->
                            if (!_agentWCF.ConfirmUpdate(txnID,
                                 ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                 agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }
                            if (appType == "CS" || appType == "MS")
                            {
                                SMSHelper smsH = new SMSHelper();

                                MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();
                                smsMsg = smsH.getMessageBillerGGI(agentName, MapTaxID, billerName, ref1Name, ref3Name, "Receipt No", "Ref", ref1, ref3, ref2, txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);



                                try
                                {
                                    writeLog(logAppender + "sendSMSWithTxnID starts.");
                                    // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);

                                    writeLog(logAppender + "Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                    smsWcf.SendSms(txnID.ToString(), smsMsg, mobileNo, sendername);

                                    writeLog(logAppender + "sendSMSWithTxnID ends.");
                                }
                                catch (Exception ex)
                                {
                                }
                            }

                            Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));

                            StringBuilder sb = new StringBuilder();
                            sb.Append("<ConfirmRes>");
                            sb.Append("<Version>1.0</Version>");
                            sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                            sb.Append("<MessageID>" + messageid + "</MessageID>");
                            sb.Append("<TaxID>" + taxID + "</TaxID>");
                            sb.Append("<ResCode>" + rescode + "</ResCode>");
                            sb.Append("<ResDesc>" + resdecs + "</ResDesc>");
                            sb.Append("<Ref1>" + ref1 + "</Ref1>");
                            sb.Append("<Ref2>" + ref2 + "</Ref2>");
                            sb.Append("<Ref3>" + ref3 + "</Ref3>");
                            sb.Append("<Ref4></Ref4>");
                            sb.Append("<Ref5>" + mobileNo + "</Ref5>");
                            sb.Append("<Ref1Name>" + ref1Name + "</Ref1Name>");
                            sb.Append("<Ref2Name>" + ref2Name + "</Ref2Name>");
                            sb.Append("<Ref3Name>" + ref3Name + "</Ref3Name>");
                            sb.Append("<Ref4Name> </Ref4Name>");
                            sb.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                            sb.Append("<BatchID>" + batchid + "</BatchID>");
                            sb.Append("<Balance>" + avalbal + "</Balance>");
                            sb.Append("<TxnID>" + txnID + "</TxnID>");
                            sb.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                            sb.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");

                            sb.Append("<SMS>" + smsMsg + "</SMS>");
                            sb.Append("</ConfirmRes>");
                            writeLog(logAppender + "RES XML : " + sb.ToString());
                            return sb.ToString();
                            #endregion
                            #endregion
                        }
                        else
                        {
                            #region <-- Simulator Mode Off -->
                            if (meterBiller == isTitan)
                            {
                                writeLog(logAppender + "$$$$$$$$$$$$ This Is Titan Confirm $$$$$$$$$$$");
                                string biller = string.Empty;
                                string UserName = ConfigurationManager.AppSettings["titalUserName"].ToString();
                                string ApiKey = ConfigurationManager.AppSettings["titanApiKey"].ToString();
                                string passPhrase = ConfigurationManager.AppSettings["titanpassPhrase"].ToString();
                                string confirmUrl = ConfigurationManager.AppSettings["titanConfirmUrl"].ToString();
                                string inqResString = string.Empty;
                                int batchid = 0;
                                //double availablebalance = 0;
                                //double ledgerbalance = 0;
                                mobileNo = ref3;
                                /*--to update status--*/
                                if (titanResult == "OK")
                                {
                                    /*to update into database after payment is successful*/
                                    string temp = ApiKey + "," + townshipcode + "," + titanCustRefNumber + "," + "Successful" + "," + txnID + "," + DateTime.Now.ToString() + "," + "false";
                                    //  string temp = APiKey + "," + this.VSResultSet.TownshipCode + ","  + "Successful" + "," + txtTransactionNo.Text + "," + DateTime.Now.ToString() + "," + "false";

                                    string encodedKey = Utils.EncryptString(temp, passPhrase);

                                    string completeUrl = confirmUrl + UserName + "/" + encodedKey;

                                    writeLog(logAppender + "Titan Confirm Req URL:" + completeUrl);

                                    HttpWebResponse titanConfirmRes = null;

                                    // Get the stream containing content returned by the server.
                                    Stream dataStream = Utils.CallTitanSourceApi(completeUrl, ref titanConfirmRes);

                                    //Fatch Confirm Response Date from response DataStream

                                    TitanConfirmResultSet confirmResult = Utils.MapTitanConfirmResponse(dataStream);

                                    dataStream.Close();
                                    dataStream.Dispose();
                                    writeLog(logAppender + "Confirm Resopnse:" + confirmResult.ResponseInfo);
                                    if (!string.IsNullOrEmpty(confirmResult.ResponseInfo))
                                    {
                                        string[] confirmres = confirmResult.ResponseInfo.Split(',');
                                        if (confirmres.Count() >= 3)
                                        {
                                            if (confirmres[0].ToLower() == "paid")
                                            {
                                                string errRes = GetErrorResponseWithAddBalance("01", "Already Paid", txnID, confirmResult.ResponseInfo, agentID, agentAmount, isAgreement);
                                                return errRes;
                                            }
                                            rescode = "00";
                                            resdecs = "Success";
                                            //ref2 = confirmres[0];
                                            ref1 = ref1 + meterBiller;
                                            ref3 = titanCustomerName;
                                            ref4 = confirmResult.ResponseInfo + " " + meterBiller;
                                            #region <-- If response status is Success Do this Job -->
                                            if (!_agentWCF.ConfirmUpdate(txnID,
                                                 ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                                 agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                                            {
                                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                                resdecs = "Error in update database";
                                                rescode = "06";
                                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                                {
                                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                                }
                                                return Utils.getErrorRes(rescode, "Transaction fail");
                                            }
                                            else
                                            {
                                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                                            }
                                            if (appType == "CS" || appType == "MS")
                                            {
                                                SMSHelper smsH = new SMSHelper();

                                                MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();
                                                smsMsg = smsH.getMessageBillerGGI(agentName, MapTaxID, billerName, ref1Name, ref3Name, "Receipt No", "Ref", ref1, ref3, ref2, txnID.ToString(),
                                                    double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);



                                                try
                                                {
                                                    writeLog(logAppender + "sendSMSWithTxnID starts.");
                                                    // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);

                                                    writeLog(logAppender + "Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                                    smsWcf.SendSms(txnID.ToString(), smsMsg, mobileNo, sendername);

                                                    writeLog(logAppender + "sendSMSWithTxnID ends.");
                                                }
                                                catch (Exception ex)
                                                {
                                                }
                                            }
                                            Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));


                                            StringBuilder sb = new StringBuilder();
                                            sb.Append("<ConfirmRes>");
                                            sb.Append("<Version>1.0</Version>");
                                            sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                                            sb.Append("<MessageID>" + messageid + "</MessageID>");
                                            sb.Append("<TaxID>" + taxID + "</TaxID>");
                                            sb.Append("<ResCode>" + rescode + "</ResCode>");
                                            sb.Append("<ResDesc>" + resdecs + "</ResDesc>");
                                            sb.Append("<Ref1>" + ref1 + "</Ref1>");
                                            sb.Append("<Ref2>" + ref2 + "</Ref2>");
                                            sb.Append("<Ref3>" + ref3 + "</Ref3>");
                                            sb.Append("<Ref4></Ref4>");
                                            sb.Append("<Ref5>" + mobileNo + "</Ref5>");
                                            sb.Append("<Ref1Name>" + ref1Name + "</Ref1Name>");
                                            sb.Append("<Ref2Name>" + ref2Name + "</Ref2Name>");
                                            sb.Append("<Ref3Name>" + ref3Name + "</Ref3Name>");
                                            sb.Append("<Ref4Name> </Ref4Name>");
                                            sb.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                                            sb.Append("<BatchID>" + batchid + "</BatchID>");
                                            sb.Append("<Balance>" + avalbal + "</Balance>");
                                            sb.Append("<TxnID>" + txnID + "</TxnID>");
                                            sb.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                                            sb.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");

                                            sb.Append("<SMS>" + smsMsg + "</SMS>");
                                            sb.Append("</ConfirmRes>");
                                            writeLog(logAppender + "RES XML : " + sb.ToString());
                                            return sb.ToString();
                                            #endregion
                                        }
                                        else
                                        {

                                            //string errRes = GeterrorResponse("01", confirmResult.ResponseInfo, txnID, confirmResult.ResponseInfo);
                                            //writeLog(logAppender+errRes);
                                            string errRes = GetErrorResponseWithAddBalance("01", confirmResult.ResponseInfo, txnID, confirmResult.ResponseInfo, agentID, agentAmount, isAgreement);
                                            return errRes;
                                        }
                                    }
                                    else
                                    {
                                        writeLog(logAppender + "Titan Confirm response is Empty");
                                        //string errRes = GeterrorResponse("01", "Unsuccessful", txnID, "Empty Response");
                                        //writeLog(logAppender+errRes);
                                        string errRes = GetErrorResponseWithAddBalance("01", "Unsuccessful", txnID, titanResult, agentID, agentAmount, isAgreement);
                                        return errRes;
                                    }

                                }
                                else
                                {
                                    writeLog(logAppender + "Status isn't OK");
                                    string errRes = GetErrorResponseWithAddBalance("01", "Unsuccessful", txnID, titanResult, agentID, agentAmount, isAgreement);
                                    //    GeterrorResponse("01", "Unsuccessful", txnID, titanResult);

                                    //writeLog(logAppender+errRes);
                                    return errRes;
                                    ///lblStatus.Text = "Status isn't Ok.";
                                }
                            }
                            else
                            {
                                writeLog(logAppender + "$$$$$$$$$$$$$ This is CNP Confirm $$$$$$$$$$$$$$$$$$$$");
                                meterBiller = "CNP";
                                #region <-- Initialize stage to request to payyee -->
                                ReqPaymentByCash reqPayCash = new ReqPaymentByCash();
                                ResPaymentByCash resPayCash = new ResPaymentByCash();
                                //ReqBillAmount reqBillAmt = new ReqBillAmount();
                                //ResBillAmount resBilAmt = new ResBillAmount();
                                ResError err = new ResError();
                                string success = ConfigurationManager.AppSettings["payeesuccess"].ToString().Trim();
                                string fail = ConfigurationManager.AppSettings["payeefailed"].ToString().Trim();
                                string merchantcode = ConfigurationManager.AppSettings["YESCMerchantCode"].ToString().Trim();
                                reqPayCash.apiKey = ConfigurationManager.AppSettings["payeeApiKey"].ToString().Trim();
                                //reqPayCash.billRefNo = taxID == "0000000000020" ? ref1 : "";
                                reqPayCash.billRefNo = ref1;
                                reqPayCash.custRefNo = ref1;
                                reqPayCash.billingMerchantCode = merchantcode.Trim();
                                reqPayCash.currencyCode = ConfigurationManager.AppSettings["payeeCurrencyCode"].ToString().Trim();
                                reqPayCash.billAmount = amount;
                                reqPayCash.chargesAmount = totalpayeecharge;

                                reqPayCash.transferRefNo1 = string.Empty;
                                reqPayCash.transferRefNo2 = string.Empty;
                                reqPayCash.extRefNo1 = string.Empty;



                                mobileNo = ref3;
                                ref3 = ref2;
                                #endregion

                                #region <-- Request To Payee -->
                                BillPayment payment = new BillPayment();
                                payment.PaymentByCash(reqPayCash, out resPayCash, out err, out errMsg);//Payment Request To Payee
                                try
                                {
                                    int batchid = 0;
                                    //double availablebalance = 0;
                                    //double ledgerbalance = 0;

                                    if (!string.IsNullOrEmpty(resPayCash.status))
                                    {
                                        #region <-- If Response Status is not Empty Do This Job -->
                                        if (resPayCash.status == success)
                                        {
                                            rescode = "00";
                                            resdecs = "Success";
                                            ref2 = resPayCash.txnId;
                                            ref1 = ref1 + meterBiller;
                                            // ref4 = resPayCash.txnId + " " + meterBiller;
                                            #region <-- If response status is Success Do this Job -->
                                            if (!_agentWCF.ConfirmUpdate(txnID,
                                                 ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                                 agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                                            {
                                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                                resdecs = "Error in update database";
                                                rescode = "06";
                                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                                {
                                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                                }
                                                return Utils.getErrorRes(rescode, "Transaction fail");
                                            }
                                            else
                                            {
                                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                                            }
                                            if (appType == "CS" || appType == "MS")
                                            {
                                                SMSHelper smsH = new SMSHelper();

                                                MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();
                                                smsMsg = smsH.getMessageBillerGGI(agentName, MapTaxID, billerName, ref1Name, ref3Name, "Receipt No", "Ref", ref1, ref3, ref2, txnID.ToString(),
                                                    double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);



                                                try
                                                {
                                                    writeLog(logAppender + "sendSMSWithTxnID starts.");
                                                    // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);

                                                    writeLog(logAppender + "Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                                    smsWcf.SendSms(txnID.ToString(), smsMsg, mobileNo, sendername);

                                                    writeLog(logAppender + "sendSMSWithTxnID ends.");
                                                }
                                                catch (Exception ex)
                                                {
                                                }
                                            }

                                            Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));

                                            StringBuilder sb = new StringBuilder();
                                            sb.Append("<ConfirmRes>");
                                            sb.Append("<Version>1.0</Version>");
                                            sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                                            sb.Append("<MessageID>" + messageid + "</MessageID>");
                                            sb.Append("<TaxID>" + taxID + "</TaxID>");
                                            sb.Append("<ResCode>" + rescode + "</ResCode>");
                                            sb.Append("<ResDesc>" + resdecs + "</ResDesc>");
                                            sb.Append("<Ref1>" + ref1 + "</Ref1>");
                                            sb.Append("<Ref2>" + ref2 + "</Ref2>");
                                            sb.Append("<Ref3>" + ref3 + "</Ref3>");
                                            sb.Append("<Ref4></Ref4>");
                                            sb.Append("<Ref5>" + mobileNo + "</Ref5>");
                                            sb.Append("<Ref1Name>" + ref1Name + "</Ref1Name>");
                                            sb.Append("<Ref2Name>" + ref2Name + "</Ref2Name>");
                                            sb.Append("<Ref3Name>" + ref3Name + "</Ref3Name>");
                                            sb.Append("<Ref4Name> </Ref4Name>");
                                            sb.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                                            sb.Append("<BatchID>" + batchid + "</BatchID>");
                                            sb.Append("<Balance>" + avalbal + "</Balance>");
                                            sb.Append("<TxnID>" + txnID + "</TxnID>");
                                            sb.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                                            sb.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");

                                            sb.Append("<SMS>" + smsMsg + "</SMS>");
                                            sb.Append("</ConfirmRes>");
                                            writeLog(logAppender + "RES XML : " + sb.ToString());
                                            return sb.ToString();
                                            #endregion
                                        }
                                        else if (resPayCash.status == fail)
                                        {
                                            writeLog(logAppender + "CNP Fail Response:" + resPayCash.status);
                                            writeLog(logAppender + "Error Code:" + err.errorCode);
                                            writeLog(logAppender + "Error Message:" + err.errorMessage);
                                            //return Utils.getErrorRes("97", getCNPErrMsg(err.errorCode));
                                            return GetErrorResponseWithAddBalance("97", getCNPErrMsg(err.errorCode), txnID, getCNPErrMsg(err.errorCode), agentID, agentAmount, isAgreement);
                                        }
                                        #endregion
                                    }
                                    else
                                    {
                                        writeLog(logAppender + "CNP Response with empty status:");
                                        writeLog(logAppender + "Error Code:" + err.errorCode);
                                        writeLog(logAppender + "Error Message:" + err.errorMessage);
                                        //return Utils.getErrorRes("97", getCNPErrMsg(err.errorCode));
                                        return GetErrorResponseWithAddBalance("97", getCNPErrMsg(err.errorCode), txnID, getCNPErrMsg(err.errorCode), agentID, agentAmount, isAgreement);
                                    }
                                }
                                catch (Exception ex)
                                {
                                    writeLog(logAppender + "Exception Error In Confirm Insert" + ex.Message);
                                    return GetErrorResponseWithAddBalance("97", "System Error", txnID, "System Error", agentID, agentAmount, isAgreement);
                                }
                                #endregion

                            }

                            #endregion
                        }
                    }
                    #endregion

                    #region <-- Rent2Own -->
                    if (MapTaxID == "0000000000029")
                    {
                        writeLog(logAppender + "$$$$$$$$$$$$This Is Rent2Own$$$$$$$$$$$$$$$");
                        mobileNo = ref3;

                        int batchid = 0;
                        //double availablebalance = 0;
                        //double ledgerbalance = 0;
                        double avalbal = 0;
                        double legbal = 0;

                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            #region <-- Simulator mode -->
                            string confirmResString = string.Empty;
                            ref3 = DateTime.Now.ToString("ddMMyyyHHmmss");
                            ref4 = ref5;

                            if (!_agentWCF.ConfirmUpdate(txnID,
                                ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }
                            if (appType == "CS" || appType == "MS")
                            {
                                SMSHelper smsH = new SMSHelper();
                                MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();
                                smsMsg = smsH.getMessageBillerGGI(agentName, MapTaxID, billerName, "Contract No", "", "", "", ref1, ref2, ref3, txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);



                                try
                                {
                                    writeLog(logAppender + "sendSMSWithTxnID starts.");
                                    // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);

                                    writeLog(logAppender + "Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                    smsWcf.SendSms(txnID.ToString(), smsMsg, mobileNo, sendername);

                                    writeLog(logAppender + "sendSMSWithTxnID ends.");
                                }
                                catch (Exception ex)
                                {
                                }
                            }
                            Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));

                            rescode = "00";
                            resdecs = "Success";

                            #region <-- Response Back To Client -->
                            rescode = "00";
                            resdecs = "Success";
                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = rescode;
                            confirmres.resdesc = resdecs;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = string.Empty;
                            confirmres.ref5 = mobileNo;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);
                            #endregion

                            #endregion
                        }
                        else
                        {
                            #region <-- Simulator mode off -->

                            // Check Minimum Amount for Rent2Own
                            writeLog(logAppender + "Check Minimum Amount for Rent2Own");
                            decimal minimumAmount = Convert.ToDecimal(ConfigurationManager.AppSettings["Rent2OwnMinimumAmount"].ToString());
                            if (Convert.ToDecimal(amount) < minimumAmount)
                            {
                                writeLog(logAppender + "Fail !!! Less than Minimum Amount");
                                return GetErrorResponseWithAddBalance("96", "Transaction amount is less than minimum amount", txnID, "Transaction amount is less than minimum amount.", agentID, agentAmount, isAgreement);
                            }

                            string confirmmethod = ConfigurationManager.AppSettings["Rent2OwnConfirm"].ToString();
                            string agncode = ConfigurationManager.AppSettings["Rent2OwnAgnCode"].ToString();
                            string rent2OwnKey = ConfigurationManager.AppSettings["Rent2OwnKey"].ToString();
                            string rent2Ownuri = ConfigurationManager.AppSettings["Rent2OwnUri"].ToString();
                            Rent2OwnConfirmRequest confirmreq = new Rent2OwnConfirmRequest();
                            Rent2OwnConfirmResponse confirmRes = new Rent2OwnConfirmResponse();
                            confirmreq.ContractNumber = ref1;
                            confirmreq.AgentCode = agncode;
                            confirmreq.Amount = amount;
                            confirmreq.MobileNumber = mobileNo;
                            confirmreq.TransactionRefNumber = txnID.ToString();
                            string[] fourTVProuct = ref5.Split(':');
                            string pt = fourTVProuct[fourTVProuct.Length - 1].ToString();
                            string[] PaymentType = pt.Split(' ');
                            confirmreq.PaymentType = PaymentType[0].ToString();

                            if (confirmreq.PaymentType != "RFP" && confirmreq.PaymentType != "OTP")
                            {
                                confirmreq.PaymentType = string.Empty;
                            }
                            //TransactionRefNumber+ContractNumber+Amount+MobileNumber+AgentCode
                            confirmreq.HashValue = Utils.generateHashValue((confirmreq.TransactionRefNumber + confirmreq.ContractNumber + confirmreq.Amount + confirmreq.MobileNumber + confirmreq.AgentCode), rent2OwnKey).ToLower();
                            //TransactionRefNumber + ResponseCode+ResponseDescription+InvoiceNumber

                            //var json_serializer1 = new JavaScriptSerializer();
                            //string jsonReq = json_serializer1.Serialize(confirmreq);
                            string jsonReq = JsonConvert.SerializeObject(confirmreq, Newtonsoft.Json.Formatting.Indented, new JsonSerializerSettings { DefaultValueHandling = DefaultValueHandling.Ignore });

                            writeLog(logAppender + "Rent2Own Request String:" + jsonReq);
                            string uri = string.Empty;
                            uri = rent2Ownuri + confirmmethod;
                            writeLog(logAppender + "Request URL:" + uri);
                            string jsonres = Utils.Rent2OwnRequest(jsonReq, uri);
                            writeLog(logAppender + "Rent2Own Response String:" + jsonres);

                            var json_serializerres = new JavaScriptSerializer();
                            confirmRes = json_serializerres.Deserialize<Rent2OwnConfirmResponse>(jsonres);

                            string temphash = confirmRes.HashValue;
                            //TransactionRefNumber + ResponseCode+ResponseDescription+InvoiceNumber
                            string HashCompare = Utils.generateHashValue((confirmRes.TransactionRefNumber + confirmRes.ResponseCode + confirmRes.ResponseDescription + confirmRes.InvoiceNumber), "B3aut1ful").ToLower();
                            writeLog(logAppender + "Response Hash:" + temphash + "|1StopGenerated Hash:" + HashCompare);
                            if (temphash == HashCompare)
                            {
                                if (confirmRes.ResponseCode == "00")
                                {
                                    string confirmResString = string.Empty;
                                    ref3 = confirmRes.InvoiceNumber;
                                    ref4 = ref5;

                                    if (!_agentWCF.ConfirmUpdate(txnID,
                                        ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                        agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                                    {
                                        writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                        resdecs = "Error in update database";
                                        rescode = "06";
                                        if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                        {
                                            writeLog(logAppender + "Error in updateError : " + errMsg);
                                        }
                                        return Utils.getErrorRes(rescode, "Transaction fail");
                                    }
                                    else
                                    {
                                        writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                                    }
                                    if (appType == "CS" || appType == "MS")
                                    {
                                        SMSHelper smsH = new SMSHelper();
                                        MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();
                                        smsMsg = smsH.getMessageBillerGGI(agentName, MapTaxID, billerName, "Contract No", "", "", "", ref1, ref2, ref3, txnID.ToString(),
                                            double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);



                                        try
                                        {
                                            writeLog(logAppender + "sendSMSWithTxnID starts.");
                                            // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);

                                            writeLog(logAppender + "Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                            smsWcf.SendSms(txnID.ToString(), smsMsg, mobileNo, sendername);

                                            writeLog(logAppender + "sendSMSWithTxnID ends.");
                                        }
                                        catch (Exception ex)
                                        {
                                        }
                                    }
                                    Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));

                                    rescode = "00";
                                    resdecs = "Success";

                                    #region <-- Response Back To Client -->
                                    rescode = "00";
                                    resdecs = "Success";
                                    ConfirmResponseModel confirmres = new ConfirmResponseModel();
                                    confirmres.taxID = taxID;
                                    confirmres.email = email;
                                    confirmres.password = password;
                                    confirmres.messageid = messageid;
                                    confirmres.billername = billerName;
                                    confirmres.billerlogo = billerLogo;
                                    confirmres.rescode = rescode;
                                    confirmres.resdesc = resdecs;
                                    confirmres.ref1 = ref1;
                                    confirmres.ref2 = ref2;
                                    confirmres.ref3 = ref3;
                                    confirmres.ref4 = string.Empty;
                                    confirmres.ref5 = mobileNo;
                                    confirmres.ref1Name = ref1Name;
                                    confirmres.ref2Name = ref2Name;
                                    confirmres.ref3Name = ref3Name;
                                    confirmres.ref5Name = ref5Name;
                                    confirmres.availablebalance = availablebalance.ToString();
                                    confirmres.txnID = txnID.ToString();
                                    confirmres.TodayTxnAmount = TodayTxnAmount;
                                    confirmres.TodayTxnCount = TodayTxnCount;
                                    confirmres.smsMsg = smsMsg;

                                    return Utils.getConfirmRes(confirmres);
                                    #endregion
                                }
                                else
                                {
                                    // return Utils.getErrorRes(confirmRes.ResponseCode, confirmRes.ResponseDescription);
                                    //return GeterrorResponse(confirmRes.ResponseCode, confirmRes.ResponseDescription, txnID, confirmRes.ResponseDescription);
                                    return GetErrorResponseWithAddBalance(confirmRes.ResponseCode, confirmRes.ResponseDescription, txnID, confirmRes.ResponseDescription, agentID, agentAmount, isAgreement);

                                }
                            }
                            else
                            {
                                //return GeterrorResponse(confirmRes.ResponseCode, confirmRes.ResponseDescription, txnID, confirmRes.ResponseDescription);
                                return GetErrorResponseWithAddBalance(confirmRes.ResponseCode, confirmRes.ResponseDescription, txnID, confirmRes.ResponseDescription, agentID, agentAmount, isAgreement);
                            }


                            #endregion
                        }

                    }
                    #endregion

                    #region <-- Awba-->>
                    if (MapTaxID == "0000000000023")
                    {
                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            #region <-- Simulator is On -->
                            int batchid = 0;
                            //double availablebalance = 0;
                            //double ledgerbalance = 0;
                            mobileNo = ref3;
                            ref3 = "1234543";
                            //string errMsg = null;
                            double avalbal = 0;
                            double legbal = 0;


                            //if (_agentWCF.ConfirmUpdate(out  errMsg, out  batchID, out  availablebalance, out  ledgerbalance, txnID,
                            //                   ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                            //                   agentAmount, agentFeeDbl, isAgreement))

                            //{
                            if (!_agentWCF.ConfirmUpdate(txnID,
                                ref1, ref2, ref3, productdesc, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                            }
                            writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                            if (appType == "CS" || appType == "MS")
                            {
                                SMSHelper smsH = new SMSHelper();

                                MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();
                                smsMsg = smsH.getMessageBillerGGI(agentName, MapTaxID, billerName, "Slip No", "Customer ID", "Receipt No", "Ref", ref1, ref2, ref3, txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);



                                try
                                {
                                    writeLog(logAppender + "sendSMSWithTxnID starts.");
                                    // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                    writeLog(logAppender + "Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);

                                    // smsWcf.SendSms(txnID.ToString(), smsMsg, mobileNo, sendername);
                                    writeLog(logAppender + "sendSMSWithTxnID ends.");
                                }
                                catch (Exception ex)
                                {
                                }
                            }

                            Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));


                            StringBuilder sb = new StringBuilder();
                            sb.Append("<ConfirmRes>");
                            sb.Append("<Version>1.0</Version>");
                            sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                            sb.Append("<MessageID>" + messageid + "</MessageID>");
                            sb.Append("<ResCode>" + rescode + "</ResCode>");
                            sb.Append("<ResDesc>" + resdecs + "</ResDesc>");
                            sb.Append("<Ref1>" + ref1 + "</Ref1>");
                            sb.Append("<Ref2>" + ref2 + "</Ref2>");
                            sb.Append("<Ref3>" + ref3 + "</Ref3>");
                            sb.Append("<Ref4></Ref4>");
                            sb.Append("<Ref5>" + mobileNo + "</Ref5>");
                            sb.Append("<Ref1Name>" + ref1Name + "</Ref1Name>");
                            sb.Append("<Ref2Name>" + ref2Name + "</Ref2Name>");
                            sb.Append("<Ref3Name>" + ref3Name + "</Ref3Name>");
                            sb.Append("<Ref4Name> </Ref4Name>");
                            sb.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                            sb.Append("<BatchID>" + batchid + "</BatchID>");
                            sb.Append("<Balance>" + avalbal + "</Balance>");
                            sb.Append("<TxnID>" + txnID + "</TxnID>");
                            sb.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                            sb.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");

                            sb.Append("<SMS>" + smsMsg + "</SMS>");
                            sb.Append("</ConfirmRes>");
                            writeLog(logAppender + "RES XML : " + sb.ToString());
                            return sb.ToString();
                            #endregion
                        }
                        else
                        {

                            if (ConfigurationManager.AppSettings["IsAwbaMIT"].ToString() == "Y")
                            {
                                #region <-- Awba Mit Mfi -->
                                writeLog(logAppender + "This is Awba Mit");
                                //MahaAwbaWCF.RouteWebServiceSoapClient awbaWcf = new MahaAwbaWCF.RouteWebServiceSoapClient();
                                //    awbaRepayWCF.RouteWebServiceSoapClient awbaWcf = new awbaRepayWCF.RouteWebServiceSoapClient();


                                double avalbal = 0;
                                double legbal = 0;
                                SSLPost Post = new SSLPost();
                                StringBuilder hb = new StringBuilder();
                                string mitConfirmUrl = string.Empty;
                                string mitAwbaConfirmMethod = "RepayTransaction";
                                mitConfirmUrl = ConfigurationManager.AppSettings["MitAwbaUrl"].ToString() + mitAwbaConfirmMethod;
                                string hashkeystr = Utils.GethashKeyawbaConfirmReq("1.0", ts, messageid, ref2, ref1, Utils.getFromOrginalTo12Digit(amount));
                                #region <-- Request xml to awba -->
                                hb.Append("<ConfirmReq>");
                                hb.Append("<Version>1.0</Version>");
                                hb.Append("<TimeStamp>" + ts + "</TimeStamp>");
                                hb.Append("<MessageID>" + messageid + "</MessageID>");
                                hb.Append("<CustomerID>" + ref2 + "</CustomerID>");
                                hb.Append("<SlipNo>" + ref1 + "</SlipNo>");
                                hb.Append("<Amount>" + Utils.getFromOrginalTo12Digit(amount) + "</Amount>");
                                //hb.Append("<InterestAmount></InterestAmount>");
                                //hb.Append("<PanelFeesAmount></PanelFeesAmount>"); 
                                hb.Append("<HashValue>" + hashkeystr + "</HashValue>");
                                hb.Append("</ConfirmReq>");
                                #endregion
                                writeLog(logAppender + "Confirm XML Req to awba:" + hb.ToString());
                                SinaptIQPKCS7.PKCS7 pkcs7 = new SinaptIQPKCS7.PKCS7();
                                string encryptedMsg = pkcs7.encryptMessage(hb.ToString(), pkcs7.getPublicCert(ConfigurationManager.AppSettings["publicKeyPathawba"].ToString()));//Convert.ToBase64String(encodedEncryptedCms);
                                string responsestr = string.Empty;
                                string decryptedresdata = string.Empty;
                                string reciptNo = string.Empty;
                                #region <-- Request to awba -->
                                try
                                {
                                    if (!Post.postToMitAwba(mitConfirmUrl, encryptedMsg, out responsestr, out errMsg))
                                    {
                                        writeLog(logAppender + "Encrypted response data from MFI:" + responsestr);
                                        writeLog(logAppender + "MIT Awba Posting Error Message:" + errMsg);


                                        rescode = "99";
                                        resdecs = "Cannot Connect To MFI";
                                        //return GeterrorResponse(rescode, resdecs, txnID, resdecs);
                                        return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                    }
                                }
                                catch (Exception ex)
                                {
                                    writeLog(logAppender + "Exception error Response From MFI" + ex.Message);

                                    rescode = "99";
                                    resdecs = "Cannot Connect To MFI";
                                    //return GeterrorResponse(rescode, resdecs, txnID, resdecs);
                                    return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);

                                }
                                #endregion
                                //string privatecer = ConfigurationManager.AppSettings["privateKeyPathawba"].ToString();
                                //string pass = ConfigurationManager.AppSettings["privateKeyPWDawba"].ToString();
                                decryptedresdata = pkcs7.decryptMessage(responsestr, pkcs7.getPrivateCert(ConfigurationManager.AppSettings["privateKeyPathawba"].ToString(), ConfigurationManager.AppSettings["privateKeyPWDawba"].ToString()));
                                writeLog(logAppender + "XML RESPONSE FROM MFI After Decrypt:" + decryptedresdata);
                                Hashtable htt = Utils.getHTableFromXML(decryptedresdata);
                                mobileNo = ref3;
                                if (!IsValidateConfirmResAwba(htt, out rescode, out resdecs, out version, out messageid, out ref1, out ref2, out ref3, out ref4, out ts, out reciptNo))
                                {
                                    #region <-- Awba valadation response not ok -->

                                    //return GeterrorResponse(rescode, resdecs, txnID, resdecs);
                                    return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                    #endregion
                                }
                                else
                                {
                                    if (rescode == "00")
                                    {
                                        resdecs = "Success";
                                        #region <-- If valadation of awba response ok -->
                                        int batchid = 0;
                                        //double availablebalance = 0;
                                        //double ledgerbalance = 0;

                                        #region <-- Confirm Update -->
                                        if (!_agentWCF.ConfirmUpdate(txnID,
                                            ref1, ref2, ref3, productdesc, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                            agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                                        {
                                            writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                            resdecs = "Error in update database";
                                            rescode = "06";
                                            if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                            {
                                                writeLog(logAppender + "Error in updateError : " + errMsg);
                                            }
                                            return Utils.getErrorRes(rescode, "Transaction fail");
                                        }
                                        else
                                        {
                                            writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                        }
                                        #endregion
                                        writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                        if (appType == "CS" || appType == "MS")
                                        {
                                            #region <-- Send SMS -->
                                            SMSHelper smsH = new SMSHelper();
                                            MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();
                                            smsMsg = smsH.getMessageBillerGGI(agentName, MapTaxID, billerName, "Slip No", "Customer ID", "Receipt No", "Ref", ref1, ref2, ref3, txnID.ToString(),
                                                double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);



                                            try
                                            {
                                                writeLog(logAppender + "sendSMSWithTxnID starts.");
                                                // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);

                                                writeLog(logAppender + "Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                                smsWcf.SendSms(txnID.ToString(), smsMsg, mobileNo, sendername);

                                                writeLog(logAppender + "sendSMSWithTxnID ends.");
                                            }
                                            catch (Exception ex)
                                            {
                                            }
                                            #endregion
                                        }

                                        Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));

                                        #region <-- Response to mobile -->
                                        StringBuilder sb = new StringBuilder();
                                        sb.Append("<ConfirmRes>");
                                        sb.Append("<Version>1.0</Version>");
                                        sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                                        sb.Append("<MessageID>" + messageid + "</MessageID>");
                                        sb.Append("<ResCode>" + rescode + "</ResCode>");
                                        sb.Append("<ResDesc>" + resdecs + "</ResDesc>");
                                        sb.Append("<Ref1>" + ref1 + "</Ref1>");
                                        sb.Append("<Ref2>" + ref2 + "</Ref2>");
                                        sb.Append("<Ref3>" + ref3 + "</Ref3>");
                                        sb.Append("<Ref4></Ref4>");
                                        sb.Append("<Ref5>" + mobileNo + "</Ref5>");
                                        sb.Append("<Ref1Name>" + ref1Name + "</Ref1Name>");
                                        sb.Append("<Ref2Name>" + ref2Name + "</Ref2Name>");
                                        sb.Append("<Ref3Name>" + ref3Name + "</Ref3Name>");
                                        sb.Append("<Ref4Name> </Ref4Name>");
                                        sb.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                                        sb.Append("<BatchID>" + batchid + "</BatchID>");
                                        sb.Append("<Balance>" + avalbal + "</Balance>");
                                        sb.Append("<TxnID>" + txnID + "</TxnID>");
                                        sb.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                                        sb.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");

                                        sb.Append("<SMS>" + smsMsg + "</SMS>");
                                        sb.Append("</ConfirmRes>");
                                        writeLog(logAppender + "RES XML : " + sb.ToString());
                                        return sb.ToString();
                                        #endregion
                                        #endregion
                                    }
                                    else
                                    {
                                        #region <-- Response code not equal success -->
                                        resdecs = string.IsNullOrEmpty(resdecs) ? Utils.GetAwbaResDesc(rescode) : resdecs;
                                        //return GeterrorResponse(rescode, resdecs, txnID, resdecs);
                                        return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                        #endregion
                                    }
                                }
                                #endregion
                            }
                            else
                            {
                                #region <-- Awba ACE MIF -->
                                MahaAwbaWCF.RouteWebServiceSoapClient awbaWcf = new MahaAwbaWCF.RouteWebServiceSoapClient();
                                //    awbaRepayWCF.RouteWebServiceSoapClient awbaWcf = new awbaRepayWCF.RouteWebServiceSoapClient();

                                double avalbal = 0;
                                double legbal = 0;
                                SSLPost Post = new SSLPost();
                                StringBuilder hb = new StringBuilder();
                                string hashkeystr = Utils.GethashKeyawbaConfirmReq("1.0", ts, messageid, ref2, ref1, Utils.getFromOrginalTo12Digit(amount));
                                #region <-- Request xml to awba -->
                                hb.Append("<ConfirmReq>");
                                hb.Append("<Version>1.0</Version>");
                                hb.Append("<TimeStamp>" + ts + "</TimeStamp>");
                                hb.Append("<MessageID>" + messageid + "</MessageID>");
                                hb.Append("<CustomerID>" + ref2 + "</CustomerID>");
                                hb.Append("<SlipNo>" + ref1 + "</SlipNo>");
                                hb.Append("<Amount>" + Utils.getFromOrginalTo12Digit(amount) + "</Amount>");
                                //hb.Append("<InterestAmount></InterestAmount>");
                                //hb.Append("<PanelFeesAmount></PanelFeesAmount>"); 
                                hb.Append("<HashValue>" + hashkeystr + "</HashValue>");
                                hb.Append("</ConfirmReq>");
                                #endregion
                                writeLog(logAppender + "Confirm XML Req to awba:" + hb.ToString());
                                SinaptIQPKCS7.PKCS7 pkcs7 = new SinaptIQPKCS7.PKCS7();
                                string encryptedMsg = pkcs7.encryptMessage(hb.ToString(), pkcs7.getPublicCert(ConfigurationManager.AppSettings["publicKeyPathawba"].ToString()));//Convert.ToBase64String(encodedEncryptedCms);
                                string responsestr = string.Empty;
                                string decryptedresdata = string.Empty;
                                string reciptNo = string.Empty;
                                #region <-- Request to awba -->
                                try
                                {
                                    responsestr = awbaWcf.GetRepaymentComfirmation(encryptedMsg);
                                    writeLog(logAppender + "Encrypted response data from MFI:" + responsestr);
                                }
                                catch (Exception ex)
                                {
                                    writeLog(logAppender + "Exception error Response From MFI" + ex.Message);
                                    StringBuilder sb = new StringBuilder();
                                    rescode = "99";
                                    resdecs = "Connect Connect To MFI";
                                    //return GeterrorResponse(rescode, resdecs, txnID, resdecs);
                                    return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);

                                }
                                #endregion
                                //string privatecer = ConfigurationManager.AppSettings["privateKeyPathawba"].ToString();
                                //string pass = ConfigurationManager.AppSettings["privateKeyPWDawba"].ToString();
                                decryptedresdata = pkcs7.decryptMessage(responsestr, pkcs7.getPrivateCert(ConfigurationManager.AppSettings["privateKeyPathawba"].ToString(), ConfigurationManager.AppSettings["privateKeyPWDawba"].ToString()));
                                writeLog(logAppender + "XML RESPONSE FROM MFI After Decrypt:" + decryptedresdata);
                                Hashtable htt = Utils.getHTableFromXML(decryptedresdata);
                                mobileNo = ref3;
                                if (!IsValidateConfirmResAwba(htt, out rescode, out resdecs, out version, out messageid, out ref1, out ref2, out ref3, out ref4, out ts, out reciptNo))
                                {
                                    #region <-- Awba valadation response not ok -->

                                    //return GeterrorResponse(rescode, resdecs, txnID, resdecs);
                                    return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                    #endregion
                                }
                                else
                                {
                                    if (rescode == "00")
                                    {
                                        resdecs = "Success";
                                        #region <-- If valadation of awba response ok -->
                                        int batchid = 0;
                                        //double availablebalance = 0;
                                        //double ledgerbalance = 0;


                                        //string errMsg = null;



                                        #region <-- Confirm Update -->
                                        if (!_agentWCF.ConfirmUpdate(txnID,
                                            ref1, ref2, ref3, productdesc, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                            agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                                        {
                                            writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                        }
                                        else
                                        {
                                            writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                        }
                                        #endregion
                                        writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                        if (appType == "CS" || appType == "MS")
                                        {
                                            #region <-- Send SMS -->
                                            SMSHelper smsH = new SMSHelper();

                                            MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();
                                            smsMsg = smsH.getMessageBillerGGI(agentName, MapTaxID, billerName, "Slip No", "Customer ID", "Receipt No", "Ref", ref1, ref2, ref3, txnID.ToString(),
                                                double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);



                                            try
                                            {
                                                writeLog(logAppender + "sendSMSWithTxnID starts.");
                                                // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);

                                                writeLog(logAppender + "Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                                smsWcf.SendSms(txnID.ToString(), smsMsg, mobileNo, sendername);

                                                writeLog(logAppender + "sendSMSWithTxnID ends.");
                                            }
                                            catch (Exception ex)
                                            {
                                            }
                                            #endregion
                                        }

                                        Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));

                                        #region <-- Response to mobile -->
                                        StringBuilder sb = new StringBuilder();
                                        sb.Append("<ConfirmRes>");
                                        sb.Append("<Version>1.0</Version>");
                                        sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                                        sb.Append("<MessageID>" + messageid + "</MessageID>");
                                        sb.Append("<ResCode>" + rescode + "</ResCode>");
                                        sb.Append("<ResDesc>" + resdecs + "</ResDesc>");
                                        sb.Append("<Ref1>" + ref1 + "</Ref1>");
                                        sb.Append("<Ref2>" + ref2 + "</Ref2>");
                                        sb.Append("<Ref3>" + ref3 + "</Ref3>");
                                        sb.Append("<Ref4></Ref4>");
                                        sb.Append("<Ref5>" + mobileNo + "</Ref5>");
                                        sb.Append("<Ref1Name>" + ref1Name + "</Ref1Name>");
                                        sb.Append("<Ref2Name>" + ref2Name + "</Ref2Name>");
                                        sb.Append("<Ref3Name>" + ref3Name + "</Ref3Name>");
                                        sb.Append("<Ref4Name> </Ref4Name>");
                                        sb.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                                        sb.Append("<BatchID>" + batchid + "</BatchID>");
                                        sb.Append("<Balance>" + avalbal + "</Balance>");
                                        sb.Append("<TxnID>" + txnID + "</TxnID>");
                                        sb.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                                        sb.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");

                                        sb.Append("<SMS>" + smsMsg + "</SMS>");
                                        sb.Append("</ConfirmRes>");
                                        writeLog(logAppender + "RES XML : " + sb.ToString());
                                        return sb.ToString();
                                        #endregion
                                        #endregion
                                    }
                                    else
                                    {
                                        #region <-- Response code not equal success -->
                                        resdecs = string.IsNullOrEmpty(resdecs) ? Utils.GetAwbaResDesc(rescode) : resdecs;
                                        //return GeterrorResponse(rescode, resdecs, txnID, resdecs);
                                        return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                        #endregion
                                    }
                                }
                                #endregion
                            }
                        }

                    }

                    #endregion                 

                    #region <-- Legacy Music -->
                    else if (MapTaxID == "0000000000028") /////For Legacy Music
                    {
                        writeLog(logAppender + "This is Legacy Music.");
                        int batchid = 0;
                        //double availablebalance = 0;
                        //double ledgerbalance = 0;
                        writeLog(logAppender + "LegacyMusic Confirm Req : CardType" + ref1);
                        string plaintoken = ConfigurationManager.AppSettings["legacyMusicToken"].ToString();

                        string plainCount = ConfigurationManager.AppSettings["cardcount"].ToString();
                        string encryptedToken = string.Empty;
                        string encryptedcardtype = string.Empty;
                        string encryptedcount = string.Empty;
                        string encryptedcode = string.Empty;
                        string plaincode = string.Empty;
                        string rescardtype = string.Empty;
                        string restxnid = string.Empty;

                        string resretrunmessage = string.Empty;
                        string rescardcount = string.Empty;
                        bool result = false;
                        string amountToPutet = Utils.getFromOrginalTo12Digit(amount);
                        double avalbal = 0;
                        double legbal = 0;


                        if (!_agentWCF.InsertTransactionLog(txnID, "ConfirmReq", ("cardType:" + ref1 + "|CardCount:" + plainCount), out errMsg))
                        {
                            writeLog(logAppender + "Error in InsertTransactionLog Req : " + errMsg);
                        }
                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            writeLog(logAppender + "Simulator Y");
                            StringBuilder sb = new StringBuilder();
                            plaincode = "XYZTUVWREVQWYLNI";
                            restxnid = DateTime.Now.ToString("ddMMyyy hh:mm:ss:fff");

                            string testpin = System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                            string time = System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                            mobileNo = ref3;
                            ref4 = plaincode + " " + DateTime.Now.AddDays(365).ToShortDateString().Trim();
                            rescode = "00";
                            writeLog(logAppender + "***************Enter Confirm Update *******************");

                            if (appType == "CS" || appType == "MS")
                            {
                                SMSHelper smsH = new SMSHelper();
                                MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();

                                smsMsg = smsH.getMessagelegacyMusic(agentName, MapTaxID, billerName, "PIN", "", "", "Ref", plaincode, "", "", txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                try
                                {
                                    writeLog(logAppender + "sendSMSWithTxnID starts.");
                                    // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                    writeLog(logAppender + "Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                    smsWcf.SendSms(txnID.ToString(), smsMsg, mobileNo, sendername);
                                    writeLog(logAppender + "sendSMSWithTxnID ends.");
                                }
                                catch (Exception ex)
                                {
                                }
                            }


                            if (!_agentWCF.ConfirmUpdate(txnID,
                                  ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                  agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }
                            StringBuilder sb1 = new StringBuilder();
                            sb1.Append("<ConfirmRes>");
                            sb1.Append("<Version>1.0</Version>");
                            sb1.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                            sb1.Append("<MessageID>" + messageid + "</MessageID>");
                            sb1.Append("<BillerName>" + billerName + "</BillerName>");
                            sb1.Append("<BillerLogo>" + billerLogo + "</BillerLogo>");
                            sb1.Append("<ResCode>" + rescode + "</ResCode>");
                            sb1.Append("<ResDesc>" + resdecs + "</ResDesc>");
                            sb1.Append("<Ref1>" + ref1 + "</Ref1>");
                            sb1.Append("<Ref2>" + ref2 + "</Ref2>");
                            sb1.Append("<Ref3>" + "1234567890876" + "</Ref3>");
                            sb1.Append("<Ref4>" + ref4 + "</Ref4>");
                            sb1.Append("<Ref5>" + mobileNo + "</Ref5>");
                            sb1.Append("<Ref1Name>" + ref1Name + "</Ref1Name>");
                            sb1.Append("<Ref2Name>" + ref2Name + "</Ref2Name>");
                            sb1.Append("<Ref3Name>" + ref3Name + "</Ref3Name>");
                            sb1.Append("<Ref4Name>" + ref4Name + "</Ref4Name>");
                            sb1.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                            sb1.Append("<BatchID>" + batchid + "</BatchID>");
                            sb1.Append("<Balance>" + avalbal + "</Balance>");
                            sb1.Append("<TxnID>" + txnID + "</TxnID>");
                            sb1.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                            sb1.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");
                            sb1.Append("<SMS>" + smsMsg + "</SMS>");
                            sb1.Append("</ConfirmRes>");
                            writeLog(logAppender + "RES XML : " + sb1.ToString());
                            return sb1.ToString();
                        }
                        else
                        {

                            mobileNo = ref3;
                            legancyMusicStoreWCF.PayHereSoapClient lagency = new legancyMusicStoreWCF.PayHereSoapClient();
                            legancyMusicStoreWCF.RedeemCard redeemcard = new legancyMusicStoreWCF.RedeemCard();
                            encryptedToken = Utils.legacyEncrypt(plaintoken);
                            encryptedcardtype = Utils.legacyEncrypt(ref1.Trim());
                            encryptedcount = Utils.legacyEncrypt(plainCount);
                            writeLog(logAppender + "Enter Code");
                            redeemcard = lagency.GenerateMusicStoreRedeemCode(encryptedToken, encryptedcardtype, encryptedcount);

                            int listcount = redeemcard.lstcard.Length;
                            if (listcount > 0)
                            {
                                writeLog(logAppender + "Response TxnID :" + redeemcard.TranscationID + "|Response PIN:" + redeemcard.lstcard[0].Code.ToString() + "|response Message:" + Utils.legacyDecrypt(redeemcard.ReturnMessage));
                                ref1 = Utils.legacyDecrypt(redeemcard.CardType);
                                ref3 = Utils.legacyDecrypt(redeemcard.TranscationID);

                                rescode = Utils.legacyDecrypt(redeemcard.ReturnMessage);
                                rescardcount = Utils.legacyDecrypt(redeemcard.CardCount);


                                plaincode = Utils.legacyDecrypt(redeemcard.lstcard[0].Code.ToString());
                                ref4 = plaincode + " " + DateTime.Now.AddDays(365).ToShortDateString().Trim();
                                rescode = "00";
                                result = true;
                            }
                            else
                            {
                                resdecs = Utils.legacyDecrypt(redeemcard.ReturnMessage);
                            }
                        }

                        if (!result)
                        {
                            writeLog(logAppender + "Error in Get LegacyCode : " + resdecs);

                            //return GeterrorResponse("05", resdecs, txnID, resdecs);

                            return GetErrorResponseWithAddBalance("05", resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }
                        else
                        {
                            writeLog(logAppender + "***************Enter Confirm Update *******************");

                            if (appType == "CS" || appType == "MS")
                            {
                                SMSHelper smsH = new SMSHelper();
                                MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();

                                smsMsg = smsH.getMessagelegacyMusic(agentName, MapTaxID, billerName, "PIN", "", "", "Ref", plaincode, "", "", txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                try
                                {
                                    writeLog(logAppender + "sendSMSWithTxnID starts.");
                                    // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                    writeLog(logAppender + "Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                    smsWcf.SendSms(txnID.ToString(), smsMsg, mobileNo, sendername);
                                    writeLog(logAppender + "sendSMSWithTxnID ends.");
                                }
                                catch (Exception ex)
                                {
                                }
                            }


                            if (!_agentWCF.ConfirmUpdate(txnID,
                                  ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                  agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }
                            StringBuilder sb = new StringBuilder();
                            sb.Append("<ConfirmRes>");
                            sb.Append("<Version>1.0</Version>");
                            sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                            sb.Append("<MessageID>" + messageid + "</MessageID>");
                            sb.Append("<BillerName>" + billerName + "</BillerName>");
                            sb.Append("<BillerLogo>" + billerLogo + "</BillerLogo>");
                            sb.Append("<ResCode>" + rescode + "</ResCode>");
                            sb.Append("<ResDesc>" + resdecs + "</ResDesc>");
                            sb.Append("<Ref1>" + ref1 + "</Ref1>");
                            sb.Append("<Ref2>" + ref2 + "</Ref2>");
                            sb.Append("<Ref3>" + ref3 + "</Ref3>");
                            sb.Append("<Ref4>" + ref4 + "</Ref4>");
                            sb.Append("<Ref5>" + mobileNo + "</Ref5>");
                            sb.Append("<Ref1Name>" + ref1Name + "</Ref1Name>");
                            sb.Append("<Ref2Name>" + ref2Name + "</Ref2Name>");
                            sb.Append("<Ref3Name>" + ref3Name + "</Ref3Name>");
                            sb.Append("<Ref4Name>" + ref4Name + "</Ref4Name>");
                            sb.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");

                            sb.Append("<BatchID>" + batchid + "</BatchID>");
                            sb.Append("<Balance>" + avalbal + "</Balance>");
                            sb.Append("<TxnID>" + txnID + "</TxnID>");
                            sb.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                            sb.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");
                            sb.Append("<SMS>" + smsMsg + "</SMS>");
                            sb.Append("</ConfirmRes>");
                            writeLog(logAppender + "RES XML : " + sb.ToString());
                            return sb.ToString();


                        }
                    }
                    #endregion

                    #region <-- FourTV Confirm -->
                    if (MapTaxID == "0000000000031")
                    {
                        string tempamt = string.Empty;
                        string tempname = string.Empty;
                        //double availablebalance = 0;
                        //double ledgerbalance = 0;
                        mobileNo = ref3;
                        double avalbal = 0;
                        double legbal = 0;

                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {

                            #region <-- Simulator Mode -->
                            writeLog(logAppender + "get 4TV Product Price List");
                            string fourTVProductPrice = ConfigurationManager.AppSettings["fourTVPrice"].ToString();//get ProductID:Price string set of 4TV.
                            writeLog(logAppender + "get 4TV Product Price List OK");
                            Hashtable fourTVProductPriceHt = Utils.getMerchantCodeHashtable(fourTVProductPrice);//Fatch productID and Price pair of 4TV

                            writeLog(logAppender + "get 4TV Product Price List");
                            string fourTVProductName = ConfigurationManager.AppSettings["fourTVProduct"].ToString();//get ProductID:Price string set of 4TV.
                            writeLog(logAppender + "get 4TV Product Price List OK");
                            Hashtable fourTVProductNameHt = Utils.getMerchantCodeHashtable(fourTVProductName);//Fatch productID and Price pair of 4TV


                            if (fourTVProductPriceHt.ContainsKey(fourTVproductID))
                            {
                                tempamt = fourTVProductPriceHt[fourTVproductID].ToString();
                                writeLog(logAppender + "productPirce" + tempamt);
                            }

                            if (fourTVProductNameHt.Contains(fourTVproductID))
                            {
                                tempname = fourTVProductNameHt[fourTVproductID].ToString();
                                ref3 = tempname;
                            }

                            ref4 = ref3.Replace(" ", "") + " " + DateTime.Now.AddDays(30).ToString("dd-MM-yyyy");
                            if (!_agentWCF.ConfirmUpdate(txnID,
                         ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                         agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                            }
                            writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S")//topup type is null or S
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();
                                    string[] words = ref4.Split(' ');
                                    string PIN = words[0].ToString();
                                    string Expiry = words[1].ToString();

                                    smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, ref1Name, ref3Name, "Expiry", "Ref", ref1, ref3, Expiry, txnID.ToString(),
                                           double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                    try
                                    {
                                        writeLog(logAppender + "sendSMSWithTxnID starts.");
                                        smsWcf.SendSms(txnID.ToString(), smsMsg, mobileNo, sendername);
                                        writeLog(logAppender + "sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                        writeLog(logAppender + "Exception was occure when send sms:" + ex.Message);
                                    }
                                }

                            }

                            #region <-- Response Back To Client -->
                            rescode = "00";
                            resdecs = "Success";
                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = rescode;
                            confirmres.resdesc = resdecs;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = ref4;
                            confirmres.ref5 = mobileNo;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.ref4Name = ref4Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);
                            #endregion

                            #endregion
                        }
                        else
                        {
                            #region <-- Simulater Mode Off -->
                            writeLog(logAppender + "get 4TV Product Price List");
                            string fourTVProductPrice = ConfigurationManager.AppSettings["fourTVPrice"].ToString();//get ProductID:Price string set of 4TV.
                            writeLog(logAppender + "get 4TV Product Price List OK");
                            Hashtable fourTVProductPriceHt = Utils.getMerchantCodeHashtable(fourTVProductPrice);//Fatch productID and Price pair of 4TV

                            writeLog(logAppender + "get 4TV Product Price List");
                            string fourTVProductName = ConfigurationManager.AppSettings["fourTVProduct"].ToString();//get ProductID:Price string set of 4TV.
                            writeLog(logAppender + "get 4TV Product Price List OK");
                            Hashtable fourTVProductNameHt = Utils.getMerchantCodeHashtable(fourTVProductName);//Fatch productID and Price pair of 4TV


                            if (fourTVProductPriceHt.ContainsKey(fourTVproductID))
                            {
                                tempamt = fourTVProductPriceHt[fourTVproductID].ToString();
                                writeLog(logAppender + "productPirce" + tempamt);
                            }

                            if (fourTVProductNameHt.Contains(fourTVproductID))
                            {
                                tempname = fourTVProductNameHt[fourTVproductID].ToString();
                                ref3 = tempname;
                            }
                            writeLog(logAppender + "Request amount:" + amount + "amount from Config:" + tempamt);
                            if (tempamt == amount)
                            {
                                writeLog(logAppender + "Amount Match");
                                string responseData = string.Empty;
                                string username = ConfigurationManager.AppSettings["fourTVUserID"].ToString();
                                string pas = ConfigurationManager.AppSettings["fourTVPass"].ToString();
                                string parameter = "username=" + username + "&password=" + pas + "&viewers_smartcard_id=" + ref1 + "&products_id=" + fourTVproductID + "&transid=" + txnID + "&amount=" + amount;
                                string url = ConfigurationManager.AppSettings["fourTVUri"].ToString();
                                writeLog(logAppender + "Request URL:" + url);
                                writeLog(logAppender + "Request Parameter:" + parameter);
                                url = url + "subscribe.php";
                                fuorTVSubscribeRes fourTVRes = new fuorTVSubscribeRes();
                                SSLPost post = new SSLPost();
                                if (post.postData(url, parameter, out responseData, out errMsg))
                                {
                                    writeLog(logAppender + "Response from FourTV" + responseData);
                                    JavaScriptSerializer sescriberes = new JavaScriptSerializer();
                                    fourTVRes = sescriberes.Deserialize<fuorTVSubscribeRes>(responseData);
                                    // StringBuilder sb = new StringBuilder();
                                    if (fourTVRes.status == 1)
                                    {
                                        ref4 = ref3.Replace(" ", "") + " " + fourTVRes.response.expire_date.ToString("dd-MM-yyyy");
                                        if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                     agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                                        {
                                            writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                        }
                                        else
                                        {
                                            writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                        }
                                        writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                        if (appType == "CS" || appType == "MS")
                                        {
                                            if (string.IsNullOrEmpty(topupType) || topupType == "S")//topup type is null or S
                                            {
                                                SMSHelper smsH = new SMSHelper();
                                                MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();
                                                string[] words = ref4.Split(' ');
                                                string PIN = words[0].ToString();
                                                string Expiry = words[1].ToString();

                                                smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, ref1Name, ref3Name, "Expiry", "Ref", ref1, ref3, Expiry, txnID.ToString(),
                                                       double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                                try
                                                {
                                                    writeLog(logAppender + "sendSMSWithTxnID starts.");
                                                    smsWcf.SendSms(txnID.ToString(), smsMsg, mobileNo, sendername);
                                                    writeLog(logAppender + "sendSMSWithTxnID ends.");
                                                }
                                                catch (Exception ex)
                                                {
                                                    writeLog(logAppender + "Exception was occure when send sms:" + ex.Message);
                                                }
                                            }

                                        }

                                        #region <-- Response Back To Client -->
                                        rescode = "00";
                                        resdecs = "Success";
                                        ConfirmResponseModel confirmres = new ConfirmResponseModel();
                                        confirmres.taxID = taxID;
                                        confirmres.email = email;
                                        confirmres.password = password;
                                        confirmres.messageid = messageid;
                                        confirmres.billername = billerName;
                                        confirmres.billerlogo = billerLogo;
                                        confirmres.rescode = rescode;
                                        confirmres.resdesc = resdecs;
                                        confirmres.ref1 = ref1;
                                        confirmres.ref2 = ref2;
                                        confirmres.ref3 = ref3;
                                        confirmres.ref4 = ref4;
                                        confirmres.ref5 = mobileNo;
                                        confirmres.ref1Name = ref1Name;
                                        confirmres.ref2Name = ref2Name;
                                        confirmres.ref3Name = ref3Name;
                                        confirmres.ref5Name = ref5Name;
                                        confirmres.ref4Name = ref4Name;
                                        confirmres.availablebalance = availablebalance.ToString();
                                        confirmres.txnID = txnID.ToString();
                                        confirmres.TodayTxnAmount = TodayTxnAmount;
                                        confirmres.TodayTxnCount = TodayTxnCount;
                                        confirmres.smsMsg = smsMsg;

                                        return Utils.getConfirmRes(confirmres);
                                        #endregion

                                    }
                                    else
                                    {
                                        return GetErrorResponseWithAddBalance("06", "Topup Fail!", txnID, fourTVRes.message, agentID, agentAmount, isAgreement);
                                    }


                                }
                                else
                                {
                                    writeLog(logAppender + "Error Posting To 4TV:" + errMsg);
                                    return GetErrorResponseWithAddBalance("06", "System Busy!", txnID, "Cannot Post!", agentID, agentAmount, isAgreement);
                                }
                            }
                            else
                            {
                                writeLog(logAppender + "Amount Miss match");
                                return GeterrorResponse("06", "Invalid Amount", txnID, "Invalid amount");
                            }



                            #endregion
                        }
                    }


                    #endregion

                    #region <-- 123RemitCashIn -->

                    if (MapTaxID == "0000000000032")
                    {

                        writeLog(logAppender + "This is 123 Remit CashIn");
                        int batchid = 0;
                        //double availablebalance = 0;
                        //double ledgerbalance = 0;
                        string agnid = string.Empty;
                        string BranchId = string.Empty;
                        mobileNo = ref5;
                        writeLog(logAppender + mobileNo);
                        double avalbal = 0;
                        double legbal = 0;

                        RouteAPI api_service = new RouteAPI();
                        if (IsTokenNullOrExpire(Token))
                        {
                            Token = GetOAuthToken();
                        }

                        CashInConfirmRequest cashinRequest = new CashInConfirmRequest();
                        CashInConfirmResponse cashinResponse = new CashInConfirmResponse();
                        cashinRequest.Channel = ConfigurationManager.AppSettings["123RemitChannelCode"].ToString();
                        cashinRequest.Token = Token.Token;
                        cashinRequest.Amount = amount;
                        string[] txninfo = imgnrc.Split('-'); // for ref6
                        cashinRequest.TxnRef = txninfo[0].ToString();
                        string PaidBy = txninfo[1].ToString();
                        BranchId = txninfo[2].ToString();
                        cashinRequest.OrderId = txnID.ToString();
                        if (ht.ContainsKey("Ref5"))
                        {
                            cashinRequest.PayerMobileNumber = ht["Ref5"].ToString();
                        }
                        else cashinRequest.PayerMobileNumber = string.Empty;

                        var json_serializer1 = new JavaScriptSerializer();

                        string jsonReq = json_serializer1.Serialize(cashinRequest);

                        writeLog(logAppender + "123 Remit CashIn request:" + jsonReq);

                        if (!_agentWCF.InsertTransactionLog(txnID, "ConfirmReq", jsonReq, out errMsg))
                        {
                            writeLog(logAppender + "Error in InsertTransactionLog Req : " + errMsg);
                        }

                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            #region <-- If Simulator is on -->
                            writeLog(logAppender + "Simulator Y");
                            Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));

                            status = "PA";
                            ConfirmResponseModel responseCashIn = new ConfirmResponseModel();
                            responseCashIn.version = "1.0";
                            responseCashIn.timestamp = System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                            responseCashIn.email = email;
                            responseCashIn.password = password;
                            responseCashIn.taxID = taxID;
                            responseCashIn.txnID = txnID.ToString();
                            responseCashIn.TodayTxnAmount = TodayTxnAmount;
                            responseCashIn.TodayTxnCount = TodayTxnCount;
                            responseCashIn.availablebalance = availablebalance.ToString();
                            responseCashIn.billername = agentName;
                            responseCashIn.billerlogo = billerLogo;
                            string responseXML = Utils.getConfirmRes(responseCashIn);
                            writeLog(logAppender + "RES XML : " + responseXML);

                            #endregion
                        }
                        else
                        {


                            string API = ConfigurationManager.AppSettings["123RemitCashInConfirmUrl"].ToString();

                            string cashinResponseJson = SSLPost.SendRequestJson(jsonReq, API);

                            var json_serializerpinres = new JavaScriptSerializer();

                            GetConfirmCashInResult CashInConfirmResult = json_serializerpinres.Deserialize<GetConfirmCashInResult>(cashinResponseJson);

                            cashinResponse = CashInConfirmResult.ConfirmCashInResult;

                            writeLog(logAppender + "123 Remit CashIn Confirm response:" + cashinResponseJson);

                            if (cashinResponse.ResponseCode != "0")
                            {
                                ErrorResponse errResponse = new ErrorResponse();
                                errResponse.ResCode = cashinResponse.ResponseCode;
                                errResponse.ResDesc = VerificationRemittanceResponse.VerifyResponse(Convert.ToInt16(cashinResponse.ResponseCode));
                                string apiResponse = GetErrorResponseWithAddBalance(errResponse.ResCode, errResponse.ResDesc, txnID, errResponse.ResDesc, agentID, agentAmount, isAgreement);
                                return apiResponse;

                            }
                            else
                            {
                                cashinResponse = DecryptionResponse.DecryptCashinInConfirmResponse(cashinResponse);

                                status = "AP";

                                rescode = "00";
                            }

                            if (!_agentWCF.InsertTransactionLog(txnID, "ConfirmRes", cashinResponseJson, out errMsg))
                            {
                                writeLog(logAppender + "Error in InsertTransactionLog Res : " + errMsg);
                            }

                        }



                        if (rescode != "00")
                        {
                            ConfirmResponseModel confirmResponse = new ConfirmResponseModel();

                            confirmResponse.billername = billerName;
                            confirmResponse.billerlogo = billerLogo;
                            confirmResponse.rescode = cashinResponse.ResponseCode;
                            confirmResponse.resdesc = "System Error";
                            confirmResponse.taxID = taxID;
                            confirmResponse.ref1 = ref1;
                            confirmResponse.ref2 = ref2;
                            confirmResponse.ref3 = ref3;
                            confirmResponse.ref4 = ref4;
                            confirmResponse.ref5 = ref5;
                            confirmResponse.ref1Name = ref1Name;
                            confirmResponse.ref2Name = ref2Name;
                            confirmResponse.ref3Name = ref3Name;
                            confirmResponse.ref4Name = ref4Name;
                            confirmResponse.ref5Name = ref5Name;
                            confirmResponse.TodayTxnAmount = TodayTxnAmount;
                            confirmResponse.TodayTxnCount = TodayTxnCount;
                            confirmResponse.txnID = txnID.ToString();
                            confirmResponse.availablebalance = availablebalance.ToString();
                            string confirmRes = Utils.getConfirmRes(confirmResponse);
                            writeLog(logAppender + "RES XML : " + confirmRes);
                            if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                            {
                                writeLog(logAppender + "Error in updateError : " + errMsg);
                            }
                            return confirmRes;
                        }
                        else
                        {
                            writeLog(logAppender + "***************Enter Confirm Update *******************");

                            agentAmount = Convert.ToDouble(OneTwoThreeRemit.GetPartnerAmount(Convert.ToDecimal(serviceFeeDbl - oneStopFeeDbl + agentFeeDbl), Convert.ToDecimal(agentFee), Convert.ToDecimal(amount), 1));


                            if (!_agentWCF.ConfirmUpdate(txnID, cashinResponse.TxnRef + "-" + PaidBy, ref1, ref2, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                     agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }
                            if (appType == "CS" || appType == "MS")
                            {
                                SMSHelper smsH = new SMSHelper();

                                MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();
                                decimal TotalAmountFor123Remit = Convert.ToDecimal(ServiceFeeFor123Remit) + Convert.ToDecimal(amount);
                                smsMsg = smsH.getMessageBiller(agentName, taxID, billerName, "Payer Name", "", "", "Ref", ref1, "", "", txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), ServiceFeeFor123Remit, TotalAmountFor123Remit.ToString("#,##0.00"), branchCode);

                                try
                                {
                                    writeLog(logAppender + "sendSMSWithTxnID starts.");
                                    // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                    writeLog(logAppender + "Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                    smsWcf.SendSms(txnID.ToString(), smsMsg, mobileNo, sendername);

                                    writeLog(logAppender + "sendSMSWithTxnID ends.");
                                }
                                catch (Exception ex)
                                {

                                }
                            }

                            #region <-- Notification -->
                            DataSet dsUser = new DataSet();
                            if (!_agentWCF.InsertRemittanceNotification(Convert.ToInt64(cashinResponse.TxnRef), Convert.ToDecimal(amount), Convert.ToInt32(BranchId), 1, out errmsg))
                            {
                                writeLog(logAppender + "Error in InsertRemittanceNotification" + errmsg);
                            }
                            //if (appType == "CS" || appType == "MS")
                            //{
                            _agentWCF.GetPartnerUserListByBranchCode(Convert.ToInt32(BranchId), out dsUser, out errmsg);
                            pushNotiWCF.ServiceClient _notiservice = new pushNotiWCF.ServiceClient();
                            DataTable dtUser = dsUser.Tables[0];
                            string devicetoken = string.Empty;
                            string message = string.Empty;
                            string BranchName = dtUser.Rows[0]["AGENTBRANCHNAME"].ToString();
                            for (int i = 0; i < dtUser.Rows.Count; i++)
                            {
                                if (dtUser.Rows[i]["LOGINDEVICE"].ToString() == "M")
                                {
                                    devicetoken = dtUser.Rows[i]["DEVICETOKEN"].ToString();
                                    message = Get123RemitNotificationMessage(Convert.ToDecimal(amount), BranchName, cashinResponse.TxnRef, "CashIn");
                                    _notiservice.PushToAndroid(devicetoken, message, "", "", out errmsg);
                                }
                            }
                            //}
                            #endregion
                            Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));

                            ConfirmResponseModel confirmResponse = new ConfirmResponseModel();
                            confirmResponse.rescode = "00";
                            confirmResponse.resdesc = "Success";
                            confirmResponse.email = email;
                            confirmResponse.password = password;
                            confirmResponse.messageid = messageid;
                            confirmResponse.taxID = taxID;
                            confirmResponse.billername = billerName;
                            confirmResponse.billerlogo = billerLogo;
                            confirmResponse.ref1 = ref1;
                            confirmResponse.ref2 = ref2;
                            confirmResponse.ref3 = ref3;
                            confirmResponse.ref4 = ref4;
                            confirmResponse.ref5 = ref5;
                            confirmResponse.ref1Name = "Payer Name";
                            confirmResponse.ref2Name = "Payee Name";
                            //confirmResponse.Ref3Name = "Payee Mobile";
                            confirmResponse.ref3Name = "";
                            confirmResponse.ref4Name = "Payee NRC";
                            confirmResponse.ref5Name = "Mobile No";
                            confirmResponse.batchID = string.Empty;
                            confirmResponse.availablebalance = availablebalance.ToString();
                            confirmResponse.txnID = txnID.ToString();
                            confirmResponse.TodayTxnCount = TodayTxnCount;
                            confirmResponse.TodayTxnAmount = TodayTxnAmount;
                            confirmResponse.smsMsg = smsMsg;
                            string confirmRes = Utils.getConfirmRes(confirmResponse);
                            writeLog(logAppender + "RES XML : " + confirmRes);
                            return confirmRes;


                        }
                    }

                    #endregion

                    #region <-- 123RemitCashOut -->

                    if (MapTaxID == "0000000000033")
                    {

                        writeLog(logAppender + "This is 123 Remit CashOut");
                        int batchid = 0;
                        //double availablebalance = 0;
                        //double ledgerbalance = 0;
                        string agnid = string.Empty;
                        mobileNo = ref5;
                        writeLog(logAppender + mobileNo);
                        double avalbal = 0;
                        double legbal = 0;

                        RouteAPI api_service = new RouteAPI();
                        if (IsTokenNullOrExpire(Token))
                        {
                            Token = GetOAuthToken();
                        }

                        DataSet dsAgent = null;
                        string agentBranchCode = string.Empty;
                        string agentDivision = string.Empty;
                        string agentTownship = string.Empty;


                        if (_agentWCF.checkAgentInfoforCashOut(agentID, email, out dsAgent, out errmsg))
                        {
                            if (dsAgent.Tables[0].Rows.Count > 0)
                            {
                                agentBranchCode = dsAgent.Tables[0].Rows[0]["AGENTBRANCHID"].ToString();
                                agentDivision = dsAgent.Tables[0].Rows[0]["Division"].ToString();
                                agentTownship = dsAgent.Tables[0].Rows[0]["Township"].ToString();
                            }
                        }

                        CashOutConfirmRequest cashoutRequest = new CashOutConfirmRequest();

                        cashoutRequest.Channel = ConfigurationManager.AppSettings["123RemitChannelCode"].ToString();
                        cashoutRequest.Amount = amount;
                        cashoutRequest.Token = Token.Token;
                        cashoutRequest.BranchCode = agentBranchCode;
                        cashoutRequest.DivisionID = agentDivision;
                        cashoutRequest.TownshipID = agentTownship;


                        ref6 = imgnrc;
                        string[] strTxn = ref6.Split('-');
                        cashoutRequest.TxnRef = strTxn[0].ToString();
                        cashoutRequest.DigitalCode = strTxn[1].ToString();
                        string PaidBy = strTxn[2].ToString();
                        var json_serializer1 = new JavaScriptSerializer();

                        string jsonReq = json_serializer1.Serialize(cashoutRequest);

                        writeLog(logAppender + "123 Remit CashOut request:" + jsonReq);

                        if (!_agentWCF.InsertTransactionLog(txnID, "ConfirmReq", jsonReq, out errMsg))
                        {
                            writeLog(logAppender + "Error in InsertTransactionLog Req : " + errMsg);
                        }

                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {

                            #region <-- If Simulator is on -->
                            writeLog(logAppender + "Simulator Y");

                            status = "PA";
                            ConfirmResponseModel responseCashIn = new ConfirmResponseModel();
                            responseCashIn.version = "1.0";
                            responseCashIn.timestamp = System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                            responseCashIn.billername = agentName;
                            responseCashIn.billerlogo = billerLogo;
                            string responseXML = Utils.getConfirmRes(responseCashIn);
                            writeLog(logAppender + "RES XML : " + responseXML);

                            rescode = "00";

                            #endregion
                        }
                        else
                        {

                            string API = ConfigurationManager.AppSettings["123RemitCashOutConfirmUrl"].ToString();

                            string cashoutResponseJson = SSLPost.SendRequestJson(jsonReq, API);

                            var json_serializerpinres = new JavaScriptSerializer();

                            GetConfrimCashOutResult ConfirmCashOutResult = json_serializerpinres.Deserialize<GetConfrimCashOutResult>(cashoutResponseJson);

                            CashOutConfirmResponse cashoutResponse = ConfirmCashOutResult.ConfrimCashOutResult;

                            writeLog(logAppender + "123 Remit CashIn Confirm response:" + cashoutResponseJson);

                            if (cashoutResponse.ResponseCode != "0")
                            {
                                ErrorResponse errResponse = new ErrorResponse();

                                errResponse.Version = "1.0";
                                errResponse.TimeStamp = System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                                errResponse.ResCode = cashoutResponse.ResponseCode;
                                errResponse.ResDesc = VerificationRemittanceResponse.VerifyResponse(Convert.ToInt16(cashoutResponse.ResponseCode));
                                string apiResponse = GeterrorResponse(errResponse.ResCode, errResponse.ResDesc, txnID, errResponse.ResDesc); //APIResponse.GetErrorResponse(errResponse);

                                return apiResponse;

                            }
                            else
                            {
                                cashoutResponse = DecryptionResponse.DecryptCashOutConfirmResponse(cashoutResponse);

                                status = "AP";

                                rescode = "00";

                                agentAmount = Convert.ToDouble(OneTwoThreeRemit.GetPartnerAmount(Convert.ToDecimal(serviceFeeDbl - oneStopFeeDbl + agentFeeDbl), Convert.ToDecimal(agentFee), Convert.ToDecimal(amount), 2));

                                if (isAgreement == "N")
                                {
                                    bool isOKAddFund = false;
                                    double avalBal = 0;
                                    double ledeBal = 0;
                                    int agentIDPlus = 0;
                                    string agentNamePlus = String.Empty;
                                    DataSet dsAgnt = new DataSet();
                                    if (!_agentWCF.getAgentNameByAgentCode(agentCode, out dsAgnt, out errmsg))
                                    {
                                        writeLog(logAppender + "Error in getAgentNameByAgentCode : " + errmsg);
                                    }
                                    if (dsAgnt.Tables[0].Rows.Count > 0)
                                    {
                                        writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                                        agentIDPlus = int.Parse(dsAgnt.Tables[0].Rows[0]["AGENTID"].ToString());
                                        agentNamePlus = dsAgnt.Tables[0].Rows[0]["AGENTNAME"].ToString();

                                        if (_agentWCF.addFund2OneStopPlus(agentIDPlus, agentAmount, out avalBal, out ledeBal, out errMsg))
                                        {
                                            isOKAddFund = true;
                                            writeLog(logAppender + "After addFund = AgentIDPlus : " + agentIDPlus.ToString() + " |Topuped Amount :" + agentAmount.ToString() + "| AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                        }
                                        else
                                        {
                                            writeLog(logAppender + "Error in add fund to @Post plus : " + errMsg);
                                        }

                                        if (isOKAddFund)
                                        {
                                            string topupfee = "0";
                                            if (!_agentWCF.insertAgentTopupBy1Stop(agentAmount, agentIDPlus, agentUserUniqueID, "AP", "@Post+", txnID,
                                                    agentCode, mobileNo, topupfee, agentNamePlus, "@Post+", out errMsg))
                                            {
                                                writeLog(logAppender + "Error in insertAgentTopupBy1Stop : " + errMsg);
                                            }
                                            else
                                            {
                                                Task.Factory.StartNew(() => _fraudWCF.CheckReceiver(agentIDPlus, decimal.Parse(amt.ToString()), billerName, txnID.ToString()));

                                            }
                                        }
                                    }
                                }
                            }

                            if (!_agentWCF.InsertTransactionLog(txnID, "ConfirmRes", cashoutResponseJson, out errMsg))
                            {
                                writeLog(logAppender + "Error in InsertTransactionLog Res : " + errMsg);
                            }
                        }



                        if (rescode != "00")
                        {
                            ConfirmResponseModel confirmResponse = new ConfirmResponseModel();
                            confirmResponse.taxID = taxID;
                            confirmResponse.billername = billerName;
                            confirmResponse.billerlogo = billerLogo;
                            confirmResponse.rescode = "99";
                            confirmResponse.resdesc = "System Error";
                            confirmResponse.ref1 = ref1;
                            confirmResponse.ref2 = ref2;
                            confirmResponse.ref3 = ref3;
                            confirmResponse.ref4 = ref4;
                            confirmResponse.ref5 = ref5;
                            confirmResponse.ref1Name = ref1Name;
                            confirmResponse.ref2Name = ref2Name;
                            confirmResponse.ref3Name = ref3Name;
                            confirmResponse.ref4Name = ref4Name;
                            confirmResponse.ref5Name = ref5Name;
                            string confirmRes = Utils.getConfirmRes(confirmResponse);

                            if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                            {
                                writeLog(logAppender + "Error in updateError : " + errMsg);
                            }
                            return confirmRes;
                        }
                        else
                        {
                            writeLog(logAppender + "***************Enter Confirm Update *******************");



                            if (!_agentWCF.ConfirmUpdateCashOut(txnID,
                                     cashoutRequest.TxnRef + "-" + PaidBy, ref3, ref4, cashoutRequest.DigitalCode, mobileNo, "", "CO", "Cash Out Successfully", agentID, email,
                                     agentAmount, agentFeeDbl, isAgreement, smsStatus, out errMsg, out batchID, out avalbal, out ledgerbalance))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }
                            #region <-- Notification -->

                            DataSet dsUser = new DataSet();
                            DataSet dsBranch = new DataSet();

                            if (_agentWCF.GetRemittanceNotification(Convert.ToInt64(cashoutRequest.TxnRef), 1, out dsBranch, out errmsg))
                            {
                                if (dsBranch != null)
                                {
                                    int destinationBranchID = Convert.ToInt32(dsBranch.Tables[0].Rows[0]["BranchID"].ToString());

                                    if (Convert.ToInt32(dsBranch.Tables[0].Rows[0]["AGENTID"].ToString()) == agentID && dsBranch.Tables[0].Rows[0]["AGENTBRANCHCODE"].ToString() == branchCode) // destination branch and cash out branch is different
                                    {

                                        if (!_agentWCF.UpdateRemittanceNotification(Convert.ToInt64(cashoutRequest.TxnRef), destinationBranchID, 2, out errmsg))
                                        {
                                            writeLog(logAppender + "Error in UpdateRemittanceNotification" + errmsg);
                                        }

                                    }
                                    else
                                    {
                                        DataSet dsUserCashOut = new DataSet();

                                        _agentWCF.GetBranchByUserID(email, out dsUserCashOut, out errmsg);
                                        int CashOutbranchID = Convert.ToInt32(dsUserCashOut.Tables[0].Rows[0]["AGENTBRANCHID"].ToString());
                                        _agentWCF.GetPartnerUserListByBranchCode(destinationBranchID, out dsUser, out errmsg);
                                        pushNotiWCF.ServiceClient _notiservice = new pushNotiWCF.ServiceClient();
                                        DataTable dtUser = dsUser.Tables[0];
                                        string devicetoken = string.Empty;
                                        string message = string.Empty;
                                        string BranchName = dtUser.Rows[0]["AGENTBRANCHNAME"].ToString();
                                        for (int i = 0; i < dtUser.Rows.Count; i++)
                                        {
                                            if (dtUser.Rows[i]["LOGINDEVICE"].ToString() == "M")
                                            {
                                                devicetoken = dtUser.Rows[i]["DEVICETOKEN"].ToString();
                                                message = Get123RemitNotificationMessage(Convert.ToDecimal(amount), BranchName, cashoutRequest.TxnRef, "Cancel");
                                                _notiservice.PushToAndroid(devicetoken, message, "", "", out errmsg);
                                            }
                                        }
                                        //to cancel 
                                        if (!_agentWCF.UpdateRemittanceNotification(Convert.ToInt64(cashoutRequest.TxnRef), destinationBranchID, 3, out errmsg))
                                        {
                                            writeLog(logAppender + "Error in UpdateRemittanceNotification for cancellation " + errmsg + branchCode);
                                        }
                                        // to update cash out status
                                        if (!_agentWCF.InsertRemittanceNotification(Convert.ToInt64(cashoutRequest.TxnRef), Convert.ToDecimal(amount), CashOutbranchID, 2, out errmsg))
                                        {
                                            writeLog(logAppender + "Error in InsertRemittanceNotification" + errmsg);
                                        }

                                    }
                                }
                            }
                            #endregion

                            if (appType == "CS" || appType == "MS")
                            {
                                SMSHelper smsH = new SMSHelper();

                                MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();
                                decimal TotalAmountFor123Remit = Convert.ToDecimal(amount) - Convert.ToDecimal(ServiceFeeFor123Remit);
                                smsMsg = smsH.getMessageBiller(agentName, taxID, billerName, "Payee Name", "", "", "Ref", ref3, "", "", txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), ServiceFeeFor123Remit, TotalAmountFor123Remit.ToString("#,##0.00"), branchCode);

                                try
                                {
                                    writeLog(logAppender + "sendSMSWithTxnID starts.");
                                    // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                    writeLog(logAppender + "Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                    smsWcf.SendSms(txnID.ToString(), smsMsg, mobileNo, sendername);

                                    writeLog(logAppender + "sendSMSWithTxnID ends.");
                                }
                                catch (Exception ex)
                                {
                                }
                            }
                            Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));

                            ConfirmResponseModel confirmResponse = new ConfirmResponseModel();
                            confirmResponse.taxID = taxID;
                            confirmResponse.rescode = "00";
                            confirmResponse.resdesc = "Success";
                            confirmResponse.billername = billerName;
                            confirmResponse.billerlogo = billerLogo;
                            confirmResponse.ref1 = string.Empty;
                            confirmResponse.ref2 = ref3;
                            confirmResponse.ref3 = ref4;
                            confirmResponse.ref4 = cashoutRequest.DigitalCode;
                            confirmResponse.ref5 = mobileNo;
                            confirmResponse.ref1Name = string.Empty;
                            confirmResponse.ref2Name = "Payee Name";
                            confirmResponse.ref3Name = "Payee NRC";
                            confirmResponse.ref4Name = "Remittance Code";
                            confirmResponse.ref5Name = "Mobile No";
                            confirmResponse.batchID = string.Empty;
                            confirmResponse.availablebalance = availablebalance.ToString();
                            confirmResponse.txnID = txnID.ToString();
                            confirmResponse.TodayTxnCount = TodayTxnCount;
                            confirmResponse.TodayTxnAmount = TodayTxnAmount;
                            confirmResponse.smsMsg = smsMsg;
                            string confirmRes = Utils.getConfirmRes(confirmResponse);
                            return confirmRes;

                        }
                    }

                    #endregion

                    #region <-- Zala by Tz 12-Dec-2016 -->
                    else if (MapTaxID == "0000000000050") /////For Zala
                    {
                        writeLog(logAppender + "This is Zala.");
                        int batchid = 0;
                        //double availablebalance = 0;
                        //double ledgerbalance = 0;
                        StringBuilder sb = new StringBuilder();
                        // string hashstr = Utils.hashstrConfirm(version, ts, "", inquirytype, ref1, ref2, amount, locLongitude, locLatitude); 
                        double avalbal = 0;
                        double legbal = 0;

                        if (!_agentWCF.InsertTransactionLog(txnID, "ConfirmReq", reqXml, out errMsg))
                        {
                            writeLog(logAppender + "Error in InsertTransactionLog Req : " + errMsg);
                        }

                        Hashtable htt = Utils.getHTableFromXML(reqXml);
                        //writeLog(logAppender+"OneStop+ Confirm Res : " + reqXml);
                        if (!IsValidateConfirmReqOneStop(htt, out rescode, out resdecs, out version, out messageid, out ref1, out ref3))
                        {
                            //return GeterrorResponse(rescode, resdecs, txnID, resdecs);
                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }
                        else
                        {
                            bool isOKAddFund = false;
                            // ref4 = txnID.ToString();
                            mobileNo = ref3;
                            DataSet dsAgnt;
                            if (!_agentWCF.getAgentNameByAgentCode(ref1, out dsAgnt, out errmsg))//Ref1 is agentCode
                            {
                                writeLog(logAppender + "Error in getAgentNameByAgentCode : " + errmsg);
                            }
                            if (dsAgnt.Tables[0].Rows.Count > 0)
                            {
                                if (dsAgnt.Tables[0].Rows[0]["AGREEMENTTYPE"].ToString() != "Y")
                                {


                                    if (dsAgnt.Tables[1].Rows.Count > 0)
                                    {
                                        DeviceToken = (dsAgnt.Tables[1].Rows[0]["DEVICETOKEN"] == DBNull.Value ? string.Empty : dsAgnt.Tables[1].Rows[0]["DEVICETOKEN"].ToString());
                                        DeviceInfo = (dsAgnt.Tables[1].Rows[0]["DEVICEINFO"] == DBNull.Value ? string.Empty : dsAgnt.Tables[1].Rows[0]["DEVICEINFO"].ToString());

                                        writeLog(logAppender + "Device Token:" + DeviceToken + "Device Info" + DeviceInfo);
                                    }
                                    writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                    int agentIDPlus = 0;
                                    string agentNamePlus = "";
                                    agentIDPlus = int.Parse(dsAgnt.Tables[0].Rows[0]["AGENTID"].ToString());
                                    agentNamePlus = dsAgnt.Tables[0].Rows[0]["AGENTNAME"].ToString();
                                    if (agentIDPlus > 0)
                                    {
                                        double avalBal = 0;
                                        double ledeBal = 0;
                                        double amountToTopup = 0;
                                        //  amountToTopup = (agentAmount - oneStopFeeDbl);
                                        if (_agentWCF.addFund2OneStopPlus(agentIDPlus, amt, out avalBal, out ledeBal, out errMsg))
                                        {
                                            isOKAddFund = true;
                                            writeLog(logAppender + "After addFund = AgentIDPlus : " + agentIDPlus.ToString() + " |Topuped Amount :" + amt.ToString() + "| AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                        }
                                        else
                                        {
                                            writeLog(logAppender + "Error in addFundtoagent Zala : " + errMsg);
                                        }
                                    }
                                    else
                                    {
                                        writeLog(logAppender + "No AgentID for Zala : " + agentIDPlus.ToString());
                                    }

                                    if (isOKAddFund)
                                    {
                                        writeLog(logAppender + "Fund Added OK to AgentID : " + agentIDPlus);

                                        if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                 agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                                        {
                                            writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                        }
                                        else
                                        {
                                            writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                                            //added by nila
                                            if (!_agentWCF.insertAgentTopupBy1Stop(amt, agentIDPlus, agentUserUniqueID, "AP", ConfigurationManager.AppSettings["ZalaChannelTopup"].ToString(), txnID,
                                                agentCode, mobileNo, serviceFee, agentName, ConfigurationManager.AppSettings["ZalaChannelTopup"].ToString(), out errMsg))
                                            {
                                                writeLog(logAppender + "Error in insertAgentTopupBy1Stop : " + errMsg);
                                            }

                                        }

                                        if (appType == "CS" || appType == "MS")
                                        {
                                            SMSHelper smsH = new SMSHelper();

                                            MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();
                                            smsMsg = smsH.getMessageBiller1Stop(agentName, MapTaxID, billerName, ref1Name, ref2Name, "", "Ref", ref1, ref2, "", txnID.ToString(),
                                                double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);


                                            try
                                            {
                                                writeLog(logAppender + "sendSMSWithTxnID starts." + " smsMsg :" + smsMsg);
                                                //smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                                writeLog(logAppender + "Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);

                                                //smsWcf.SendSms(txnID.ToString(), smsMsg, mobileNo, sendername);
                                                pushNotiWCF.ServiceClient pushnoti = new pushNotiWCF.ServiceClient();
                                                if (!string.IsNullOrEmpty(DeviceInfo))
                                                {
                                                    writeLog(logAppender + "Device Info is not Empty:" + DeviceInfo);
                                                    if (DeviceInfo.StartsWith("iOS"))
                                                    {
                                                        writeLog(logAppender + "Push To IOS:" + DeviceInfo);
                                                        pushnoti.PushToApple(DeviceToken, smsMsg, 0, out errmsg);
                                                    }
                                                    else
                                                    {
                                                        writeLog(logAppender + "Push To andriod:" + DeviceInfo);
                                                        pushnoti.PushToAndroid(DeviceToken, smsMsg, "", "", out errmsg);
                                                    }
                                                }

                                                writeLog(logAppender + "sendSMSWithTxnID ends.");
                                            }
                                            catch (Exception ex)
                                            {
                                                writeLog(logAppender + "Exception error occue at 1stop+ notification" + ex.Message);
                                            }
                                        }
                                        Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));
                                        Task.Factory.StartNew(() => _fraudWCF.CheckReceiver(agentIDPlus, decimal.Parse(amt.ToString()), billerName, txnID.ToString()));

                                        ConfirmResponseModel conRes = new ConfirmResponseModel();

                                        conRes.email = email;
                                        conRes.password = password;
                                        conRes.messageid = messageid;
                                        conRes.billerlogo = billerLogo;
                                        conRes.billername = billerName;
                                        conRes.taxID = taxID;
                                        conRes.rescode = "00";
                                        conRes.resdesc = "Success";
                                        conRes.ref1 = ref1;
                                        conRes.ref2 = ref2;
                                        conRes.ref3 = ref3;
                                        conRes.ref4 = txnID.ToString();
                                        conRes.ref5 = mobileNo;
                                        conRes.ref1Name = ref1Name;
                                        conRes.ref2Name = ref2Name;
                                        conRes.ref3Name = ref3Name;
                                        conRes.ref4Name = string.Empty;
                                        conRes.ref5Name = ref5Name;
                                        conRes.batchID = batchid.ToString();
                                        conRes.availablebalance = availablebalance.ToString();
                                        conRes.txnID = txnID.ToString();
                                        conRes.TodayTxnCount = TodayTxnCount;
                                        conRes.TodayTxnAmount = TodayTxnAmount;
                                        conRes.smsMsg = smsMsg;
                                        return Utils.getConfirmRes(conRes);
                                    }
                                    else
                                    {
                                        writeLog(logAppender + "Fund Added NOT OK to AgentID : " + agentIDPlus);
                                        rescode = "10";
                                        resdecs = "Adding Fund Failed";
                                        return Utils.getErrorRes(rescode, resdecs);
                                    }

                                }
                                else
                                {
                                    return Utils.getErrorRes("01", "Agent NOT Applicable");
                                }
                                // }
                            }
                            else
                            {
                                rescode = "01";
                                resdecs = errMsg;
                                return Utils.getErrorRes(rescode, "Ref Not Found");
                            }
                        }
                        // }
                    }
                    #endregion

                    #region <-- Viber Out -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["ViberOutTaxId"].ToString())
                    {
                        Utils.WriteLog_Biller("ViberOut Confirm Start : messageId : " + messageid);
                        var confirmres = new ConfirmResponseModel
                        {
                            taxID = taxID,
                            email = email,
                            password = password,
                            messageid = messageid,
                            billername = billerName,
                            billerlogo = billerLogo,
                            ref1 = ref1,
                            ref2 = ref2,
                            ref3 = "Airtime",
                            ref4 = ref4,
                            ref5 = ref3,
                            ref1Name = ref1Name,
                            ref2Name = ref2Name,
                            ref3Name = ref3Name,
                            ref4Name = ref4Name,
                            ref5Name = ref5Name,
                            availablebalance = availablebalance.ToString(),
                            txnID = txnID.ToString(),
                            TodayTxnAmount = TodayTxnAmount,
                            TodayTxnCount = TodayTxnCount,
                            smsMsg = smsMsg
                        };

                        var responseInfo = new ResponseInfo
                        {
                            agentID = agentID,
                            txnID = txnID,
                            agentAmount = agentAmount,
                            isAgreement = isAgreement,
                            agentFeeDbl = agentFeeDbl,
                            smsStatus = smsStatus,
                            availablebalance = availablebalance,
                            appType = appType,
                            topupType = topupType,
                            agentName = agentName,
                            MapTaxID = MapTaxID,
                            serviceFee = serviceFee,
                            totalAmount = totalAmount,
                            branchCode = branchCode,
                            sendername = sendername
                        };
                        Utils.WriteLog_Biller(messageid + " ViberOut Confirm Response Initiated");
                        return (new ViberOutManager()).ConfrimToEBA(confirmres, amount, responseInfo);

                    }
                    #endregion

                    #region <-- 663 CashIn/Load Tz 25-sep-2017 -->
                    if (MapTaxID == "0000000000008")
                    {
                        writeLog(logAppender + "This is 663 Load");
                        string agnid = string.Empty;
                        string BranchId = string.Empty;
                        mobileNo = ref3;
                        writeLog(logAppender + mobileNo);

                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            #region <-- If Simulator is on -->
                            writeLog(logAppender + "Simulator Y");

                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {

                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }
                            if (appType == "CS" || appType == "MS")
                            {
                                SMSHelper smsH = new SMSHelper();

                                MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();
                                decimal Total663Amount = Convert.ToDecimal(serviceFee) + Convert.ToDecimal(amount);
                                smsMsg = smsH.getMessageBiller(agentName, taxID, billerName, ref1Name, "", "", "Ref", ref1, "", "", txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee, Total663Amount.ToString("#,##0.00"), branchCode);

                                try
                                {
                                    writeLog(logAppender + "sendSMSWithTxnID starts.");
                                    // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                    writeLog(logAppender + "Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                    smsWcf.SendSms(txnID.ToString(), smsMsg, mobileNo, sendername);

                                    writeLog(logAppender + "sendSMSWithTxnID ends.");
                                }
                                catch (Exception ex)
                                {

                                }
                            }


                            Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));

                            ConfirmResponseModel confirmResponse = new ConfirmResponseModel();
                            confirmResponse.rescode = "00";
                            confirmResponse.resdesc = "Success";
                            confirmResponse.email = email;
                            confirmResponse.password = password;
                            confirmResponse.messageid = messageid;
                            confirmResponse.taxID = taxID;
                            confirmResponse.billername = billerName;
                            confirmResponse.billerlogo = billerLogo;
                            confirmResponse.ref1 = ref1;
                            confirmResponse.ref2 = ref2;
                            confirmResponse.ref3 = ref3;
                            confirmResponse.ref4 = ref4;
                            confirmResponse.ref5 = ref5;
                            confirmResponse.ref1Name = ref1Name;
                            confirmResponse.ref2Name = "";
                            //confirmResponse.Ref3Name = "Payee Mobile";
                            confirmResponse.ref3Name = "";
                            confirmResponse.ref4Name = "";
                            confirmResponse.ref5Name = "Mobile No";
                            confirmResponse.batchID = string.Empty;
                            confirmResponse.availablebalance = availablebalance.ToString();
                            confirmResponse.txnID = txnID.ToString();
                            confirmResponse.TodayTxnCount = TodayTxnCount;
                            confirmResponse.TodayTxnAmount = TodayTxnAmount;
                            confirmResponse.smsMsg = smsMsg;
                            string confirmRes = Utils.getConfirmRes(confirmResponse);
                            writeLog(logAppender + "RES XML : " + confirmRes);
                            return confirmRes;



                            #endregion
                        }
                        else
                        {
                            //                    <add key="3DESFinalKey" value="D90ECC8BD39EBBDEABB0D964F5371BF9C0F24261E7C89225"/>
                            //<add key="663Password" value="97959871351234"/>
                            //<add key="signatureString" value="qdlnRQdA8B35tZWGg6aQ605kzBoY="/>
                            //<add key="Os" value="ANDROID"/>
                            //<add key="AppVersion" value="1.0.0.0"/>
                            Request663 request663 = new Request663();
                            Response663 response663 = new Response663();
                            request663.transactionType = ConfigurationManager.AppSettings["663CashInPrefix"].ToString();
                            request663.receiverMobileNo = ref1;
                            request663.txnAmount = amount;
                            request663.txnID = ConfigurationManager.AppSettings["ChannelCode"].ToString() + txnID;
                            response663 = confirmRequestTo663(request663);
                            if (response663.Result)
                            {
                                #region <-- Confirm Update for Success Transaction -->
                                if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                                {
                                    writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                    resdecs = "Error in update database";
                                    rescode = "06";
                                    if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                    {
                                        writeLog(logAppender + "Error in updateError : " + errMsg);
                                    }
                                    return Utils.getErrorRes(rescode, "Transaction fail");
                                }
                                else
                                {
                                    writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                                }
                                if (appType == "CS" || appType == "MS")
                                {
                                    SMSHelper smsH = new SMSHelper();

                                    MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();
                                    decimal Total663Amount = Convert.ToDecimal(serviceFee) + Convert.ToDecimal(amount);
                                    smsMsg = smsH.getMessageBiller(agentName, taxID, billerName, ref1Name, "", "", "Ref", ref1, "", "", txnID.ToString(),
                                        double.Parse(amount).ToString("#,##0.00"), serviceFee, Total663Amount.ToString("#,##0.00"), branchCode);

                                    try
                                    {
                                        writeLog(logAppender + "sendSMSWithTxnID starts.");
                                        // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                        writeLog(logAppender + "Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.SendSms(txnID.ToString(), smsMsg, mobileNo, sendername);
                                        writeLog(logAppender + "sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                        writeLog(logAppender + "Exception occur when sending sms" + ex.ToString());
                                    }
                                }
                                Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));
                                ConfirmResponseModel confirmResponse = new ConfirmResponseModel();
                                confirmResponse.rescode = "00";
                                confirmResponse.resdesc = "Success";
                                confirmResponse.email = email;
                                confirmResponse.password = password;
                                confirmResponse.messageid = messageid;
                                confirmResponse.taxID = taxID;
                                confirmResponse.billername = billerName;
                                confirmResponse.billerlogo = billerLogo;
                                confirmResponse.ref1 = ref1;
                                confirmResponse.ref2 = ref2;
                                confirmResponse.ref3 = ref3;
                                confirmResponse.ref4 = ref4;
                                confirmResponse.ref5 = ref5;
                                confirmResponse.ref1Name = ref1Name;
                                confirmResponse.ref2Name = "";
                                //confirmResponse.Ref3Name = "Payee Mobile";
                                confirmResponse.ref3Name = "";
                                confirmResponse.ref4Name = "";
                                confirmResponse.ref5Name = "Mobile No";
                                confirmResponse.batchID = string.Empty;
                                confirmResponse.availablebalance = availablebalance.ToString();
                                confirmResponse.txnID = txnID.ToString();
                                confirmResponse.TodayTxnCount = TodayTxnCount;
                                confirmResponse.TodayTxnAmount = TodayTxnAmount;
                                confirmResponse.smsMsg = smsMsg;
                                string confirmRes = Utils.getConfirmRes(confirmResponse);
                                writeLog(logAppender + "RES XML : " + confirmRes);
                                return confirmRes;
                                #endregion
                            }
                            else
                            {
                                rescode = "06";
                                resdecs = "Transaction is not successful";
                                return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, response663.ResponseDescription, agentID, agentAmount, isAgreement);
                            }



                        }
                    }
                    #endregion

                    #region <-- 663 Remit/Send -->
                    //    RemitReq
                    //<ref1>toMobileNo</ref1>
                    //<ref2>toData(toName:toNrc)</ref2>
                    //<ref3>fromMobileNo</ref3>
                    //<ref4></ref4>
                    //<ref5>fromData(fromName:fromNrc)</ref5>

                    //RemitRes
                    //<ref1>09xxxxxxxxx</ref1>
                    //<ref2>Lu Lu:10/ABC(N)000000</ref2>
                    //<ref3>09xxxxxxxxx</ref3>
                    //<ref4></ref4>
                    //<ref5>Thet Zaw:11/CBA(N)111111</ref5>
                    //<ref1Name>To Mobile No.</ref1Name>
                    //<ref2Name>Name/NRC (To)</ref2name>
                    //<ref3Name>From Mobile No.</ref3Name>
                    //<ref4Name></ref4Name>
                    //<ref5Name>Name/NRC (From)</ref5Name>
                    if (MapTaxID == "0000000000007")
                    {
                        int batchid = 0;
                        //double availablebalance = 0;
                        //double ledgerbalance = 0;
                        string agnid = string.Empty;
                        string BranchId = string.Empty;
                        mobileNo = ref3;
                        writeLog(logAppender + mobileNo);
                        double avalbal = 0;
                        double legbal = 0;

                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            writeLog(logAppender + "$$$$$$$$$ This is simulator $$$$$$$$$$$$$$$$$");
                            #region <-- Confirm Update for Success Transaction -->
                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref5, ref4, mobileNo, "", "PA", "Paid Successfully",
                                agentID, email, agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }
                            if (appType == "CS" || appType == "MS")
                            {
                                SMSHelper smsH = new SMSHelper();

                                MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();
                                decimal Total663Amount = Convert.ToDecimal(serviceFee) + Convert.ToDecimal(amount);
                                smsMsg = smsH.getMessageBiller(agentName, taxID, billerName, ref1Name, ref2Name, "", "Ref", ref1, ref2, "", txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee, Total663Amount.ToString("#,##0.00"), branchCode);

                                try
                                {
                                    writeLog(logAppender + "sendSMSWithTxnID starts.");
                                    // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                    writeLog(logAppender + "Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                    smsWcf.SendSms(txnID.ToString(), smsMsg, mobileNo, sendername);
                                    writeLog(logAppender + "sendSMSWithTxnID ends.");
                                }
                                catch (Exception ex)
                                {
                                    writeLog(logAppender + "Exception occur when sending sms" + ex.ToString());
                                }
                            }
                            Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));
                            ConfirmResponseModel confirmResponse = new ConfirmResponseModel();
                            confirmResponse.rescode = "00";
                            confirmResponse.resdesc = "Success";
                            confirmResponse.email = email;
                            confirmResponse.password = password;
                            confirmResponse.messageid = messageid;
                            confirmResponse.taxID = taxID;
                            confirmResponse.billername = billerName;
                            confirmResponse.billerlogo = billerLogo;
                            confirmResponse.ref1 = ref1;
                            confirmResponse.ref2 = ref2;
                            confirmResponse.ref3 = ref5;
                            confirmResponse.ref4 = ref4;
                            confirmResponse.ref5 = ref3;
                            confirmResponse.ref1Name = ref1Name;
                            confirmResponse.ref2Name = ref2Name;
                            //confirmResponse.Ref3Name = "Payee Mobile";
                            confirmResponse.ref3Name = ref3Name;
                            confirmResponse.ref4Name = "";
                            confirmResponse.ref5Name = ref5Name;
                            confirmResponse.batchID = string.Empty;
                            confirmResponse.availablebalance = availablebalance.ToString();
                            confirmResponse.txnID = txnID.ToString();
                            confirmResponse.TodayTxnCount = TodayTxnCount;
                            confirmResponse.TodayTxnAmount = TodayTxnAmount;
                            confirmResponse.smsMsg = smsMsg;
                            string confirmRes = Utils.getConfirmRes(confirmResponse);
                            writeLog(logAppender + "RES XML : " + confirmRes);
                            return confirmRes;
                            #endregion
                        }
                        else
                        {
                            Request663 request663 = new Request663();
                            Response663 response663 = new Response663();
                            request663.transactionType = ConfigurationManager.AppSettings["663RemitPrefix"].ToString();
                            request663.receiverMobileNo = ref1;
                            request663.txnAmount = amount;
                            request663.txnID = ConfigurationManager.AppSettings["ChannelCode"].ToString() + txnID;
                            response663 = confirmRequestTo663(request663);
                            if (response663.Result)
                            {
                                #region <-- Confirm Update for Success Transaction -->
                                if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref5, ref4, mobileNo, "", "PA", "Paid Successfully", agentID,
                                    email, agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                                {
                                    writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                    resdecs = "Error in update database";
                                    rescode = "06";
                                    if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                    {
                                        writeLog(logAppender + "Error in updateError : " + errMsg);
                                    }
                                    return Utils.getErrorRes(rescode, "Transaction fail");
                                }
                                else
                                {
                                    writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                                }
                                if (appType == "CS" || appType == "MS")
                                {
                                    SMSHelper smsH = new SMSHelper();

                                    MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();
                                    decimal Total663Amount = Convert.ToDecimal(serviceFee) + Convert.ToDecimal(amount);
                                    smsMsg = smsH.getMessageBiller(agentName, taxID, billerName, ref1Name, ref2Name, "", "Ref", ref1, ref2, "", txnID.ToString(),
                                        double.Parse(amount).ToString("#,##0.00"), serviceFee, Total663Amount.ToString("#,##0.00"), branchCode);

                                    try
                                    {
                                        writeLog(logAppender + "sendSMSWithTxnID starts.");
                                        // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                        writeLog(logAppender + "Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.SendSms(txnID.ToString(), smsMsg, mobileNo, sendername);
                                        writeLog(logAppender + "sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                        writeLog(logAppender + "Exception occur when sending sms" + ex.ToString());
                                    }
                                }
                                Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));
                                ConfirmResponseModel confirmResponse = new ConfirmResponseModel();
                                confirmResponse.rescode = "00";
                                confirmResponse.resdesc = "Success";
                                confirmResponse.email = email;
                                confirmResponse.password = password;
                                confirmResponse.messageid = messageid;
                                confirmResponse.taxID = taxID;
                                confirmResponse.billername = billerName;
                                confirmResponse.billerlogo = billerLogo;
                                confirmResponse.ref1 = ref1;
                                confirmResponse.ref2 = ref2;
                                confirmResponse.ref3 = ref5;
                                confirmResponse.ref4 = ref4;
                                confirmResponse.ref5 = ref3;
                                confirmResponse.ref1Name = ref1Name;
                                confirmResponse.ref2Name = ref2Name;
                                //confirmResponse.Ref3Name = "Payee Mobile";
                                confirmResponse.ref3Name = ref3Name;
                                confirmResponse.ref4Name = "";
                                confirmResponse.ref5Name = ref5Name;
                                confirmResponse.batchID = string.Empty;
                                confirmResponse.availablebalance = availablebalance.ToString();
                                confirmResponse.txnID = txnID.ToString();
                                confirmResponse.TodayTxnCount = TodayTxnCount;
                                confirmResponse.TodayTxnAmount = TodayTxnAmount;
                                confirmResponse.smsMsg = smsMsg;
                                string confirmRes = Utils.getConfirmRes(confirmResponse);
                                writeLog(logAppender + "RES XML : " + confirmRes);
                                return confirmRes;
                                #endregion
                            }
                            else
                            {
                                rescode = "06";
                                resdecs = "Transaction is not successful";
                                return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, response663.ResponseDescription, agentID, agentAmount, isAgreement);
                            }

                        }
                    }
                    #endregion

                    #region <-- 663 CashOut -->
                    if (MapTaxID == "0000000000009")
                    {

                        writeLog(logAppender + "This is 663  CashOut");
                        int batchid = 0;
                        //double availablebalance = 0;
                        //double ledgerbalance = 0;
                        string agnid = string.Empty;
                        mobileNo = ref3;
                        writeLog(logAppender + mobileNo);

                        DataSet dsAgent = null;
                        string agentBranchCode = string.Empty;
                        string agentDivision = string.Empty;
                        string agentTownship = string.Empty;
                        double avalbal = 0;
                        double legbal = 0;



                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {

                            #region <-- If Simulator is on -->
                            writeLog(logAppender + "Simulator Y");

                            status = "PA";
                            ConfirmResponseModel responseCashIn = new ConfirmResponseModel();
                            responseCashIn.version = "1.0";
                            responseCashIn.timestamp = System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                            responseCashIn.billername = agentName;
                            responseCashIn.billerlogo = billerLogo;
                            string responseXML = Utils.getConfirmRes(responseCashIn);
                            writeLog(logAppender + "RES XML : " + responseXML);

                            rescode = "00";

                            #endregion
                        }
                        else
                        {

                            Request663 request663 = new Request663();
                            Response663 response663 = new Response663();
                            request663.transactionType = ConfigurationManager.AppSettings["663CashOutPrefix"].ToString();
                            request663.receiverMobileNo = ref5;
                            request663.oTp = ref1;
                            request663.txnAmount = amount;
                            request663.txnID = ConfigurationManager.AppSettings["ChannelCode"].ToString() + txnID;
                            response663 = confirmRequestTo663(request663);

                            if (!response663.Result)
                            {
                                rescode = "06";
                                resdecs = "Transaction is not successful";
                                if (!_agentWCF.updateError(txnID, "ER", response663.ResponseDescription, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, resdecs);

                            }
                            else
                            {


                                status = "AP";

                                rescode = "00";


                                if (isAgreement == "N")
                                {
                                    bool isOKAddFund = false;
                                    double avalBal = 0;
                                    double ledeBal = 0;
                                    int agentIDPlus = 0;
                                    string agentNamePlus = String.Empty;
                                    DataSet dsAgnt = new DataSet();
                                    if (!_agentWCF.getAgentNameByAgentCode(agentCode, out dsAgnt, out errmsg))
                                    {
                                        writeLog(logAppender + "Error in getAgentNameByAgentCode : " + errmsg);
                                    }
                                    if (dsAgnt.Tables[0].Rows.Count > 0)
                                    {
                                        writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                                        agentIDPlus = int.Parse(dsAgnt.Tables[0].Rows[0]["AGENTID"].ToString());
                                        agentNamePlus = dsAgnt.Tables[0].Rows[0]["AGENTNAME"].ToString();

                                        if (_agentWCF.addFund2OneStopPlus(agentIDPlus, agentAmount, out avalBal, out ledeBal, out errMsg))
                                        {
                                            isOKAddFund = true;
                                            writeLog(logAppender + "After addFund = AgentIDPlus : " + agentIDPlus.ToString() + " |Topuped Amount :" + agentAmount.ToString() + "| AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                        }
                                        else
                                        {
                                            writeLog(logAppender + "Error in add fund to @Post plus : " + errMsg);
                                        }

                                        if (isOKAddFund)
                                        {
                                            string topupfee = "0";
                                            if (!_agentWCF.insertAgentTopupBy1Stop(agentAmount, agentIDPlus, agentUserUniqueID, "AP", "663CashOut", txnID,
                                                    agentCode, mobileNo, topupfee, agentNamePlus, "663CashOut", out errMsg))
                                            {
                                                writeLog(logAppender + "Error in insertAgentTopupBy1Stop : " + errMsg);
                                            }
                                            else
                                            {
                                                Task.Factory.StartNew(() => _fraudWCF.CheckReceiver(agentIDPlus, decimal.Parse(amt.ToString()), billerName, txnID.ToString()));

                                            }
                                        }
                                    }
                                }
                            }
                        }



                        if (rescode != "00")
                        {
                            ConfirmResponseModel confirmResponse = new ConfirmResponseModel();
                            confirmResponse.taxID = taxID;
                            confirmResponse.billername = billerName;
                            confirmResponse.billerlogo = billerLogo;
                            confirmResponse.rescode = "99";
                            confirmResponse.resdesc = "System Error";
                            confirmResponse.ref1 = ref1;
                            confirmResponse.ref2 = ref2;
                            confirmResponse.ref3 = ref3;
                            confirmResponse.ref4 = ref4;
                            confirmResponse.ref5 = ref5;
                            confirmResponse.ref1Name = ref1Name;
                            confirmResponse.ref2Name = ref2Name;
                            confirmResponse.ref3Name = ref3Name;
                            confirmResponse.ref4Name = ref4Name;
                            confirmResponse.ref5Name = ref5Name;
                            string confirmRes = Utils.getConfirmRes(confirmResponse);

                            if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                            {
                                writeLog(logAppender + "Error in updateError : " + errMsg);
                            }
                            return confirmRes;
                        }
                        else
                        {
                            writeLog(logAppender + "***************Enter Confirm Update *******************");



                            if (!_agentWCF.ConfirmUpdateCashOut(txnID, ref1, ref2, ref5, ref4, mobileNo, "", "CO", "Cash Out Successfully", agentID, email,
                                     agentAmount, agentFeeDbl, isAgreement, smsStatus, out errMsg, out batchID, out avalbal, out legbal))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            if (appType == "CS" || appType == "MS")
                            {
                                SMSHelper smsH = new SMSHelper();

                                MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();
                                smsMsg = smsH.getMessageBiller(agentName, taxID, billerName, ref1Name, ref3Name, "", "Ref", ref1, ref5, "", txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);
                                try
                                {
                                    writeLog(logAppender + "sendSMSWithTxnID starts.");
                                    writeLog(logAppender + "Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                    smsWcf.SendSms(txnID.ToString(), smsMsg, mobileNo, sendername);

                                    writeLog(logAppender + "sendSMSWithTxnID ends.");
                                }
                                catch (Exception ex)
                                {
                                }
                            }
                            Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));

                            ConfirmResponseModel confirmResponse = new ConfirmResponseModel();
                            confirmResponse.taxID = taxID;
                            confirmResponse.rescode = "00";
                            confirmResponse.resdesc = "Success";
                            confirmResponse.billername = billerName;
                            confirmResponse.billerlogo = billerLogo;
                            confirmResponse.ref1 = ref1;
                            confirmResponse.ref2 = ref2;
                            confirmResponse.ref3 = ref5;
                            confirmResponse.ref4 = ref4;
                            confirmResponse.ref5 = mobileNo;
                            confirmResponse.ref1Name = ref1Name;
                            confirmResponse.ref2Name = ref2Name;
                            confirmResponse.ref3Name = ref3Name;
                            confirmResponse.ref4Name = ref4Name;
                            confirmResponse.ref5Name = ref5Name;
                            confirmResponse.batchID = string.Empty;
                            confirmResponse.availablebalance = availablebalance.ToString();
                            confirmResponse.txnID = txnID.ToString();
                            confirmResponse.TodayTxnCount = TodayTxnCount;
                            confirmResponse.TodayTxnAmount = TodayTxnAmount;
                            confirmResponse.smsMsg = smsMsg;
                            string confirmRes = Utils.getConfirmRes(confirmResponse);
                            return confirmRes;

                        }


                    }
                    #endregion

                    #region <-- Canal-Plus Confirm -->
                    if (MapTaxID == ConfigurationManager.AppSettings["CanalPlusTaxId"].ToString())
                    {
                        string tempamt = string.Empty;
                        string tempname = string.Empty;
                        mobileNo = imgnrc; //Note : mobile request for the phone number of Ref6 but request parse get with imgnrc
                        double avalbal = 0;
                        double legbal = 0;

                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            #region <-- Response Back To Client -->
                            rescode = "00";
                            resdecs = "Success";
                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = rescode;
                            confirmres.resdesc = resdecs;
                            confirmres.ref1 = "ref1";
                            confirmres.ref2 = "ref2";
                            confirmres.ref3 = "ref3";
                            confirmres.ref4 = "ref4";
                            confirmres.ref5 = "mobileNo";
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.ref4Name = ref4Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = "smsMsg";

                            return Utils.getConfirmRes(confirmres);
                            #endregion
                        }
                        else
                        {
                            #region <-- Simulater Mode Off -->
                            string channelRef = txnID.ToString();
                            Utils.WriteLog_Biller("CanalPlus Confirm Start : messageId : " + messageid);
                            var confirmres = new ConfirmResponseModel
                            {
                                taxID = taxID,
                                email = email,
                                password = password,
                                messageid = messageid,
                                billername = billerName,
                                billerlogo = billerLogo,
                                ref1 = ref1,
                                ref2 = ref2,
                                ref3 = ref3,
                                ref4 = ref4,
                                ref5 = ref5,
                                ref6 = imgnrc,
                                ref1Name = ref1Name,
                                ref2Name = ref2Name,
                                ref3Name = ref3Name,
                                ref4Name = ref4Name,
                                ref5Name = ref5Name,
                                availablebalance = availablebalance.ToString(),
                                txnID = txnID.ToString(),
                                TodayTxnAmount = TodayTxnAmount,
                                TodayTxnCount = TodayTxnCount,
                                smsMsg = smsMsg
                            };

                            var responseInfo = new ResponseInfo
                            {
                                agentID = agentID,
                                txnID = txnID,
                                agentAmount = agentAmount,
                                isAgreement = isAgreement,
                                agentFeeDbl = agentFeeDbl,
                                smsStatus = smsStatus,
                                availablebalance = availablebalance,
                                appType = appType,
                                topupType = topupType,
                                agentName = agentName,
                                MapTaxID = MapTaxID,
                                serviceFee = serviceFee,
                                totalAmount = totalAmount,
                                branchCode = branchCode,
                                sendername = sendername
                            };
                            Utils.WriteLog_Biller(messageid + " CanalPlus Confirm Response Initiated");
                            return (new CanalPlusManager()).getConfirmRes(confirmres, amount, responseInfo, canalPlusConfirmType, sessionID, packageCode, durationCode);
                            #endregion
                        }
                    }
                    #endregion

                    #region <-- Solar-Home Confirm -->
                    if (MapTaxID == "0000000000053")
                    {
                        string solarhomeMobile = string.Empty;
                        string apiUrl = ConfigurationManager.AppSettings["SolarHomeAPI"].ToString() + "mobilemoney";
                        string apiKey = ConfigurationManager.AppSettings["SolarHomeAPIKey"].ToString();
                        var json_serializerpinres = new JavaScriptSerializer();
                        writeLog(logAppender + "$$$$$$$$$$$$ SolarHome confirmReq txnID : " + txnID + " $$$$$$$$$$$$");

                        writeLog(logAppender + "TxnID : " + txnID + " Device Type from Mobile ref3: " + ref3 + "ref5 : " + ref5);

                        if (ref3.StartsWith("09"))
                        {
                            solarhomeMobile = "95" + ref3.Substring(1);
                        }

                        else if (ref5.StartsWith("09"))
                        {
                            solarhomeMobile = "95" + ref5.Substring(1);
                        }
                        else
                        {
                            solarhomeMobile = ConfigurationManager.AppSettings["SolarHomeDefaultPhno"].ToString();
                        }
                        string jsonParam = "{\"trans_id\": \"" + txnID + "\",\"api_key\": \"" + apiKey + "\",\"account\":\"" + ref1 + "\",\"phone_number\": \"+" + solarhomeMobile + "\",\"currency\": \"MMK\",\"summ\":" + amount + "}";

                        writeLog(logAppender + "TxnID : " + txnID + " SolarHome confirmReq: " + jsonParam);

                        SSLPost post = new SSLPost();
                        string respData = "";
                        SolarHomeConfirmResponse solarHomeConfirmResp = new SolarHomeConfirmResponse();

                        if (post.postDateSolarHome(apiUrl, jsonParam, txnID, out respData))
                        {
                            writeLog(logAppender + "TxnID : " + txnID + " SolarHome confirmRes: " + respData);
                            solarHomeConfirmResp = json_serializerpinres.Deserialize<SolarHomeConfirmResponse>(respData);

                            if (!string.IsNullOrEmpty(solarHomeConfirmResp.Status))
                            {
                                string confirmResString = string.Empty;
                                SMSHelper smsH = new SMSHelper();
                                smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, ref1Name, ref2Name, "", "Ref", ref1, ref2, "",
                                     txnID.ToString(), double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);
                                rescode = "00";
                                resdecs = "Success";
                                solarHomeConfirmResp.Trans_ID = txnID.ToString();
                                solarHomeConfirmResp.ResCode = rescode;
                                solarHomeConfirmResp.ResDesc = resdecs;
                                solarHomeConfirmResp.Amount = amount;
                                solarHomeConfirmResp.TodayTxnCount = TodayTxnCount;
                                solarHomeConfirmResp.TodayTxnAmount = TodayTxnAmount;
                                solarHomeConfirmResp.ref1 = ref1;
                                solarHomeConfirmResp.ref2 = ref2;
                                solarHomeConfirmResp.ref3 = ref3;
                                solarHomeConfirmResp.ref4 = ref4;
                                solarHomeConfirmResp.ref5 = ref5;
                                solarHomeConfirmResp.ref1Name = ref1Name;
                                solarHomeConfirmResp.ref2Name = ref2Name;
                                solarHomeConfirmResp.ref3Name = ref3Name;
                                solarHomeConfirmResp.ref4Name = ref4Name;
                                solarHomeConfirmResp.ref5Name = ref5Name;
                                solarHomeConfirmResp.Message = smsMsg;
                                if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4, ref5
                                    , "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                                {
                                    writeLog(logAppender + "TxnID : " + txnID + " Error in ConfirmUpdate : " + errMsg);
                                }
                                else
                                {
                                    writeLog(logAppender + "TxnID : " + txnID + " After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                                    MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();
                                    try
                                    {
                                        if (!_agentWCF.updateSMSStatus(txnID, "Y", out errMsg))
                                        {
                                            writeLog(logAppender + "TxnID : " + txnID + " Exception was occure when send sms:" + errMsg);
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        writeLog(logAppender + "TxnID : " + txnID + " Solar Home SMS Error : " + ex.ToString());
                                    }

                                }
                                writeLog(logAppender + "TxnID : " + txnID + " After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                                confirmResString = Utils.getConfirmResSolarHome(solarHomeConfirmResp);

                                return confirmResString;
                            }
                            else
                            {
                                resdecs = "Failed to call Solar Home!";
                                return GetErrorResponseWithAddBalance("99", "Failed to call Solar Home!",
                                    txnID, resdecs, agentID, agentAmount, isAgreement);
                            }
                        }
                        else
                        {
                            resdecs = "Failed to call Solar Home!";
                            return GetErrorResponseWithAddBalance("99", "Failed to call Solar Home!",
                                txnID, resdecs, agentID, agentAmount, isAgreement);
                        }
                    }
                    #endregion

                    #region <-- Pahtama Group -->
                    if (MapTaxID == "0000000000056")
                    {
                        string apiUrl = ConfigurationManager.AppSettings["PhatamaGroupAPI"].ToString() + "ConfirmPendingInvoice";
                        string apiKey = ConfigurationManager.AppSettings["PhatamaGroupAPIKey"].ToString();

                        writeLog(logAppender + "$$$$$$$$$$$$ Phatama Group confirmReq: $$$$$$$$$$$$");

                        PgToken = GetPGOAuthToken();

                        var json_serializer1 = new JavaScriptSerializer();
                        var json_serializerpinres = new JavaScriptSerializer();

                        SSLPost post = new SSLPost();

                        PGConfirmPendingRequest pgConfirmPendingReq = new PGConfirmPendingRequest();
                        pgConfirmPendingReq.Token = PgToken.Token;
                        pgConfirmPendingReq.PartnerCode = ConfigurationManager.AppSettings["1StopPGPartnerCode"].ToString();
                        pgConfirmPendingReq.CustomerID = ref2;
                        pgConfirmPendingReq.Invoices = lstInvoices;
                        mobileNo = ref3;
                        foreach (PGReqConfirmInvoice invoice in pgConfirmPendingReq.Invoices)
                        {
                            invoice.PaymentReference = txnID.ToString();
                            invoice.PaymentMethod = "1-Stop";
                        }

                        string parameter = json_serializer1.Serialize(pgConfirmPendingReq);
                        writeLog(logAppender + "Phatama Group confirmReq: " + parameter);

                        PGConfirmPendingInvoiceResponse pgConfirmPendingInvoiceResp = new PGConfirmPendingInvoiceResponse();
                        string responseData = string.Empty;

                        if (post.postDataPG(apiUrl, parameter, pgConfirmPendingReq.Token, out responseData, out errMsg))
                        {
                            writeLog(logAppender + "Phatama Group confirmRes:" + responseData);

                            pgConfirmPendingInvoiceResp = json_serializerpinres.Deserialize<PGConfirmPendingInvoiceResponse>(responseData);

                            if (pgConfirmPendingInvoiceResp.ErrorCode.Equals("0"))
                            {
                                if (!string.IsNullOrEmpty(pgConfirmPendingInvoiceResp.CustomerID))
                                {
                                    string inqResString = string.Empty;


                                    if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4, ref5
                                        , "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                                    {
                                        writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                        return Utils.getErrorRes("06", errMsg);
                                    }
                                    else
                                    {
                                        foreach (PGResConfirmInvoice invoice in pgConfirmPendingInvoiceResp.Invoices)
                                        {
                                            if (!_agentWCF.insertInvoice(txnID, invoice.InvoiceNumber, double.Parse(invoice.Amount), ref2, "1-STOP", out errmsg))
                                            {
                                                writeLog(logAppender + "Error in InsertInvoice : " + errMsg);
                                                return Utils.getErrorRes("06", errMsg);
                                            }
                                        }
                                    }
                                    pgConfirmPendingInvoiceResp.smsMsg = string.Empty;
                                    pgConfirmPendingInvoiceResp.TxnID = txnID.ToString();
                                    return Utils.getConfirmPendingInvoiceRes(pgConfirmPendingInvoiceResp);
                                }
                            }
                            else
                            {
                                writeLog(logAppender + "Response Fail: " + errMsg);
                                return GetErrorResponseWithAddBalance(pgConfirmPendingInvoiceResp.ErrorCode, pgConfirmPendingInvoiceResp.FailReason, txnID, resdecs, agentID, agentAmount, isAgreement);
                            }
                        }
                        else
                        {
                            writeLog(logAppender + "Response Fail: " + errMsg);
                            return Utils.getErrorRes("06", errMsg);
                        }

                    }
                    #endregion

                    #region <-- TelenorBB -->

                    else if (MapTaxID == "0000000000058")
                    {
                        writeLog(logAppender + "This is TelenorBB");
                        mobileNo = ref3;
                        double avalbal = 0;
                        double legbal = 0;
                        string responseData = "";

                        string token = string.Empty;

                        if (IsTokenNullOrExpire(Token))
                        {
                            Token = GetOAuthToken();
                        }
                        string[] words = ref2.Split(' ');
                        string IMEI = words[0].ToString();
                        string Expiry = words[1].ToString();
                        string channelRef = txnID.ToString();
                        TelenorBBConfirmReq Req = new TelenorBBConfirmReq();
                        Req.Token = Token.Token;
                        Req.Channel = ConfigurationManager.AppSettings["TelenorBBChannelCode"].ToString();
                        Req.ChannelRefID = channelRef;
                        Req.CustomerID = ref5;
                        Req.Amount = ref4;
                        Req.IMEI = IMEI;

                        var json_serializer1 = new JavaScriptSerializer();
                        var json_serializerpinres = new JavaScriptSerializer();
                        string parameter = json_serializer1.Serialize(Req);
                        string url = ConfigurationManager.AppSettings["TelenorBBConfirmUrl"].ToString();

                        TelenorBBConfirmRes Res = new TelenorBBConfirmRes();
                        SSLPost post = new SSLPost();
                        writeLog(logAppender + "TelenorBB ConfirmReq: " + parameter);

                        if (post.postDataCanalPlus(url, parameter, out responseData, out errMsg))
                        {

                            writeLog(logAppender + "TelenorBB ConfimRes: " + responseData);
                            JavaScriptSerializer sescriberes = new JavaScriptSerializer();
                            Res = sescriberes.Deserialize<TelenorBBConfirmRes>(responseData);

                            if (Res.ResponseCode == "0")
                            {
                                if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref5, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                    agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                                {
                                    writeLog(logAppender + "Error in Confirm Change Package Update : " + errMsg);
                                }
                                else
                                {
                                    writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                                }

                                #region SMS
                                if (appType == "CS" || appType == "MS")
                                {
                                    if (string.IsNullOrEmpty(topupType) || topupType == "S")
                                    {
                                        SMSHelper smsH = new SMSHelper();
                                        MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();

                                        smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, ref1Name, "IME/Expiry", ref3Name, "Ref", ref1, ref2, ref5, txnID.ToString(),
                                             double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                        try
                                        {
                                            writeLog(logAppender + "sendSMSWithTxnID starts.");
                                            smsWcf.SendSms(txnID.ToString(), smsMsg, mobileNo, sendername);
                                            writeLog(logAppender + "sendSMSWithTxnID ends.");
                                        }
                                        catch (Exception ex)
                                        {
                                            writeLog(logAppender + "Exception was occure when send sms:" + ex.Message);
                                        }
                                    }
                                }
                                #endregion SMS

                                #region <-- Response Back To Client -->
                                rescode = "00";
                                resdecs = "Success";

                                ConfirmResponseModel confirmres = new ConfirmResponseModel();
                                confirmres.taxID = taxID;
                                confirmres.email = email;
                                confirmres.password = password;
                                confirmres.messageid = messageid;
                                confirmres.billername = billerName;
                                confirmres.billerlogo = billerLogo;
                                confirmres.rescode = rescode;
                                confirmres.resdesc = resdecs;
                                confirmres.ref1 = ref1; // Registered Mobile No
                                confirmres.ref2 = ref2; //IMEI/Expiry
                                confirmres.ref3 = ref5; // CustomerID
                                confirmres.ref4 = ref4; //Amount
                                confirmres.ref5 = mobileNo; //Mobile No
                                confirmres.ref1Name = ref1Name;
                                confirmres.ref2Name = ref2Name;
                                confirmres.ref3Name = ref3Name;
                                confirmres.ref4Name = "";
                                confirmres.ref5Name = ref5Name;

                                confirmres.availablebalance = availablebalance.ToString();
                                confirmres.txnID = txnID.ToString();
                                confirmres.TodayTxnAmount = TodayTxnAmount;
                                confirmres.TodayTxnCount = TodayTxnCount;
                                confirmres.smsMsg = smsMsg;

                                return Utils.getConfirmRes(confirmres);
                                #endregion
                            }
                            else
                            {
                                return GetErrorResponseWithAddBalance(Res.ResponseCode, Res.ResponseDescription, txnID, Res.ResponseDescription, agentID, agentAmount, isAgreement);
                            }


                        }
                        else
                        {
                            resdecs = errMsg;
                            rescode = "06";
                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }


                    }

                    #endregion

                    #region <-- AEON Confirm -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["AEONMapTaxId"].ToString())
                    {
                        writeLog(logAppender + "This is Aeon from EBA Confirm");

                        string ebaUrl = ConfigurationManager.AppSettings["AeonConfirmUrl"].ToString();

                        if (IsTokenNullOrExpire(Token))
                        {
                            Token = GetOAuthToken();
                        }
                        EbaConfirmReq confirmReq = new EbaConfirmReq()
                        {
                            Token = Token.Token,
                            PartnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString(),
                            PartnerRefNo = txnID.ToString(),
                            BillerCode = ConfigurationManager.AppSettings["AeonBillerCode"].ToString(),
                            TransactionAmount = amount,
                            Detail = "{'AgreementNo':'" + ref1 + "', 'MobileNumber':'" + ref3 + "', 'RepaymentAmount':'" + ref4 + "', 'PaidAmount':'" + amount + "', 'CustomerName':'" + ref2 + "'}"
                        };
                        EbaConfirmRes confirmRes = new EbaConfirmRes();

                        var json_serializer1 = new JavaScriptSerializer();
                        string jsonReq = json_serializer1.Serialize(confirmReq);
                        writeLog(logAppender + "EBA Aeon JasonReq:" + jsonReq);

                        SSLPost post = new SSLPost();
                        string jsonres = Utils.PaymentRequest(jsonReq, ebaUrl);
                        writeLog(logAppender + "EBA Aeon JasonRes:" + jsonres);

                        if (string.IsNullOrEmpty(jsonres))
                        {
                            resdecs = "No Response From EBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }

                        var json_serializerpinres = new JavaScriptSerializer();
                        confirmRes = json_serializerpinres.Deserialize<EbaConfirmRes>(jsonres);

                        if (confirmRes.ErrorCode == "00")
                        {
                            YadanarponTeleportDetail detailRes = JsonConvert.DeserializeObject<YadanarponTeleportDetail>(confirmRes.Detail);

                            #region <-- Update Transaction -->

                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4,
                                    ref5, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl,
                                    isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                            #endregion

                            #region <-- Send SMS -->

                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S") //topup type is null or S
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();

                                    smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, ref1Name, ref2Name, "", "Ref", ref1, ref2, "", txnID.ToString(), double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                    try
                                    {

                                        writeLog(logAppender + "Mobile No :" + phoneNumber + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.SendSms(txnID.ToString(), smsMsg, phoneNumber, sendername);
                                        writeLog(logAppender + "sendSMSWithTxnID ends.");
                                    }
                                    catch
                                    {
                                    }
                                }
                            }

                            #endregion

                            #region <-- Response Back To Client -->

                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = confirmRes.ErrorCode;
                            confirmres.resdesc = confirmRes.ErrorMessage;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = ref4;
                            confirmres.ref5 = ref5;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = string.Empty;
                            confirmres.ref4Name = string.Empty;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }
                        else
                        {
                            resdecs = Utils.EsbResponseDescription(confirmRes.ErrorCode);
                            return GetErrorResponseWithAddBalance(confirmRes.ErrorCode, confirmRes.ErrorMessage,
                                txnID, resdecs, agentID, agentAmount, isAgreement);
                        }
                    }
                    #endregion

                    #region <-- Mother Finance Confirm -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["MotherFinanceTaxId"].ToString())
                    {
                        writeLog(logAppender + "This is Mother Finance from EBA");
                        string ebaUrl = ConfigurationManager.AppSettings["MotherFinanceConfirmUrl"].ToString();

                        double avalbal = 0;
                        double legbal = 0;

                        if (IsTokenNullOrExpire(Token))
                        {
                            Token = GetOAuthToken();
                        }
                        string categoryId = ref2.Split('|')[0].ToString();
                        string scheduleId = ref2.Split('|')[1].ToString();
                        MotherFinanceConfirmReq confirmReq = new MotherFinanceConfirmReq()
                        {
                            Token = Token.Token,
                            PartnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString(),
                            PartnerRefNo = txnID.ToString(),
                            BillerCode = ConfigurationManager.AppSettings["MotherFinanceBillerCode"].ToString(),
                            TransactionAmount = amount,
                            Detail = "{'PaymentScheduleId':" + scheduleId + ",'LoanCategoryId':" + categoryId + ",'Id':'" + ref1 + "','Amount':'" + amount + "'}"
                        };
                        MotherFinanceConfirmRes confirmRes = new MotherFinanceConfirmRes();

                        var json_serializer1 = new JavaScriptSerializer();
                        string jsonReq = json_serializer1.Serialize(confirmReq);
                        writeLog(logAppender + "EBA Mother Finance JasonReq:" + jsonReq);

                        SSLPost post = new SSLPost();
                        string jsonres = Utils.PaymentRequest(jsonReq, ebaUrl);
                        writeLog(logAppender + "EBA Mother Finance JasonRes:" + jsonres);

                        if (string.IsNullOrEmpty(jsonres))
                        {
                            resdecs = "No Response From EBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }

                        var json_serializerpinres = new JavaScriptSerializer();
                        confirmRes = json_serializerpinres.Deserialize<MotherFinanceConfirmRes>(jsonres);

                        if (confirmRes.ErrorCode == "00")
                        {
                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref3, ref4, ref5,
                                    ref6, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl,
                                    isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                            #region <-- Send SMS -->

                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S") //topup type is null or S
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();
                                    int am = (int)double.Parse(amount);
                                    int totalAmt = (int)double.Parse(totalAmount);
                                    smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, ref2Name, ref3Name, ref4Name, ref1Name, ref3, ref4, ref5, txnID.ToString() + "|" + ref1, am.ToString() + ".00", serviceFee, totalAmt.ToString() + ".00", branchCode);

                                    try
                                    {

                                        writeLog(logAppender + "Mobile No :" + ref6 + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.SendSms(txnID.ToString(), smsMsg, ref6, sendername);
                                        writeLog(logAppender + "sendSMSWithTxnID ends.");
                                    }
                                    catch
                                    {
                                    }
                                }
                            }

                            #endregion

                            #region <-- Response Back To Client -->

                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = confirmRes.ErrorCode;
                            confirmres.resdesc = confirmRes.ErrorMessage;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref3;
                            confirmres.ref3 = ref4;
                            confirmres.ref4 = ref5;
                            confirmres.ref5 = ref6;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref4Name = ref4Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }
                        else
                        {
                            resdecs = Utils.EsbResponseDescription(confirmRes.ErrorCode);
                            return GetErrorResponseWithAddBalance(confirmRes.ErrorCode, confirmRes.ErrorMessage,
                                txnID, resdecs, agentID, agentAmount, isAgreement);
                        }
                    }
                    #endregion

                    #region Easy Microfinance
                    else if (MapTaxID == BISConstants.EasyMicroFinanceTaxId)
                    {

                        Utils.WriteLog_Biller(logAppender + "Easy Microfinance Confirm Starts");
                        ConfirmResponseModel confirmres = new ConfirmResponseModel();
                        confirmres.taxID = taxID;
                        confirmres.email = email;
                        confirmres.password = password;
                        confirmres.messageid = messageid;
                        confirmres.billername = billerName;
                        confirmres.billerlogo = billerLogo;
                        confirmres.ref1 = ref1;
                        confirmres.ref2 = ref2;
                        confirmres.ref3 = ref3;
                        confirmres.ref4 = ref4;
                        confirmres.ref5 = ref5;
                        confirmres.ref1Name = ref1Name;
                        confirmres.ref2Name = ref2Name;
                        confirmres.ref3Name = ref3Name;
                        confirmres.ref4Name = ref4Name;
                        confirmres.ref5Name = ref5Name;
                        confirmres.availablebalance = availablebalance.ToString();
                        confirmres.txnID = txnID.ToString();
                        confirmres.TodayTxnAmount = TodayTxnAmount;
                        confirmres.TodayTxnCount = TodayTxnCount;
                        confirmres.smsMsg = smsMsg;

                        Utils.WriteLog_Biller(logAppender + "Easy Microfinance Confirm Response Initiated");
                        return (new EasyMicrofinanceManager()).ConfrimToEBA(confirmres, amount, agentID, txnID, agentAmount, isAgreement, agentFeeDbl, smsStatus,
                            availablebalance, appType, topupType, agentName, MapTaxID, serviceFee, totalAmount, branchCode, sendername);
                    }
                    #endregion

                    #region Hana Microfinance
                    else if (MapTaxID == ConfigurationManager.AppSettings["HanaMicrofinanceTaxId"].ToString())
                    {

                        Utils.WriteLog_Biller(logAppender + "Hana Microfinance Confirm Starts");
                        ConfirmResponseModel confirmres = new ConfirmResponseModel();
                        confirmres.taxID = taxID;
                        confirmres.email = email;
                        confirmres.password = password;
                        confirmres.messageid = messageid;
                        confirmres.billername = billerName;
                        confirmres.billerlogo = billerLogo;
                        confirmres.ref1 = ref1;
                        confirmres.ref2 = ref2;
                        confirmres.ref3 = ref3;
                        confirmres.ref4 = ref4;
                        confirmres.ref5 = ref5;
                        confirmres.ref1Name = ref1Name;
                        confirmres.ref2Name = ref2Name;
                        confirmres.ref3Name = ref3Name;
                        confirmres.ref4Name = string.Empty;
                        confirmres.ref5Name = ref5Name;
                        confirmres.availablebalance = availablebalance.ToString();
                        confirmres.txnID = txnID.ToString();
                        confirmres.TodayTxnAmount = TodayTxnAmount;
                        confirmres.TodayTxnCount = TodayTxnCount;
                        confirmres.smsMsg = smsMsg;

                        Utils.WriteLog_Biller(logAppender + "Hana Microfinance Confirm Response Initiated");
                        return (new HanaMicrofinanceManager()).ConfrimToEBA(confirmres, amount, agentID, txnID, agentAmount, isAgreement, agentFeeDbl, smsStatus,
                            availablebalance, appType, topupType, agentName, MapTaxID, serviceFee, totalAmount, branchCode, sendername);
                    }
                    #endregion

                    #region <-- Mother Finance Loan Registration Confirm -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["MFLoanRegistrationTaxId"].ToString())
                    {
                        writeLog(logAppender + "This is Mother Finance Loan Registration");

                        if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4,
                                    ref5, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl,
                                    isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                        {
                            writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                            resdecs = "Error in update database";
                            rescode = "06";
                            if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                            {
                                writeLog(logAppender + "Error in updateError : " + errMsg);
                            }
                            return Utils.getErrorRes(rescode, "Transaction fail");
                        }
                        else
                        {
                            ConfirmResponseModel confirmRes = new ConfirmResponseModel();
                            confirmRes.taxID = taxID;
                            confirmRes.email = email;
                            confirmRes.password = password;
                            confirmRes.messageid = messageid;
                            confirmRes.billername = billerName;
                            confirmRes.billerlogo = billerLogo;
                            confirmRes.rescode = "00";
                            confirmRes.resdesc = "Success";
                            confirmRes.ref1 = ref1;
                            confirmRes.ref2 = ref2;
                            confirmRes.ref3 = ref3;
                            confirmRes.ref4 = ref4;
                            confirmRes.ref5 = ref5 + " Ks";
                            confirmRes.ref1Name = ref1Name;
                            confirmRes.ref2Name = ref2Name;
                            confirmRes.ref3Name = ref3Name;
                            confirmRes.ref4Name = ref4Name;
                            confirmRes.ref5Name = ref5Name;
                            confirmRes.availablebalance = availablebalance.ToString();
                            confirmRes.txnID = txnID.ToString();
                            confirmRes.TodayTxnAmount = TodayTxnAmount;
                            confirmRes.TodayTxnCount = TodayTxnCount;
                            confirmRes.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmRes);
                        }
                    }

                    #endregion

                    #region <-- FttthOrWtth Confirm -->

                    else if (MapTaxID == ConfigurationManager.AppSettings["FtthMapTaxId"].ToString() || MapTaxID == ConfigurationManager.AppSettings["WtthMapTaxId"].ToString())
                    {
                        writeLog(logAppender + "This is FttthOrWtth from EBA");

                        var ebaUrl = string.Empty;
                        var billerCode = string.Empty;

                        if (MapTaxID == ConfigurationManager.AppSettings["FtthMapTaxId"].ToString())
                        {
                            ebaUrl = ConfigurationManager.AppSettings["FtthConfirmUrl"].ToString();
                            billerCode = ConfigurationManager.AppSettings["FtthBillerCode"].ToString();
                        }

                        if (MapTaxID == ConfigurationManager.AppSettings["WtthMapTaxId"].ToString())
                        {
                            ebaUrl = ConfigurationManager.AppSettings["WtthConfirmUrl"].ToString();
                            billerCode = ConfigurationManager.AppSettings["WtthBillerCode"].ToString();
                        }

                        var device = ref3.Split('\\').ToList();
                        var imei = device.FirstOrDefault();
                        var ebaResponse = GetConfirmResponseForFtthOrWtth(ebaUrl, ref2, amount, imei, txnID, billerCode, ref4).Result;

                        if (ebaResponse == null)
                        {
                            resdecs = "No Response From EBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }


                        if (ebaResponse.TransactionStatus == "0")
                        {
                            #region <-- Update Transaction -->

                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4, phoneNumber, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            #endregion

                            writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                            #region <-- Send SMS -->

                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S")
                                //topup type is null or S
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();

                                    smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, ref1Name, ref2Name, ref3Name, "Ref", ref1, ref2, ref3, txnID.ToString(), double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                    try
                                    {
                                        writeLog(logAppender + "Mobile No :" + phoneNumber + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.SendSms(txnID.ToString(), smsMsg, phoneNumber, sendername);
                                        writeLog(logAppender + "sendSMSWithTxnID ends.");
                                    }
                                    catch
                                    {
                                    }
                                }
                            }

                            #endregion

                            #region <-- Response Back To Client -->

                            rescode = "00";
                            resdecs = "Success";
                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = rescode;
                            confirmres.resdesc = resdecs;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = ref4;
                            confirmres.ref5 = phoneNumber;
                            confirmres.ref6 = Utils.ReplaceAmpersandString(imgnrc);
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref4Name = string.Empty;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }

                        else
                        {
                            resdecs = Utils.EsbResponseDescription(ebaResponse.ErrorMessage.ToString());
                            return GetErrorResponseWithAddBalance(ebaResponse.ErrorCode.ToString(),
                                ebaResponse.ErrorMessage, txnID, resdecs, agentID, agentAmount,
                                isAgreement);
                        }


                    }

                    #endregion                   

                    #region <-- ParamiGas Confirm -->

                    else if (MapTaxID == ConfigurationManager.AppSettings["ParamiGasMapTaxId"].ToString())
                    {
                        writeLog(logAppender + "This is ParamiGas from EBA");

                        var address = string.Empty;
                        var township = string.Empty;
                        var division = string.Empty;

                        if (!string.IsNullOrEmpty(ref4))
                        {
                            var addresslist = ref4.Split(',').ToList();
                            if (addresslist.Count > 2)
                            {
                                address = addresslist[0];
                                township = addresslist[1];
                                division = addresslist[2];
                            }
                        }

                        var ebaResponse = ConfirmParamiGasPackage(txnID.ToString(), Convert.ToDouble(amount), ref1, ref2, address, division, township, ref3).Result;

                        if (ebaResponse == null)
                        {
                            resdecs = "No Response From EBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }

                        if (ebaResponse.TransactionStatus == "0")
                        {
                            #region <-- Update Transaction -->

                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4, ref5, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            #endregion

                            writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                            #region <-- Send SMS -->

                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S")
                                //topup type is null or S
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();

                                    smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, ref1Name, ref2Name, ref3Name, "Ref", ref1, ref2, ref3, txnID.ToString(), double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                    try
                                    {
                                        writeLog(logAppender + "Mobile No :" + ref3 + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.SendSms(txnID.ToString(), smsMsg, ref3, sendername);
                                        writeLog(logAppender + "sendSMSWithTxnID ends.");
                                    }
                                    catch
                                    {
                                    }
                                }

                            }

                            #endregion

                            #region <-- Response Back To Client -->

                            rescode = "00";
                            resdecs = "Success";
                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = rescode;
                            confirmres.resdesc = resdecs;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = ref4;
                            confirmres.ref5 = ref5;
                            confirmres.ref6 = Utils.ReplaceAmpersandString(imgnrc);
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref4Name = string.Empty;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }

                        else
                        {
                            return GetErrorResponseWithAddBalance(ebaResponse.ErrorCode.ToString(),
                                ebaResponse.ErrorMessage, txnID, resdecs, agentID, agentAmount,
                                isAgreement);
                        }


                    }

                    #endregion

                    #region <-- MaharMobile Confirm -->

                    else if (MapTaxID == ConfigurationManager.AppSettings["MaharMobileMapTaxId"].ToString())
                    {
                        writeLog(logAppender + "This is MaharMobile from EBA");

                        var ebaResponse = ConfirmMaharMobile(txnID.ToString(), Convert.ToDouble(amount));
                        Detail detail = JsonConvert.DeserializeObject<Detail>(ebaResponse.Detail);


                        if (ebaResponse == null)
                        {
                            resdecs = "No Response From EBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }

                        if (ebaResponse.TransactionStatus == "0" && !string.IsNullOrEmpty(detail.ClearPin))
                        {
                            #region <-- Update Transaction -->

                            string aesKey = string.Empty;
                            aesKey = ConfigurationManager.AppSettings["EsbaAesKey"].ToString();
                            detail.ClearPin = Utils.AESDecryptText(detail.ClearPin, aesKey);
                            ref2 = detail.Deno;
                            ref5 = ref3;//ref3 is mobileNo
                            ref3 = detail.SerialNumber;
                            ref4 = detail.ClearPin + " " + detail.ExpiryDate;

                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4, ref5, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            #endregion

                            #region <-- Send SMS -->

                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S")
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();

                                    smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, "Code", "Expiry", "", "Ref", detail.ClearPin, detail.ExpiryDate, "", txnID.ToString(), double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                    try
                                    {
                                        writeLog(logAppender + "Mobile No :" + ref5 + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.SendSms(txnID.ToString(), smsMsg, ref5, sendername);
                                        writeLog(logAppender + "sendSMSWithTxnID ends.");
                                    }
                                    catch
                                    {
                                    }
                                }
                            }

                            #endregion

                            #region <-- Response Back To Client -->

                            rescode = "00";
                            resdecs = "Success";
                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = rescode;
                            confirmres.resdesc = resdecs;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = ref4;
                            confirmres.ref5 = ref5;
                            confirmres.ref6 = Utils.ReplaceAmpersandString(imgnrc);
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref4Name = ref4Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }

                        else
                        {
                            return GetErrorResponseWithAddBalance(ebaResponse.ErrorCode.ToString(),
                                ebaResponse.ErrorMessage, txnID, resdecs, agentID, agentAmount,
                                isAgreement);
                        }


                    }

                    #endregion

                    #region <--LarLarKyi Confirm -->

                    else if (MapTaxID == ConfigurationManager.AppSettings["LarLarKyi"].ToString())
                    {
                        writeLog(logAppender + "This is LarLarKyi from EBA");

                        var ebaResponse = ConfirmLarLarKyi(txnID.ToString(), Convert.ToDouble(amount)).Result;

                        if (ebaResponse == null)
                        {
                            resdecs = "No Response From EBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }

                        if (ebaResponse.TransactionStatus == "0")
                        {
                            #region <-- Update Transaction -->
                            var detail = JsonConvert.DeserializeObject<Detail>(ebaResponse.Detail);

                            string aesKey = string.Empty;
                            aesKey = ConfigurationManager.AppSettings["EsbaAesKey"].ToString();
                            detail.ClearPin = Utils.AESDecryptText(detail.ClearPin, aesKey);
                            ref2 = detail.Deno;
                            ref5 = ref3;//ref3 is mobileNo
                            ref3 = detail.SerialNumber;
                            ref4 = detail.ClearPin + " " + detail.ExpiryDate;

                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4, ref5, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            #endregion

                            #region <-- Send SMS -->

                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S")
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();

                                    smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, "Code", "Expiry", "", "Ref", detail.ClearPin, detail.ExpiryDate, "", txnID.ToString(), double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                    try
                                    {
                                        writeLog(logAppender + "Mobile No :" + ref5 + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.SendSms(txnID.ToString(), smsMsg, ref5, sendername);
                                        writeLog(logAppender + "sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                    }
                                }
                            }

                            #endregion

                            #region <-- Response Back To Client -->

                            rescode = "00";
                            resdecs = "Success";
                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = rescode;
                            confirmres.resdesc = resdecs;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = ref4;
                            confirmres.ref5 = ref5;
                            confirmres.ref6 = Utils.ReplaceAmpersandString(imgnrc);
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref4Name = ref4Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }

                        else
                        {
                            return GetErrorResponseWithAddBalance(ebaResponse.ErrorCode.ToString(),
                                ebaResponse.ErrorMessage, txnID, resdecs, agentID, agentAmount,
                                isAgreement);
                        }


                    }

                    #endregion

                    #region <--MyanmarNet-->

                    else if (MapTaxID == ConfigurationManager.AppSettings["MyanmarNetAwaThone"] || MapTaxID == ConfigurationManager.AppSettings["MyanmarNetData"] || MapTaxID == ConfigurationManager.AppSettings["MyanmarNetPrepaid"] || MapTaxID == ConfigurationManager.AppSettings["HiWiFi"].ToString())
                    {
                        writeLog(logAppender + "This is GiftCard from EBA");

                        var billerCode = GetBillerCode(MapTaxID);
                        var ebaAmount = Convert.ToDouble(ref2);

                        var ebaResponse = ConfirmGiftCard(txnID.ToString(), ebaAmount, billerCode).Result;

                        if (ebaResponse == null)
                        {
                            resdecs = "No Response From EBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }

                        if (ebaResponse.TransactionStatus == "0")
                        {
                            #region <-- Update Transaction -->
                            var detail = JsonConvert.DeserializeObject<Detail>(ebaResponse.Detail);

                            string aesKey = string.Empty;
                            aesKey = ConfigurationManager.AppSettings["EsbaAesKey"].ToString();
                            detail.ClearPin = Utils.AESDecryptText(detail.ClearPin, aesKey);
                            ref2 = detail.Deno;
                            ref5 = ref3;//ref3 is mobileNo
                            ref3 = detail.SerialNumber;
                            ref4 = detail.ClearPin + " " + detail.ExpiryDate;

                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4, ref5, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            #endregion

                            #region <-- Send SMS -->

                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S")
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();

                                    smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, "Code", "Expiry", "", "Ref", detail.ClearPin, detail.ExpiryDate, "", txnID.ToString(), double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                    try
                                    {
                                        writeLog(logAppender + "Mobile No :" + ref5 + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.SendSms(txnID.ToString(), smsMsg, ref5, sendername);
                                        writeLog(logAppender + "sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {

                                    }
                                }
                            }

                            #endregion

                            #region <-- Response Back To Client -->

                            rescode = "00";
                            resdecs = "Success";
                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = rescode;
                            confirmres.resdesc = resdecs;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = ref4;
                            confirmres.ref5 = ref5;
                            confirmres.ref6 = Utils.ReplaceAmpersandString(imgnrc);
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref4Name = ref4Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }

                        else
                        {
                            return GetErrorResponseWithAddBalance(ebaResponse.ErrorCode.ToString(),
                                ebaResponse.ErrorMessage, txnID, resdecs, agentID, agentAmount,
                                isAgreement);
                        }


                    }

                    #endregion

                    #region <--WunZinn-->

                    else if (MapTaxID == ConfigurationManager.AppSettings["WunZinnMapTaxId"])
                    {
                        writeLog(logAppender + "This is WunZinn-GiftCard from EBA");

                        var billerCode = GetBillerCode(MapTaxID);
                        var ebaResponse = ConfirmGiftCard(txnID.ToString(), Convert.ToDouble(amount), billerCode).Result;

                        if (ebaResponse == null)
                        {
                            resdecs = "No Response From EBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }

                        if (ebaResponse.TransactionStatus == "0")
                        {
                            #region <-- Update Transaction -->
                            var detail = JsonConvert.DeserializeObject<Detail>(ebaResponse.Detail);

                            string aesKey = string.Empty;
                            aesKey = ConfigurationManager.AppSettings["EsbaAesKey"].ToString();
                            detail.ClearPin = Utils.AESDecryptText(detail.ClearPin, aesKey);
                            ref2 = detail.Deno;
                            ref5 = ref3;//ref3 is mobileNo
                            ref3 = detail.SerialNumber;
                            ref4 = detail.ClearPin + " " + detail.ExpiryDate;

                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4, ref5, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            #endregion

                            #region <-- Send SMS -->

                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S")
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();

                                    smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, "Code", "Expiry", "", "Ref", detail.ClearPin, detail.ExpiryDate, "", txnID.ToString(), double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                    try
                                    {
                                        writeLog(logAppender + "Mobile No :" + ref5 + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.SendSms(txnID.ToString(), smsMsg, ref5, sendername);
                                        writeLog(logAppender + "sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {

                                    }
                                }
                            }

                            #endregion

                            #region <-- Response Back To Client -->

                            rescode = "00";
                            resdecs = "Success";
                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = rescode;
                            confirmres.resdesc = resdecs;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = ref4;
                            confirmres.ref5 = ref5;
                            confirmres.ref6 = Utils.ReplaceAmpersandString(imgnrc);
                            confirmres.ref1Name = string.Empty;
                            confirmres.ref2Name = string.Empty;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref4Name = ref4Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }

                        else
                        {
                            return GetErrorResponseWithAddBalance(ebaResponse.ErrorCode.ToString(),
                                ebaResponse.ErrorMessage, txnID, resdecs, agentID, agentAmount,
                                isAgreement);
                        }


                    }

                    #endregion                    

                    #region <-- OoredooFtth Confirm -->

                    else if (MapTaxID == ConfigurationManager.AppSettings["OoredooFtth"].ToString())
                    {
                        writeLog(logAppender + "This is OoredooFtth from EBA");

                        var ebaResponse = ConfirmOoredooFtth(Convert.ToString(txnID), Convert.ToDouble(amount), ref1, ref2, ref4).Result;

                        if (ebaResponse == null)
                        {
                            resdecs = "No Response From EBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }


                        if (ebaResponse.TransactionStatus == "0")
                        {
                            #region <-- Update Transaction -->

                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4, phoneNumber, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            #endregion

                            writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                            #region <-- Send SMS -->

                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S")
                                //topup type is null or S
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();

                                    smsMsg = smsH.GetOoredooFtthMessage(agentName, billerName, DateTime.Now.ToString(), ref1Name, ref2Name, "Ref", ref1, ref2, txnID.ToString(), double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                    try
                                    {
                                        writeLog(logAppender + "Mobile No :" + phoneNumber + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.SendSms(txnID.ToString(), smsMsg, phoneNumber, sendername);
                                        writeLog(logAppender + "sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                    }
                                }

                            }

                            #endregion

                            #region <-- Response Back To Client -->

                            rescode = "00";
                            resdecs = "Success";
                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = rescode;
                            confirmres.resdesc = resdecs;
                            confirmres.ref1 = Utils.ReplaceAmpersandString(ref1);
                            confirmres.ref2 = Utils.ReplaceAmpersandString(ref2);
                            confirmres.ref3 = Utils.ReplaceAmpersandString(ref3);
                            confirmres.ref4 = Utils.ReplaceAmpersandString(ref4);
                            confirmres.ref5 = phoneNumber;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = string.Empty;
                            confirmres.ref4Name = ref4Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }

                        else
                        {
                            return GetErrorResponseWithAddBalance(ebaResponse.TransactionStatus,
                                ebaResponse.ErrorMessage, txnID, resdecs, agentID, agentAmount,
                                isAgreement);
                        }
                    }

                    #endregion

                    #region <--TelenorDataPackPin-->
                    else if (MapTaxID == ConfigurationManager.AppSettings["TelenorDataPackPinMapTaxId"].ToString())
                    {
                        writeLog(logAppender + "This is TelenorDataPackPin from EBA");

                        var billerCode = GetBillerCode(MapTaxID);
                        var ebaResponse = ConfirmGiftCard(txnID.ToString(), Convert.ToDouble(amount), billerCode).Result;

                        if (ebaResponse == null)
                        {
                            resdecs = "No Response From EBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }

                        if (ebaResponse.TransactionStatus == "0")
                        {
                            #region <-- Update Transaction -->
                            var detail = JsonConvert.DeserializeObject<Detail>(ebaResponse.Detail);

                            string aesKey = string.Empty;
                            aesKey = ConfigurationManager.AppSettings["EsbaAesKey"].ToString();
                            detail.ClearPin = Utils.AESDecryptText(detail.ClearPin, aesKey);
                            ref1 = ref4;
                            ref2 = detail.Deno;
                            ref5 = ref3;//ref3 is mobileNo
                            ref3 = detail.SerialNumber;
                            ref4 = detail.ClearPin + " " + detail.ExpiryDate;

                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4, ref5, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            #endregion
                            #region <-- Send SMS -->

                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S")
                                {
                                    ref3 = Utils.maskString(ref3);
                                    SMSHelper smsH = new SMSHelper();
                                    MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();
                                    string[] words = ref4.Split(' ');
                                    string PIN = words[0].ToString();
                                    string Expiry = words[1].ToString();

                                    smsMsg = smsH.getMessageTopup(agentName, MapTaxID, "", PIN, ref3, Expiry,
                                       double.Parse(amount).ToString("#,###.00"), branchCode);

                                    try
                                    {
                                        writeLog(logAppender + "Mobile No :" + ref5 + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.SendSms(txnID.ToString(), smsMsg, ref5, sendername);
                                        writeLog(logAppender + "sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {

                                    }
                                }
                            }

                            #endregion

                            #region <-- Response Back To Client -->

                            rescode = "00";
                            resdecs = "Success";
                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = rescode;
                            confirmres.resdesc = resdecs;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = ref4;
                            confirmres.ref5 = ref5;
                            confirmres.ref6 = Utils.ReplaceAmpersandString(imgnrc);
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref4Name = ref4Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }

                        else
                        {
                            return GetErrorResponseWithAddBalance(ebaResponse.ErrorCode.ToString(),
                                ebaResponse.ErrorMessage, txnID, resdecs, agentID, agentAmount,
                                isAgreement);
                        }


                    }

                    #endregion

                    #region <-- MyanPwel Confirm -->

                    else if (MapTaxID == ConfigurationManager.AppSettings["MyanPwel"].ToString())
                    {
                        writeLog(logAppender + "This is MyanPwel from EBA");

                        var billerCode = GetBillerCode(MapTaxID);

                        var url = ConfigurationManager.AppSettings["GiftCardConfirmUrl"];

                        var thisEvent = ref1.Split('/').ToList();
                        var ticket = ref2.Split('/').ToList();
                        var qty = ref3.Split('/').ToList();
                        var minmax = ref4.Split('/').ToList();
                        var customer = ref5.Split('/').ToList();
                        var detail = new Ticket
                        {
                            eventId = thisEvent.FirstOrDefault(),
                            eventTitle = thisEvent.LastOrDefault(),
                            ticketId = ticket.FirstOrDefault(),
                            ticketType = ticket[1],
                            price = ticket.LastOrDefault(),
                            qty = qty.FirstOrDefault(),
                            ticketDescription = qty.LastOrDefault(),
                            availableTicketQty = minmax.FirstOrDefault(),
                            minimumTicketQty = minmax[1],
                            maximumTicketQty = minmax.LastOrDefault(),
                            name = customer.FirstOrDefault(),
                            phone = customer[1],
                            saleEndDate = customer.LastOrDefault(),
                            nrcNumber = ref6
                        };

                        var ebaResponse = EbaFlightConfirm(Convert.ToString(txnID), amount, billerCode, JsonConvert.SerializeObject(detail), url).Result;

                        if (ebaResponse == null)
                        {
                            resdecs = "No Response From EBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }


                        if (ebaResponse.TransactionStatus == "0")
                        {
                            writeLog(logAppender + "Order Detail : " + ebaResponse.Detail);
                            var order = JsonConvert.DeserializeObject<Order>(ebaResponse.Detail);
                            #region <-- Update Transaction -->

                            if (!_agentWCF.ConfirmUpdate(txnID, detail.eventTitle, detail.ticketType, detail.qty, order.orderId, detail.phone, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            #endregion

                            writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                            #region <-- Send SMS -->

                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S")
                                //topup type is null or S
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();

                                    smsMsg = smsH.GetMessageBiller(txnID.ToString(), agentName, MapTaxID, billerName, ref1Name, ref2Name, ref3Name, ref4Name, detail.eventTitle, detail.ticketType, detail.qty, order.orderId, double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                    try
                                    {
                                        writeLog(logAppender + "Mobile No :" + detail.phone + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.SendSms(txnID.ToString(), smsMsg, detail.phone, sendername);
                                        writeLog(logAppender + "sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                    }
                                }

                            }

                            #endregion

                            #region <-- Response Back To Client -->

                            rescode = "00";
                            resdecs = "Success";
                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = rescode;
                            confirmres.resdesc = resdecs;
                            confirmres.ref1 = Utils.ReplaceAmpersandString(detail.eventTitle);
                            confirmres.ref2 = Utils.ReplaceAmpersandString(detail.ticketType);
                            confirmres.ref3 = Utils.ReplaceAmpersandString(detail.qty);
                            confirmres.ref4 = Utils.ReplaceAmpersandString(order.orderId);
                            confirmres.ref5 = detail.phone;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref4Name = ref4Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }

                        else
                        {
                            return GetErrorResponseWithAddBalance(ebaResponse.TransactionStatus,
                                ebaResponse.ErrorMessage, txnID, resdecs, agentID, agentAmount,
                                isAgreement);
                        }
                    }

                    #endregion

                    #region <-- MinTheinKha Confirm -->

                    else if (MapTaxID == ConfigurationManager.AppSettings["MinTheinKha"].ToString())
                    {
                        writeLog(logAppender + "This is MinTheinKha from EBA");

                        var billerCode = GetBillerCode(MapTaxID);

                        var service = ref1.Split('/').ToList();
                        var astro = ref2.Split('/').ToList();
                        var cus = ref3.Split('/').ToList();

                        var ebaResponse = ConfirmMinTheinKha(ref1, ref2, ref3, ref4, ref5, ref6, amount, txnID.ToString(), billerCode).Result;

                        if (ebaResponse == null)
                        {
                            resdecs = "No Response From EBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }

                        if (ebaResponse.TransactionStatus == "0")
                        {
                            writeLog(logAppender + "Order Detail : " + ebaResponse.Detail);
                            var order = JsonConvert.DeserializeObject<Order>(ebaResponse.Detail);
                            #region <-- Update Transaction -->

                            if (!_agentWCF.ConfirmUpdate(txnID, service.LastOrDefault(), astro[1], astro[2], cus.FirstOrDefault(), cus[1], "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            #endregion

                            writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                            #region <-- Send SMS -->

                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S")
                                //topup type is null or S
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();

                                    desc = ConfigurationManager.AppSettings["MinTheinKhaSmsDesc"];
                                    smsMsg = smsH.GetMinTheinKhaMessageBiller(txnID.ToString(), agentName, MapTaxID, billerName, ref1Name, service.LastOrDefault(), double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode, desc);

                                    try
                                    {
                                        writeLog(logAppender + "Mobile No :" + cus[1] + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.SendSms(txnID.ToString(), smsMsg, cus[1], sendername);
                                        writeLog(logAppender + "sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                    }
                                }

                            }

                            #endregion

                            #region <-- Response Back To Client -->

                            rescode = "00";
                            resdecs = "Success";
                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = rescode;
                            confirmres.resdesc = resdecs;
                            confirmres.ref1 = service.LastOrDefault();
                            confirmres.ref2 = astro[1];
                            confirmres.ref3 = string.Empty;
                            confirmres.ref4 = string.Empty;
                            confirmres.ref5 = cus[1];
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = string.Empty;
                            confirmres.ref4Name = string.Empty;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }

                        else
                        {
                            return GetErrorResponseWithAddBalance(ebaResponse.TransactionStatus,
                                ebaResponse.ErrorMessage, txnID, resdecs, agentID, agentAmount,
                                isAgreement);
                        }
                    }

                    #endregion

                    #region <-- Mesc Confirm -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["MescTaxId"].ToString())
                    {
                        writeLog(logAppender + "This is Mesc from EBA Confirm");
                        string ebaUrl = ConfigurationManager.AppSettings["MescConfirmUrl"].ToString();

                        if (IsTokenNullOrExpire(Token))
                        {
                            Token = GetOAuthToken();
                        }
                        string dueDate = ref4.Split('|')[0].ToString();
                        string epcRefNo = ref4.Split('|')[1].ToString();
                        string townshipCode = ref4.Split('|')[2].ToString();
                        string meterNo = ref2.Split('|')[0];
                        EbaConfirmReq confirmReq = new EbaConfirmReq()
                        {
                            Token = Token.Token,
                            PartnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString(),
                            PartnerRefNo = txnID.ToString(),
                            BillerCode = ConfigurationManager.AppSettings["MescBillerCode"].ToString(),
                            TransactionAmount = amount,
                            Detail = "{'EpcRefNo':'" + epcRefNo + "', 'Townshipcode':'" + townshipCode + "', 'LedgerNo':'" + ref3 + "' ,'MeterNo':'" + meterNo + "', 'UniqueId':'" + ref1 + "'}"
                        };
                        EbaConfirmRes confirmRes = new EbaConfirmRes();

                        var json_serializer1 = new JavaScriptSerializer();
                        string jsonReq = json_serializer1.Serialize(confirmReq);
                        writeLog(logAppender + "EBA Mesc JasonReq:" + jsonReq);

                        SSLPost post = new SSLPost();
                        string jsonres = Utils.PaymentRequest(jsonReq, ebaUrl);
                        writeLog(logAppender + "EBA Mesc JasonRes:" + jsonres);

                        if (string.IsNullOrEmpty(jsonres))
                        {
                            resdecs = "No Response From EBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }

                        var json_serializerpinres = new JavaScriptSerializer();
                        confirmRes = json_serializerpinres.Deserialize<EbaConfirmRes>(jsonres);

                        if (confirmRes.ErrorCode == "00")
                        {
                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, dueDate,
                                    ref5, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl,
                                    isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                            #region <-- Send SMS -->

                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S") //topup type is null or S
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();

                                    smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, ref1Name, "", ref4Name, "Ref", ref1, "", dueDate, txnID.ToString(), double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                    try
                                    {

                                        writeLog(logAppender + "Mobile No :" + ref5 + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.SendSms(txnID.ToString(), smsMsg, ref5, sendername);
                                        writeLog(logAppender + "sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                        writeLog(logAppender + string.Format("Error in SendSms: {0}", ex.ToString()));
                                    }
                                }

                            }

                            #endregion

                            #region <-- Response Back To Client -->

                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = confirmRes.ErrorCode;
                            confirmres.resdesc = confirmRes.ErrorMessage;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2.Split('|')[1];
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = dueDate;
                            confirmres.ref5 = ref5;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name.Split('|')[1];
                            confirmres.ref3Name = "";
                            confirmres.ref4Name = ref4Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }
                        else
                        {
                            resdecs = Utils.EsbResponseDescription(confirmRes.ErrorCode);
                            return GetErrorResponseWithAddBalance(confirmRes.ErrorCode, confirmRes.ErrorMessage,
                                txnID, resdecs, agentID, agentAmount, isAgreement);
                        }
                    }
                    #endregion

                    #region <-- 5BB FTH Confirm -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["5BBTaxId"].ToString())
                    {
                        writeLog(logAppender + "This is 5BB FTH from EBA Confirm");
                        string ebaUrl = ConfigurationManager.AppSettings["5BBConfirmUrl"].ToString();

                        if (IsTokenNullOrExpire(Token))
                        {
                            Token = GetOAuthToken();
                        }

                        EbaConfirmReq confirmReq = new EbaConfirmReq()
                        {
                            Token = Token.Token,
                            PartnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString(),
                            PartnerRefNo = txnID.ToString(),
                            BillerCode = ConfigurationManager.AppSettings["5BBBillerCode"].ToString(),
                            TransactionAmount = amount,
                            Detail = "{'CustomerName':'" + ref1 + "', 'CustomerAccountNo':'" + ref2 + "', 'InvoiceID':'" + ref3 + "' ,'Amount':'" + amount + "'}"
                        };
                        EbaConfirmRes confirmRes = new EbaConfirmRes();

                        var json_serializer1 = new JavaScriptSerializer();
                        string jsonReq = json_serializer1.Serialize(confirmReq);
                        writeLog(logAppender + "EBA 5BB JasonReq:" + jsonReq);

                        SSLPost post = new SSLPost();
                        string jsonres = Utils.PaymentRequest(jsonReq, ebaUrl);
                        writeLog(logAppender + "EBA 5BB JasonRes:" + jsonres);

                        if (string.IsNullOrEmpty(jsonres))
                        {
                            resdecs = "No Response From EBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }

                        var json_serializerpinres = new JavaScriptSerializer();
                        confirmRes = json_serializerpinres.Deserialize<EbaConfirmRes>(jsonres);

                        if (confirmRes.ErrorCode == "00")
                        {
                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4,
                                    ref5, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl,
                                    isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                            #region <-- Send SMS -->

                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S") //topup type is null or S
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();

                                    smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, ref1Name, ref2Name, ref3Name, "Ref", ref1, ref2, ref3, txnID.ToString(), double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                    try
                                    {

                                        writeLog(logAppender + "Mobile No :" + ref5 + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.SendSms(txnID.ToString(), smsMsg, ref5, sendername);
                                        writeLog(logAppender + "sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                        writeLog(logAppender + string.Format("Error in SendSms: {0}", ex.ToString()));
                                    }
                                }

                            }

                            #endregion

                            #region <-- Response Back To Client -->

                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = confirmRes.ErrorCode;
                            confirmres.resdesc = confirmRes.ErrorMessage;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = ref4;
                            confirmres.ref5 = ref5;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref4Name = ref4Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }
                        else
                        {
                            resdecs = Utils.EsbResponseDescription(confirmRes.ErrorCode);
                            return GetErrorResponseWithAddBalance(confirmRes.ErrorCode, confirmRes.ErrorMessage,
                                txnID, resdecs, agentID, agentAmount, isAgreement);
                        }
                    }
                    #endregion

                    #region <-- Mahar BawGa - MBF Confirm -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["MBFTaxId"].ToString())
                    {
                        writeLog(logAppender + "This is MBF from EBA Confirm");
                        string ebaUrl = ConfigurationManager.AppSettings["MBFConfirmUrl"].ToString();

                        if (IsTokenNullOrExpire(Token))
                        {
                            Token = GetOAuthToken();
                        }

                        EbaConfirmReq confirmReq = new EbaConfirmReq()
                        {
                            Token = Token.Token,
                            PartnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString(),
                            PartnerRefNo = txnID.ToString(),
                            BillerCode = ConfigurationManager.AppSettings["MBFBillerCode"].ToString(),
                            TransactionAmount = amount,
                            Detail = "{'CustomerId':'" + ref1 + "', 'NRC':'" + ref3 + "', 'Name':'" + ref2 + "' ,'Amount':'" + amount + "'}"
                        };
                        EbaConfirmRes confirmRes = new EbaConfirmRes();

                        var json_serializer1 = new JavaScriptSerializer();
                        string jsonReq = json_serializer1.Serialize(confirmReq);
                        writeLog(logAppender + "EBA MBF JasonReq:" + jsonReq);

                        SSLPost post = new SSLPost();
                        string jsonres = Utils.PaymentRequest(jsonReq, ebaUrl);
                        writeLog(logAppender + "EBA MBF JasonRes:" + jsonres);

                        if (string.IsNullOrEmpty(jsonres))
                        {
                            resdecs = "No Response From EBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }

                        var json_serializerpinres = new JavaScriptSerializer();
                        confirmRes = json_serializerpinres.Deserialize<EbaConfirmRes>(jsonres);

                        if (confirmRes.ErrorCode == "00")
                        {
                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4,
                                    ref5, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl,
                                    isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                            #region <-- Send SMS -->

                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S") //topup type is null or S
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();

                                    smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, ref1Name, ref2Name, "", "Ref", ref1, ref2, "", txnID.ToString(), double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                    try
                                    {

                                        writeLog(logAppender + "Mobile No :" + ref5 + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.SendSms(txnID.ToString(), smsMsg, ref5, sendername);
                                        writeLog(logAppender + "sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                        writeLog(logAppender + string.Format("Error in SendSms: {0}", ex.ToString()));
                                    }
                                }

                            }

                            #endregion

                            #region <-- Response Back To Client -->

                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = confirmRes.ErrorCode;
                            confirmres.resdesc = confirmRes.ErrorMessage;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = ref4;
                            confirmres.ref5 = ref5;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref4Name = ref4Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }
                        else
                        {
                            resdecs = Utils.EsbResponseDescription(confirmRes.ErrorCode);
                            return GetErrorResponseWithAddBalance(confirmRes.ErrorCode, confirmRes.ErrorMessage,
                                txnID, resdecs, agentID, agentAmount, isAgreement);
                        }
                    }
                    #endregion

                    #region <-- OnDoctor Confirm -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["OnDoctorTaxId"].ToString())
                    {
                        writeLog(logAppender + "This is OnDoctor from EBA Confirm");
                        string ebaUrl = ConfigurationManager.AppSettings["OnDoctorConfirmUrl"].ToString();

                        if (IsTokenNullOrExpire(Token))
                        {
                            Token = GetOAuthToken();
                        }

                        EbaConfirmReq confirmReq = new EbaConfirmReq()
                        {
                            Token = Token.Token,
                            PartnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString(),
                            PartnerRefNo = txnID.ToString(),
                            BillerCode = ConfigurationManager.AppSettings["OnDoctorBillerCode"].ToString(),
                            TransactionAmount = amount,
                            Detail = "{'PhoneNumber':'" + ref3 + "', 'Amount':'" + amount + "'}"
                        };
                        EbaConfirmRes confirmRes = new EbaConfirmRes();

                        var json_serializer1 = new JavaScriptSerializer();
                        string jsonReq = json_serializer1.Serialize(confirmReq);
                        writeLog(logAppender + "EBA OnDoctor JasonReq:" + jsonReq);

                        SSLPost post = new SSLPost();
                        string jsonres = Utils.PaymentRequest(jsonReq, ebaUrl);
                        writeLog(logAppender + "EBA OnDoctor JasonRes:" + jsonres);

                        if (string.IsNullOrEmpty(jsonres))
                        {
                            resdecs = "No Response From EBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }

                        var json_serializerpinres = new JavaScriptSerializer();
                        confirmRes = json_serializerpinres.Deserialize<EbaConfirmRes>(jsonres);

                        if (confirmRes.ErrorCode == "00")
                        {
                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4,
                                    ref5, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl,
                                    isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                            #region <-- Send SMS -->

                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S") //topup type is null or S
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();

                                    smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, ref1Name, ref2Name, ref3Name, "Ref", ref1, ref2, ref3, txnID.ToString(), double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                    try
                                    {

                                        writeLog(logAppender + "Mobile No :" + ref5 + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.SendSms(txnID.ToString(), smsMsg, ref5, sendername);
                                        writeLog(logAppender + "sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                        writeLog(logAppender + string.Format("Error in SendSms: {0}", ex.ToString()));
                                    }
                                }

                            }

                            #endregion

                            #region <-- Response Back To Client -->

                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = confirmRes.ErrorCode;
                            confirmres.resdesc = confirmRes.ErrorMessage;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = ref4;
                            confirmres.ref5 = ref5;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref4Name = ref4Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }
                        else
                        {
                            resdecs = Utils.EsbResponseDescription(confirmRes.ErrorCode);
                            return GetErrorResponseWithAddBalance(confirmRes.ErrorCode, confirmRes.ErrorMessage,
                                txnID, resdecs, agentID, agentAmount, isAgreement);
                        }
                    }
                    #endregion

                    #region <-- Yesc Confirm -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["YescTaxId"].ToString())
                    {
                        writeLog(logAppender + "This is Yesc from EBA Confirm");
                        string ebaUrl = ConfigurationManager.AppSettings["YescConfirmUrl"].ToString();

                        if (IsTokenNullOrExpire(Token))
                        {
                            Token = GetOAuthToken();
                        }

                        string meterBillDetailId = ref4.Split('|')[0].ToString();
                        string meterBillAmount = ref4.Split('|')[1].ToString();
                        string dueDate = ref4.Split('|')[2].ToString();
                        EbaConfirmReq confirmReq = new EbaConfirmReq()
                        {
                            Token = Token.Token,
                            PartnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString(),
                            PartnerRefNo = txnID.ToString(),
                            BillerCode = ConfigurationManager.AppSettings["YescBillerCode"].ToString(),
                            TransactionAmount = amount,
                            Detail = "{'MeterBillDetailId':'" + meterBillDetailId + "', 'MeterNo':'" + ref2 + "', 'MeterRefNo':'" + ref1 + "' ,'Amount':'" + meterBillAmount + "', 'LedgerNo':'" + ref3 + "'}"
                        };
                        EbaConfirmRes confirmRes = new EbaConfirmRes();

                        var json_serializer1 = new JavaScriptSerializer();
                        string jsonReq = json_serializer1.Serialize(confirmReq);
                        writeLog(logAppender + "EBA Yesc JasonReq:" + jsonReq);

                        SSLPost post = new SSLPost();
                        string jsonres = Utils.PaymentRequest(jsonReq, ebaUrl);
                        writeLog(logAppender + "EBA Yesc JasonRes:" + jsonres);

                        if (string.IsNullOrEmpty(jsonres))
                        {
                            resdecs = "No Response From EBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }

                        var json_serializerpinres = new JavaScriptSerializer();
                        confirmRes = json_serializerpinres.Deserialize<EbaConfirmRes>(jsonres);

                        if (confirmRes.ErrorCode == "00")
                        {
                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, dueDate,
                                    ref5, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl,
                                    isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                            #region <-- Send SMS -->

                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S") //topup type is null or S
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();

                                    smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, ref1Name, "", ref4Name, "Ref", ref1, "", dueDate, txnID.ToString(), double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                    try
                                    {

                                        writeLog(logAppender + "Mobile No :" + ref5 + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.SendSms(txnID.ToString(), smsMsg, ref5, sendername);
                                        writeLog(logAppender + "sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                        writeLog(logAppender + string.Format("Error in SendSms: {0}", ex.ToString()));
                                    }
                                }

                            }

                            #endregion

                            #region <-- Response Back To Client -->

                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = confirmRes.ErrorCode;
                            confirmres.resdesc = confirmRes.ErrorMessage;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = dueDate;
                            confirmres.ref5 = ref5;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = "";
                            confirmres.ref3Name = "";
                            confirmres.ref4Name = ref4Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }
                        else
                        {
                            resdecs = Utils.EsbResponseDescription(confirmRes.ErrorCode);
                            return GetErrorResponseWithAddBalance(confirmRes.ErrorCode, confirmRes.ErrorMessage,
                                txnID, resdecs, agentID, agentAmount, isAgreement);
                        }
                    }
                    #endregion

                    #region <-- SaiSai Pay Confirm -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["SaiSaiPayTaxId"].ToString())
                    {
                        writeLog(logAppender + "This is SaiSai Pay from EBA Confirm");
                        string ebaUrl = ConfigurationManager.AppSettings["SaiSaiPayConfirmUrl"].ToString();

                        if (IsTokenNullOrExpire(Token))
                        {
                            Token = GetOAuthToken();
                        }

                        EbaConfirmReq confirmReq = new EbaConfirmReq()
                        {
                            Token = Token.Token,
                            PartnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString(),
                            PartnerRefNo = txnID.ToString(),
                            BillerCode = ConfigurationManager.AppSettings["SaiSaiPayBillerCode"].ToString(),
                            TransactionAmount = amount,
                            Detail = "{'MobileNumber':'" + ref1 + "', 'Amount':'" + amount + "', 'Remark':'NearMe'}"
                        };
                        EbaConfirmRes confirmRes = new EbaConfirmRes();

                        var json_serializer1 = new JavaScriptSerializer();
                        string jsonReq = json_serializer1.Serialize(confirmReq);
                        writeLog(logAppender + "EBA SaiSai Pay JasonReq:" + jsonReq);

                        SSLPost post = new SSLPost();
                        string jsonres = Utils.PaymentRequest(jsonReq, ebaUrl);
                        writeLog(logAppender + "EBA SaiSai Pay JasonRes:" + jsonres);

                        if (string.IsNullOrEmpty(jsonres))
                        {
                            resdecs = "No Response From EBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }

                        var json_serializerpinres = new JavaScriptSerializer();
                        confirmRes = json_serializerpinres.Deserialize<EbaConfirmRes>(jsonres);

                        if (confirmRes.ErrorCode == "00")
                        {
                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4,
                                    ref5, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl,
                                    isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                            #region <-- Response Back To Client -->

                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = confirmRes.ErrorCode;
                            confirmres.resdesc = confirmRes.ErrorMessage;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = ref4;
                            confirmres.ref5 = ref5;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = "";
                            confirmres.ref4Name = "";
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }
                        else
                        {
                            resdecs = Utils.EsbResponseDescription(confirmRes.ErrorCode);
                            return GetErrorResponseWithAddBalance(confirmRes.ErrorCode, confirmRes.ErrorMessage,
                                txnID, resdecs, agentID, agentAmount, isAgreement);
                        }
                    }
                    #endregion

                    #region <-- Infinite Confirm -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["InfiniteTaxId"].ToString())
                    {
                        writeLog(logAppender + "This is Infinite from EBA Confirm");
                        string ebaUrl = ConfigurationManager.AppSettings["InfiniteConfirmUrl"].ToString();

                        if (IsTokenNullOrExpire(Token))
                        {
                            Token = GetOAuthToken();
                        }

                        EbaConfirmReq confirmReq = new EbaConfirmReq()
                        {
                            Token = Token.Token,
                            PartnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString(),
                            PartnerRefNo = txnID.ToString(),
                            BillerCode = ConfigurationManager.AppSettings["InfiniteBillerCode"].ToString(),
                            TransactionAmount = amount,
                            Detail = "{'CustomerId':'" + ref2 + "', 'PhoneNumber':'" + ref1 + "', 'Amount':'" + amount + "' ,'Description':''}"
                        };
                        EbaConfirmRes confirmRes = new EbaConfirmRes();

                        var json_serializer1 = new JavaScriptSerializer();
                        string jsonReq = json_serializer1.Serialize(confirmReq);
                        writeLog(logAppender + "EBA Infinite JasonReq:" + jsonReq);

                        SSLPost post = new SSLPost();
                        string jsonres = Utils.PaymentRequest(jsonReq, ebaUrl);
                        writeLog(logAppender + "EBA Infinite JasonRes:" + jsonres);

                        if (string.IsNullOrEmpty(jsonres))
                        {
                            resdecs = "No Response From EBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }

                        var json_serializerpinres = new JavaScriptSerializer();
                        confirmRes = json_serializerpinres.Deserialize<EbaConfirmRes>(jsonres);

                        if (confirmRes.ErrorCode == "00")
                        {
                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4,
                                    ref5, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl,
                                    isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                            #region <-- Send SMS -->

                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S") //topup type is null or S
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();

                                    smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, ref1Name, ref2Name, ref3Name, "Ref", ref1, ref2, ref3, txnID.ToString(), double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                    try
                                    {

                                        writeLog(logAppender + "Mobile No :" + ref5 + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.SendSms(txnID.ToString(), smsMsg, ref5, sendername);
                                        writeLog(logAppender + "sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                        writeLog(logAppender + string.Format("Error in SendSms: {0}", ex.ToString()));
                                    }
                                }

                            }

                            #endregion

                            #region <-- Response Back To Client -->

                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = confirmRes.ErrorCode;
                            confirmres.resdesc = confirmRes.ErrorMessage;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = ref4;
                            confirmres.ref5 = ref5;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref4Name = ref4Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }
                        else
                        {
                            resdecs = Utils.EsbResponseDescription(confirmRes.ErrorCode);
                            return GetErrorResponseWithAddBalance(confirmRes.ErrorCode, confirmRes.ErrorMessage,
                                txnID, resdecs, agentID, agentAmount, isAgreement);
                        }
                    }
                    #endregion

                    #region <-- MSP TopUp Confirm -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["MSPTopUpTaxId"].ToString())
                    {
                        writeLog(logAppender + "This is MSP TopUp from EBA Confirm");
                        string ebaUrl = ConfigurationManager.AppSettings["MSPTopUpConfirmUrl"].ToString();

                        if (IsTokenNullOrExpire(Token))
                        {
                            Token = GetOAuthToken();
                        }

                        EbaConfirmReq confirmReq = new EbaConfirmReq()
                        {
                            Token = Token.Token,
                            PartnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString(),
                            PartnerRefNo = txnID.ToString(),
                            BillerCode = ConfigurationManager.AppSettings["MSPTopUpBillerCode"].ToString(),
                            TransactionAmount = amount,
                            Detail = "{'Amount':'" + amount + "', 'BillerReferenceNo':'" + ref3 + "'}"
                        };
                        EbaConfirmRes confirmRes = new EbaConfirmRes();

                        var json_serializer1 = new JavaScriptSerializer();
                        string jsonReq = json_serializer1.Serialize(confirmReq);
                        writeLog(logAppender + "EBA MSP TopUp JasonReq:" + jsonReq);

                        SSLPost post = new SSLPost();
                        string jsonres = Utils.PaymentRequest(jsonReq, ebaUrl);
                        writeLog(logAppender + "EBA MSP TopUp JasonRes:" + jsonres);

                        if (string.IsNullOrEmpty(jsonres))
                        {
                            resdecs = "No Response From EBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }

                        var json_serializerpinres = new JavaScriptSerializer();
                        confirmRes = json_serializerpinres.Deserialize<EbaConfirmRes>(jsonres);

                        if (confirmRes.ErrorCode == "00")
                        {
                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, "", ref4,
                                    ref5, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl,
                                    isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                            #region <-- Response Back To Client -->

                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = confirmRes.ErrorCode;
                            confirmres.resdesc = confirmRes.ErrorMessage;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = ref4;
                            confirmres.ref5 = ref5;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref4Name = ref4Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }
                        else
                        {
                            resdecs = Utils.EsbResponseDescription(confirmRes.ErrorCode);
                            return GetErrorResponseWithAddBalance(confirmRes.ErrorCode, confirmRes.ErrorMessage,
                                txnID, resdecs, agentID, agentAmount, isAgreement);
                        }
                    }
                    #endregion

                    #region <-- Anawrahta Confirm -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["AnawrahtaTaxId"].ToString())
                    {
                        writeLog(logAppender + "This is Anawrahta from EBA Confirm");
                        string ebaUrl = ConfigurationManager.AppSettings["AnawrahtaConfirmUrl"].ToString();

                        if (IsTokenNullOrExpire(Token))
                        {
                            Token = GetOAuthToken();
                        }

                        EbaConfirmReq confirmReq = new EbaConfirmReq()
                        {
                            Token = Token.Token,
                            PartnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString(),
                            PartnerRefNo = txnID.ToString(),
                            BillerCode = ConfigurationManager.AppSettings["AnawrahtaBillerCode"].ToString(),
                            TransactionAmount = amount,
                            Detail = "{'CustomerId':'" + ref2 + "', 'Amount':'" + amount + "' ,'Name':'" + ref3 + "' ,'Nrc':'-' ,'PhoneNumber':'" + ref1 + "', 'Remark':'Near me'}"
                        };
                        EbaConfirmRes confirmRes = new EbaConfirmRes();

                        var json_serializer1 = new JavaScriptSerializer();
                        string jsonReq = json_serializer1.Serialize(confirmReq);
                        writeLog(logAppender + "EBA Anawrahta JasonReq:" + jsonReq);

                        SSLPost post = new SSLPost();
                        string jsonres = Utils.PaymentRequest(jsonReq, ebaUrl);
                        writeLog(logAppender + "EBA Anawrahta JasonRes:" + jsonres);

                        if (string.IsNullOrEmpty(jsonres))
                        {
                            resdecs = "No Response From EBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }

                        var json_serializerpinres = new JavaScriptSerializer();
                        confirmRes = json_serializerpinres.Deserialize<EbaConfirmRes>(jsonres);

                        if (confirmRes.ErrorCode == "00")
                        {
                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4,
                                    ref5, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl,
                                    isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                            #region <-- Send SMS -->

                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S") //topup type is null or S
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();

                                    smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, ref1Name, ref2Name, string.Empty, "Ref", ref1, ref2, string.Empty, txnID.ToString(), double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                    try
                                    {

                                        writeLog(logAppender + "Mobile No :" + ref5 + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.SendSms(txnID.ToString(), smsMsg, ref5, sendername);
                                        writeLog(logAppender + "sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                        writeLog(logAppender + string.Format("Error in SendSms: {0}", ex.ToString()));
                                    }
                                }

                            }

                            #endregion

                            #region <-- Response Back To Client -->

                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = confirmRes.ErrorCode;
                            confirmres.resdesc = confirmRes.ErrorMessage;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = ref4;
                            confirmres.ref5 = ref5;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref4Name = ref4Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }
                        else
                        {
                            resdecs = Utils.EsbResponseDescription(confirmRes.ErrorCode);
                            return GetErrorResponseWithAddBalance(confirmRes.ErrorCode, confirmRes.ErrorMessage,
                                txnID, resdecs, agentID, agentAmount, isAgreement);
                        }
                    }
                    #endregion

                    #region <-- Anada Eload  Confirm -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["AnadaEloadTaxId"].ToString())
                    {
                        writeLog(logAppender + "This is  Anada Eload  from EBA Confirm");
                        string ebaUrl = ConfigurationManager.AppSettings["AnadaEloadConfirmUrl"].ToString();

                        if (IsTokenNullOrExpire(Token))
                        {
                            Token = GetOAuthToken();
                        }

                        EbaConfirmReq confirmReq = new EbaConfirmReq()
                        {
                            Token = Token.Token,
                            PartnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString(),
                            PartnerRefNo = txnID.ToString(),
                            BillerCode = ConfigurationManager.AppSettings["AnadaEloadBillerCode"].ToString(),
                            TransactionAmount = amount,
                            Detail = "{'SubscriberId':'" + ref1 + "', 'Amount':'" + amount + "'}"
                        };
                        EbaConfirmRes confirmRes = new EbaConfirmRes();

                        var json_serializer1 = new JavaScriptSerializer();
                        string jsonReq = json_serializer1.Serialize(confirmReq);
                        writeLog(logAppender + "EBA Anada Eload  Pay JasonReq:" + jsonReq);

                        SSLPost post = new SSLPost();
                        string jsonres = Utils.PaymentRequest(jsonReq, ebaUrl);
                        writeLog(logAppender + "EBA Anada Eload  Pay JasonRes:" + jsonres);

                        if (string.IsNullOrEmpty(jsonres))
                        {
                            resdecs = "No Response From EBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }

                        var json_serializerpinres = new JavaScriptSerializer();
                        confirmRes = json_serializerpinres.Deserialize<EbaConfirmRes>(jsonres);

                        if (confirmRes.ErrorCode == "00")
                        {
                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4,
                                    ref5, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl,
                                    isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                            #region <-- Response Back To Client -->

                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = confirmRes.ErrorCode;
                            confirmres.resdesc = confirmRes.ErrorMessage;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = "";
                            confirmres.ref3 = "";
                            confirmres.ref4 = "";
                            confirmres.ref5 = "";
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = "";
                            confirmres.ref3Name = "";
                            confirmres.ref4Name = "";
                            confirmres.ref5Name = "";
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }
                        else
                        {
                            resdecs = Utils.EsbResponseDescription(confirmRes.ErrorCode);
                            return GetErrorResponseWithAddBalance(confirmRes.ErrorCode, confirmRes.ErrorMessage,
                                txnID, resdecs, agentID, agentAmount, isAgreement);
                        }
                    }
                    #endregion

                    #region <-- MptMoney Confirm -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["MptMoneyTaxId"].ToString())
                    {
                        writeLog(logAppender + "This is MptMoney from EBA Confirm");
                        string ebaUrl = ConfigurationManager.AppSettings["MptMoneyConfirmUrl"].ToString();

                        if (IsTokenNullOrExpire(Token))
                        {
                            Token = GetOAuthToken();
                        }

                        EbaConfirmReq confirmReq = new EbaConfirmReq()
                        {
                            Token = Token.Token,
                            PartnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString(),
                            PartnerRefNo = txnID.ToString(),
                            BillerCode = ConfigurationManager.AppSettings["MptMoneyBillerCode"].ToString(),
                            TransactionAmount = amount,
                            Detail = "{'Amount':'" + amount + "', 'MobileNumber':'" + ref1 + "'}"
                        };
                        EbaConfirmRes confirmRes = new EbaConfirmRes();

                        var json_serializer1 = new JavaScriptSerializer();
                        string jsonReq = json_serializer1.Serialize(confirmReq);
                        writeLog(logAppender + "EBA MptMoney JasonReq:" + jsonReq);

                        SSLPost post = new SSLPost();
                        string jsonres = Utils.PaymentRequest(jsonReq, ebaUrl);
                        writeLog(logAppender + "EBA MptMoney JasonRes:" + jsonres);

                        if (string.IsNullOrEmpty(jsonres))
                        {
                            resdecs = "No Response From EBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }

                        var json_serializerpinres = new JavaScriptSerializer();
                        confirmRes = json_serializerpinres.Deserialize<EbaConfirmRes>(jsonres);

                        if (confirmRes.ErrorCode == "00")
                        {
                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4,
                                    ref5, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl,
                                    isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                            #region <-- Response Back To Client -->

                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = confirmRes.ErrorCode;
                            confirmres.resdesc = confirmRes.ErrorMessage;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = ref4;
                            confirmres.ref5 = ref5;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref4Name = ref4Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }
                        else
                        {
                            resdecs = Utils.EsbResponseDescription(confirmRes.ErrorCode);
                            return GetErrorResponseWithAddBalance(confirmRes.ErrorCode, confirmRes.ErrorMessage,
                                txnID, resdecs, agentID, agentAmount, isAgreement);
                        }
                    }
                    #endregion

                    #region <-- CitizenPay CashIn Confirm -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["CitizenPayTaxId"].ToString())
                    {
                        writeLog(logAppender + "This is CitizenPay CashinIn from EBA Confirm");
                        string ebaUrl = ConfigurationManager.AppSettings["CitizenPayConfirmUrl"].ToString();
                        string mobileNumber = ref1;
                        if (mobileNumber.StartsWith("09"))
                        {
                            mobileNumber = "959" + mobileNumber.Remove(0, 2);
                        }

                        if (IsTokenNullOrExpire(Token))
                        {
                            Token = GetOAuthToken();
                        }

                        EbaConfirmReq confirmReq = new EbaConfirmReq()
                        {
                            Token = Token.Token,
                            PartnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString(),
                            PartnerRefNo = txnID.ToString(),
                            BillerCode = ConfigurationManager.AppSettings["CitizenPayBillerCode"].ToString(),
                            TransactionAmount = amount,
                            Detail = "{'Amount':'" + amount + "', 'MobileNumber':'" + mobileNumber + "', 'Remark':'" + string.Format("NearMe") + "'}"
                        };
                        EbaConfirmRes confirmRes = new EbaConfirmRes();

                        var json_serializer1 = new JavaScriptSerializer();
                        string jsonReq = json_serializer1.Serialize(confirmReq);
                        writeLog(logAppender + "EBA CitizenPay CashIn JasonReq:" + jsonReq);

                        SSLPost post = new SSLPost();
                        string jsonres = Utils.PaymentRequest(jsonReq, ebaUrl);
                        writeLog(logAppender + "EBA CitizenPay CashIn JasonRes:" + jsonres);

                        if (string.IsNullOrEmpty(jsonres))
                        {
                            resdecs = "No Response From EBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }

                        var json_serializerpinres = new JavaScriptSerializer();
                        confirmRes = json_serializerpinres.Deserialize<EbaConfirmRes>(jsonres);

                        if (confirmRes.ErrorCode == "00")
                        {
                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4,
                                    ref5, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl,
                                    isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                            #region <-- Response Back To Client -->

                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = confirmRes.ErrorCode;
                            confirmres.resdesc = confirmRes.ErrorMessage;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = ref4;
                            confirmres.ref5 = ref5;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref4Name = ref4Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }
                        else
                        {
                            resdecs = Utils.EsbResponseDescription(confirmRes.ErrorCode);
                            return GetErrorResponseWithAddBalance(confirmRes.ErrorCode, confirmRes.ErrorMessage,
                                txnID, resdecs, agentID, agentAmount, isAgreement);
                        }
                    }
                    #endregion

                    #region <-- TrueNet Confirm -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["TrueNetTaxId"].ToString())
                    {
                        writeLog(logAppender + "This is TrueNet from EBA Confirm");
                        string ebaUrl = ConfigurationManager.AppSettings["TrueNetConfirmUrl"].ToString();

                        if (IsTokenNullOrExpire(Token))
                        {
                            Token = GetOAuthToken();
                        }

                        EbaConfirmReq confirmReq = new EbaConfirmReq()
                        {
                            Token = Token.Token,
                            PartnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString(),
                            PartnerRefNo = txnID.ToString(),
                            BillerCode = ConfigurationManager.AppSettings["TrueNetBillerCode"].ToString(),
                            TransactionAmount = amount,
                            Detail = "{'CustomerName':'" + ref3 + "', 'CustomerCode':'" + ref2 + "', 'PhoneNumber':'" + ref1 + "', 'Amount':'" + amount + "'}"
                        };
                        EbaConfirmRes confirmRes = new EbaConfirmRes();

                        var json_serializer1 = new JavaScriptSerializer();
                        string jsonReq = json_serializer1.Serialize(confirmReq);
                        writeLog(logAppender + "EBA TrueNet JasonReq:" + jsonReq);

                        SSLPost post = new SSLPost();
                        string jsonres = Utils.PaymentRequest(jsonReq, ebaUrl);
                        writeLog(logAppender + "EBA TrueNet JasonRes:" + jsonres);

                        if (string.IsNullOrEmpty(jsonres))
                        {
                            resdecs = "No Response From EBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }

                        var json_serializerpinres = new JavaScriptSerializer();
                        confirmRes = json_serializerpinres.Deserialize<EbaConfirmRes>(jsonres);

                        if (confirmRes.ErrorCode == "00")
                        {
                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4,
                                    ref5, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl,
                                    isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                            #region <-- Send SMS -->

                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S") //topup type is null or S
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();

                                    smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, "", ref2Name, ref3Name, "Ref", "", ref2, ref3, txnID.ToString(), double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                    try
                                    {

                                        writeLog(logAppender + "Mobile No :" + ref5 + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.SendSms(txnID.ToString(), smsMsg, ref5, sendername);
                                        writeLog(logAppender + "sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                        writeLog(logAppender + string.Format("Error in SendSms: {0}", ex.ToString()));
                                    }
                                }
                            }

                            #endregion

                            #region <-- Response Back To Client -->

                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = confirmRes.ErrorCode;
                            confirmres.resdesc = confirmRes.ErrorMessage;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = ref4;
                            confirmres.ref5 = ref5;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref4Name = ref4Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }
                        else
                        {
                            resdecs = Utils.EsbResponseDescription(confirmRes.ErrorCode);
                            return GetErrorResponseWithAddBalance(confirmRes.ErrorCode, confirmRes.ErrorMessage,
                                txnID, resdecs, agentID, agentAmount, isAgreement);
                        }
                    }
                    #endregion

                    #region <-- QuicKyat Confirm -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["QuicKyatTaxId"].ToString())
                    {
                        writeLog(logAppender + "This is QuicKyat from EBA Confirm");
                        string ebaUrl = ConfigurationManager.AppSettings["QuicKyatConfirmUrl"].ToString();

                        if (IsTokenNullOrExpire(Token))
                        {
                            Token = GetOAuthToken();
                        }

                        EbaConfirmReq confirmReq = new EbaConfirmReq()
                        {
                            Token = Token.Token,
                            PartnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString(),
                            PartnerRefNo = txnID.ToString(),
                            BillerCode = ConfigurationManager.AppSettings["QuicKyatBillerCode"].ToString(),
                            TransactionAmount = amount,
                            Detail = "{'AccountId':'" + ref1 + "', 'MobileNumber':'" + ref5 + "', 'Amount':'" + amount + "'}"
                        };
                        EbaConfirmRes confirmRes = new EbaConfirmRes();

                        var json_serializer1 = new JavaScriptSerializer();
                        string jsonReq = json_serializer1.Serialize(confirmReq);
                        writeLog(logAppender + "EBA QuicKyat JasonReq:" + jsonReq);

                        SSLPost post = new SSLPost();
                        string jsonres = Utils.PaymentRequest(jsonReq, ebaUrl);
                        writeLog(logAppender + "EBA QuicKyat JasonRes:" + jsonres);

                        if (string.IsNullOrEmpty(jsonres))
                        {
                            resdecs = "No Response From EBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }

                        var json_serializerpinres = new JavaScriptSerializer();
                        confirmRes = json_serializerpinres.Deserialize<EbaConfirmRes>(jsonres);

                        if (confirmRes.ErrorCode == "00")
                        {
                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4,
                                    ref5, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl,
                                    isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                            #region <-- Send SMS -->

                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S") //topup type is null or S
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();

                                    smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, ref1Name, ref2Name, "", "Ref", ref1, ref2, "", txnID.ToString(), double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                    try
                                    {

                                        writeLog(logAppender + "Mobile No :" + ref5 + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.SendSms(txnID.ToString(), smsMsg, ref5, sendername);
                                        writeLog(logAppender + "sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                        writeLog(logAppender + string.Format("Error in SendSms: {0}", ex.ToString()));
                                    }
                                }
                            }

                            #endregion

                            #region <-- Response Back To Client -->

                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = confirmRes.ErrorCode;
                            confirmres.resdesc = confirmRes.ErrorMessage;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = ref4;
                            confirmres.ref5 = ref5;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = string.Empty;
                            confirmres.ref4Name = ref4Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }
                        else
                        {
                            resdecs = Utils.EsbResponseDescription(confirmRes.ErrorCode);
                            return GetErrorResponseWithAddBalance(confirmRes.ErrorCode, confirmRes.ErrorMessage,
                                txnID, resdecs, agentID, agentAmount, isAgreement);
                        }
                    }
                    #endregion

                    #region <-- CookieTV -->

                    else if (MapTaxID == ConfigurationManager.AppSettings["CookieTVTaxId"].ToString())
                    {
                        writeLog(logAppender + "This is CookieTV from EBA");

                        var billerCode = GetBillerCode(MapTaxID);
                        var ebaAmount = Convert.ToDouble(ref2);

                        var ebaResponse = ConfirmGiftCard(txnID.ToString(), ebaAmount, billerCode).Result;

                        if (ebaResponse == null)
                        {
                            resdecs = "No Response From EBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }

                        if (ebaResponse.TransactionStatus == "0")
                        {
                            #region <-- Update Transaction -->
                            var detail = JsonConvert.DeserializeObject<Detail>(ebaResponse.Detail);

                            string aesKey = string.Empty;
                            aesKey = ConfigurationManager.AppSettings["EsbaAesKey"].ToString();
                            detail.ClearPin = Utils.AESDecryptText(detail.ClearPin, aesKey);
                            ref2 = detail.Deno;
                            ref5 = ref3;//ref3 is mobileNo
                            ref3 = detail.SerialNumber;
                            ref4 = detail.ClearPin + " " + detail.ExpiryDate;

                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4, ref5, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            #endregion

                            #region <-- Send SMS -->

                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S")
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();

                                    smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, "Code", "Expiry", "", "Ref", detail.ClearPin, detail.ExpiryDate, "", txnID.ToString(), double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                    try
                                    {
                                        writeLog(logAppender + "Mobile No :" + ref5 + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.SendSms(txnID.ToString(), smsMsg, ref5, sendername);
                                        writeLog(logAppender + "sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                    }
                                }
                            }

                            #endregion

                            #region <-- Response Back To Client -->

                            rescode = "00";
                            resdecs = "Success";
                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = rescode;
                            confirmres.resdesc = resdecs;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = ref4;
                            confirmres.ref5 = ref5;
                            confirmres.ref6 = Utils.ReplaceAmpersandString(imgnrc);
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref4Name = ref4Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }

                        else
                        {
                            return GetErrorResponseWithAddBalance(ebaResponse.ErrorCode.ToString(),
                                ebaResponse.ErrorMessage, txnID, resdecs, agentID, agentAmount,
                                isAgreement);
                        }
                    }

                    #endregion

                    #region <-- WinFinance Confirm -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["WinFinanceTaxId"].ToString())
                    {
                        writeLog(logAppender + "This is WinFinance from EBA Confirm");
                        string ebaUrl = ConfigurationManager.AppSettings["WinFinanceConfirmUrl"].ToString();

                        if (IsTokenNullOrExpire(Token))
                        {
                            Token = GetOAuthToken();
                        }

                        EbaConfirmReq confirmReq = new EbaConfirmReq()
                        {
                            Token = Token.Token,
                            PartnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString(),
                            PartnerRefNo = txnID.ToString(),
                            BillerCode = ConfigurationManager.AppSettings["WinFinanceBillerCode"].ToString(),
                            TransactionAmount = amount,
                            Detail = "{'CustomerId':'" + ref1 + "', 'Amount':'" + amount + "' ,'Name':'" + ref2 + "' ,'NRC':'-' ,'MobileNumber':'" + ref3 + "'}"
                        };
                        EbaConfirmRes confirmRes = new EbaConfirmRes();

                        var json_serializer1 = new JavaScriptSerializer();
                        string jsonReq = json_serializer1.Serialize(confirmReq);
                        writeLog(logAppender + "EBA WinFinance JasonReq:" + jsonReq);

                        SSLPost post = new SSLPost();
                        string jsonres = Utils.PaymentRequest(jsonReq, ebaUrl);
                        writeLog(logAppender + "EBA WinFinance JasonRes:" + jsonres);

                        if (string.IsNullOrEmpty(jsonres))
                        {
                            resdecs = "No Response From EBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }

                        var json_serializerpinres = new JavaScriptSerializer();
                        confirmRes = json_serializerpinres.Deserialize<EbaConfirmRes>(jsonres);

                        if (confirmRes.ErrorCode == "00")
                        {
                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4,
                                    ref5, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl,
                                    isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                            #region <-- Send SMS -->

                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S") //topup type is null or S
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();

                                    smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, ref1Name, ref2Name, string.Empty, "Ref", ref1, ref2, string.Empty, txnID.ToString(), double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                    try
                                    {

                                        writeLog(logAppender + "Mobile No :" + ref5 + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.SendSms(txnID.ToString(), smsMsg, ref5, sendername);
                                        writeLog(logAppender + "sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                        writeLog(logAppender + string.Format("Error in SendSms: {0}", ex.ToString()));
                                    }
                                }

                            }

                            #endregion

                            #region <-- Response Back To Client -->

                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = confirmRes.ErrorCode;
                            confirmres.resdesc = confirmRes.ErrorMessage;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = ref4;
                            confirmres.ref5 = ref5;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = string.Empty;
                            confirmres.ref4Name = ref4Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }
                        else
                        {
                            resdecs = Utils.EsbResponseDescription(confirmRes.ErrorCode);
                            return GetErrorResponseWithAddBalance(confirmRes.ErrorCode, confirmRes.ErrorMessage,
                                txnID, resdecs, agentID, agentAmount, isAgreement);
                        }
                    }
                    #endregion

                    #region <-- XBox One Confirm -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["XBoxOneTaxId"].ToString())
                    {
                        writeLog(logAppender + "This is XBox One from EBA Confirm");
                        string ebaUrl = ConfigurationManager.AppSettings["XBoxOneConfirmUrl"].ToString();

                        ref2 = new String(ref2.Where(Char.IsDigit).ToArray());

                        if (IsTokenNullOrExpire(Token))
                        {
                            Token = GetOAuthToken();
                        }

                        EbaConfirmReq confirmReq = new EbaConfirmReq()
                        {
                            Token = Token.Token,
                            PartnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString(),
                            PartnerRefNo = txnID.ToString(),
                            BillerCode = ConfigurationManager.AppSettings["XBoxOneBillerCode"].ToString(),
                            TransactionAmount = amount,
                            Detail = "{'ProductCode':'" + ref5 + "', 'Amount':'" + ref2 + "'}"
                        };
                        EbaConfirmRes confirmRes = new EbaConfirmRes();

                        var json_serializer1 = new JavaScriptSerializer();
                        string jsonReq = json_serializer1.Serialize(confirmReq);
                        writeLog(logAppender + "EBA XBox One JasonReq:" + jsonReq);

                        SSLPost post = new SSLPost();
                        string jsonres = Utils.PaymentRequest(jsonReq, ebaUrl);
                        writeLog(logAppender + "EBA XBox One JasonRes:" + jsonres);

                        if (string.IsNullOrEmpty(jsonres))
                        {
                            resdecs = "No Response From EBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }

                        var json_serializerpinres = new JavaScriptSerializer();
                        confirmRes = json_serializerpinres.Deserialize<EbaConfirmRes>(jsonres);

                        if (confirmRes.ErrorCode == "00")
                        {
                            #region <-- Update Transaction -->
                            var detail = JsonConvert.DeserializeObject<Detail>(confirmRes.Detail);

                            ref5 = ref3;
                            ref3 = detail.SerialNumber;
                            ref4 = string.Format("{0} {1}", detail.ClearPin, string.IsNullOrEmpty(detail.ExpiryDate) ? "-" : detail.ExpiryDate);

                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4,
                                    ref5, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl,
                                    isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                            #endregion

                            #region <-- Send SMS -->

                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S") //topup type is null or S
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();

                                    smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, "Code", "Expiry", "", "Ref", detail.ClearPin, string.IsNullOrEmpty(detail.ExpiryDate) ? "-" : detail.ExpiryDate, "", txnID.ToString(), double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                    try
                                    {
                                        writeLog(logAppender + "Mobile No :" + ref5 + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.SendSms(txnID.ToString(), smsMsg, ref5, sendername);
                                        writeLog(logAppender + "sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                        writeLog(logAppender + string.Format("Error in SendSms: {0}", ex.ToString()));
                                    }
                                }

                            }

                            #endregion

                            #region <-- Response Back To Client -->

                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = confirmRes.ErrorCode;
                            confirmres.resdesc = confirmRes.ErrorMessage;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = ref4;
                            confirmres.ref5 = ref5;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref4Name = ref4Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }
                        else
                        {
                            resdecs = Utils.EsbResponseDescription(confirmRes.ErrorCode);
                            return GetErrorResponseWithAddBalance(confirmRes.ErrorCode, confirmRes.ErrorMessage,
                                txnID, resdecs, agentID, agentAmount, isAgreement);
                        }
                    }
                    #endregion

                    #region <-- Flexible Pass -->

                    else if (MapTaxID == ConfigurationManager.AppSettings["FlexiblePassTaxId"].ToString())
                    {
                        writeLog(logAppender + "This is Flexible Pass from EBA");

                        var billerCode = GetBillerCode(MapTaxID);
                        var ebaAmount = Convert.ToDouble(ref2);

                        var ebaResponse = ConfirmGiftCard(txnID.ToString(), ebaAmount, billerCode).Result;

                        if (ebaResponse == null)
                        {
                            resdecs = "No Response From EBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }

                        if (ebaResponse.TransactionStatus == "0")
                        {
                            #region <-- Update Transaction -->
                            var detail = JsonConvert.DeserializeObject<Detail>(ebaResponse.Detail);

                            string aesKey = string.Empty;
                            aesKey = ConfigurationManager.AppSettings["EsbaAesKey"].ToString();
                            detail.ClearPin = Utils.AESDecryptText(detail.ClearPin, aesKey);
                            ref2 = detail.Deno;
                            ref5 = ref3;//ref3 is mobileNo
                            ref3 = detail.SerialNumber;
                            ref4 = detail.ClearPin + " " + detail.ExpiryDate;

                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4, ref5, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            #endregion

                            #region <-- Send SMS -->

                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S")
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();

                                    smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, "Code", "Expiry", "", "Ref", detail.ClearPin, detail.ExpiryDate, "", txnID.ToString(), double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                    try
                                    {
                                        writeLog(logAppender + "Mobile No :" + ref5 + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.SendSms(txnID.ToString(), smsMsg, ref5, sendername);
                                        writeLog(logAppender + "sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                    }
                                }
                            }

                            #endregion

                            #region <-- Response Back To Client -->

                            rescode = "00";
                            resdecs = "Success";
                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = rescode;
                            confirmres.resdesc = resdecs;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = ref4;
                            confirmres.ref5 = ref5;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref4Name = ref4Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }

                        else
                        {
                            return GetErrorResponseWithAddBalance(ebaResponse.ErrorCode.ToString(),
                                ebaResponse.ErrorMessage, txnID, resdecs, agentID, agentAmount,
                                isAgreement);
                        }
                    }

                    #endregion

                    #region <-- PlayStation Network Confirm -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["PlayStationNetworkTaxId"].ToString())
                    {
                        writeLog(logAppender + "This is PlayStation Network from EBA Confirm");
                        string ebaUrl = ConfigurationManager.AppSettings["PlayStationNetworkConfirmUrl"].ToString();

                        ref2 = new String(ref2.Where(Char.IsDigit).ToArray());

                        if (IsTokenNullOrExpire(Token))
                        {
                            Token = GetOAuthToken();
                        }

                        EbaConfirmReq confirmReq = new EbaConfirmReq()
                        {
                            Token = Token.Token,
                            PartnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString(),
                            PartnerRefNo = txnID.ToString(),
                            BillerCode = ConfigurationManager.AppSettings["PlayStationNetworkBillerCode"].ToString(),
                            TransactionAmount = amount,
                            Detail = "{'ProductCode':'" + ref5 + "', 'Amount':'" + ref2 + "'}"
                        };
                        EbaConfirmRes confirmRes = new EbaConfirmRes();

                        var json_serializer1 = new JavaScriptSerializer();
                        string jsonReq = json_serializer1.Serialize(confirmReq);
                        writeLog(logAppender + "EBA PlayStation Network JasonReq:" + jsonReq);

                        SSLPost post = new SSLPost();
                        string jsonres = Utils.PaymentRequest(jsonReq, ebaUrl);
                        writeLog(logAppender + "EBA PlayStation Network JasonRes:" + jsonres);

                        if (string.IsNullOrEmpty(jsonres))
                        {
                            resdecs = "No Response From EBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }

                        var json_serializerpinres = new JavaScriptSerializer();
                        confirmRes = json_serializerpinres.Deserialize<EbaConfirmRes>(jsonres);

                        if (confirmRes.ErrorCode == "00")
                        {
                            #region <-- Update Transaction -->
                            var detail = JsonConvert.DeserializeObject<Detail>(confirmRes.Detail);

                            ref5 = ref3;
                            ref3 = detail.SerialNumber;
                            ref4 = string.Format("{0} {1}", detail.ClearPin, string.IsNullOrEmpty(detail.ExpiryDate) ? "-" : detail.ExpiryDate);

                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4,
                                    ref5, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl,
                                    isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                            #endregion

                            #region <-- Send SMS -->

                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S") //topup type is null or S
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();

                                    smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, "Code", "Expiry", "", "Ref", detail.ClearPin, string.IsNullOrEmpty(detail.ExpiryDate) ? "-" : detail.ExpiryDate, "", txnID.ToString(), double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                    try
                                    {
                                        writeLog(logAppender + "Mobile No :" + ref5 + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.SendSms(txnID.ToString(), smsMsg, ref5, sendername);
                                        writeLog(logAppender + "sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                        writeLog(logAppender + string.Format("Error in SendSms: {0}", ex.ToString()));
                                    }
                                }

                            }

                            #endregion

                            #region <-- Response Back To Client -->

                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = confirmRes.ErrorCode;
                            confirmres.resdesc = confirmRes.ErrorMessage;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = ref4;
                            confirmres.ref5 = ref5;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref4Name = ref4Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }
                        else
                        {
                            resdecs = Utils.EsbResponseDescription(confirmRes.ErrorCode);
                            return GetErrorResponseWithAddBalance(confirmRes.ErrorCode, confirmRes.ErrorMessage,
                                txnID, resdecs, agentID, agentAmount, isAgreement);
                        }
                    }
                    #endregion

                    #region <-- Yadanarpon Teleport Confirm -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["YadanarponTeleportTaxId"])
                    {
                        writeLog(logAppender + "This is  Yadanarpon Teleport from EBA Confirm");
                        string ebaUrl = ConfigurationManager.AppSettings["YadanarponTeleportConfirmUrl"].ToString();
                        string regionCode = ConfigurationManager.AppSettings["YTPRegionCode"];

                        if (IsTokenNullOrExpire(Token))
                        {
                            Token = GetOAuthToken();
                        }
                        string detail = string.Empty;
                        bool isMonthly = false;
                        if (!string.IsNullOrEmpty(ref1) && ref1 == ConfigurationManager.AppSettings["YTPMonthlyBillType"])
                        {
                            isMonthly = true;
                            detail = "{'BillType':'" + ref1 + "', 'RegionCode':'" + regionCode + "', 'CustomerBillingId':'" + ref2 + "', 'InvoiceNumber':'" + ref3 + "', 'ContactNo':'" + ref5 + "', 'Remark':''}";
                        }
                        else
                        {
                            detail = "{'BillType':'" + ref1 + "', 'RegionCode':'" + regionCode + "', 'CustomerBillingId':'" + ref2 + "', 'CustomerName':'" + ref4 + "', 'ContactNo':'" + ref5 + "', 'Amount':'" + amount + "', 'Remark':''}";
                        }
                        EbaConfirmReq confirmReq = new EbaConfirmReq()
                        {
                            Token = Token.Token,
                            PartnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString(),
                            PartnerRefNo = txnID.ToString(),
                            BillerCode = ConfigurationManager.AppSettings["YadanarponTeleportBillerCode"].ToString(),
                            TransactionAmount = amount,
                            Detail = detail
                        };
                        EbaConfirmRes confirmRes = new EbaConfirmRes();

                        var json_serializer1 = new JavaScriptSerializer();
                        string jsonReq = json_serializer1.Serialize(confirmReq);
                        writeLog(logAppender + "EBA Yadanarpon Teleport JasonReq:" + jsonReq);

                        SSLPost post = new SSLPost();
                        string jsonres = Utils.PaymentRequest(jsonReq, ebaUrl);
                        writeLog(logAppender + "EBA Yadanarpon Teleport JasonRes:" + jsonres);

                        if (string.IsNullOrEmpty(jsonres))
                        {
                            resdecs = "No Response From EBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }

                        var json_serializerpinres = new JavaScriptSerializer();
                        confirmRes = json_serializerpinres.Deserialize<EbaConfirmRes>(jsonres);

                        if (confirmRes.ErrorCode == "00")
                        {
                            YadanarponTeleportDetail detailRes = JsonConvert.DeserializeObject<YadanarponTeleportDetail>(confirmRes.Detail);
                            ref4 = detailRes.CustomerName;

                            #region <-- Update Transaction -->

                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4,
                                    ref5, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl,
                                    isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                            #endregion

                            #region <-- Send SMS -->

                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S") //topup type is null or S
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();

                                    smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, ref1Name, ref4Name, "", "Ref", ref1, ref4, "", txnID.ToString(), double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                    try
                                    {
                                        writeLog(logAppender + "Mobile No :" + ref5 + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.SendSms(txnID.ToString(), smsMsg, ref5, sendername);
                                        writeLog(logAppender + "sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                        writeLog(logAppender + string.Format("Error in SendSms: {0}", ex.ToString()));
                                    }
                                }

                            }

                            #endregion

                            #region <-- Response Back To Client -->

                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = confirmRes.ErrorCode;
                            confirmres.resdesc = confirmRes.ErrorMessage;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = ref4;
                            confirmres.ref5 = ref5;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            if (isMonthly)
                            {
                                confirmres.ref3Name = ref3Name;
                            }
                            else
                            {
                                confirmres.ref3Name = string.Empty;
                            }
                            confirmres.ref4Name = ref4Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }
                        else
                        {
                            resdecs = Utils.EsbResponseDescription(confirmRes.ErrorCode);
                            return GetErrorResponseWithAddBalance(confirmRes.ErrorCode, confirmRes.ErrorMessage,
                                txnID, resdecs, agentID, agentAmount, isAgreement);
                        }
                    }
                    #endregion

                    #region <-- Marga Global Telecom -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["MargaGlobalTaxID"])
                    {
                        writeLog(logAppender + "This is Marga Global from EBA Confirm");
                        string ebaUrl = ConfigurationManager.AppSettings["EbaConfirmUrl"].ToString();

                        if (IsTokenNullOrExpire(Token))
                        {
                            Token = GetOAuthToken();
                        }

                        var confirmReq = new EbaConfirmReq()
                        {
                            Token = Token.Token,
                            PartnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString(),
                            PartnerRefNo = txnID.ToString(),
                            BillerCode = ConfigurationManager.AppSettings["MargaGlobalBillerCode"].ToString(),
                            TransactionAmount = amount,
                            Detail = "{'BillNumber':'" + ref1 + "', 'CustomerId':'" + ref2 + "', 'CustomerName':'" + ref3 + "', 'Amount':'" + amount + "'}"
                        };
                        EbaConfirmRes confirmRes = new EbaConfirmRes();

                        var json_serializer1 = new JavaScriptSerializer();
                        string jsonReq = json_serializer1.Serialize(confirmReq);
                        writeLog(logAppender + "EBA Marga Global JasonReq:" + jsonReq);

                        SSLPost post = new SSLPost();
                        string jsonres = Utils.PaymentRequest(jsonReq, ebaUrl);
                        writeLog(logAppender + "EBA Marga Global JasonRes:" + jsonres);

                        if (string.IsNullOrEmpty(jsonres))
                        {
                            resdecs = "No Response From EBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }

                        var json_serializerpinres = new JavaScriptSerializer();
                        confirmRes = json_serializerpinres.Deserialize<EbaConfirmRes>(jsonres);

                        if (confirmRes.ErrorCode == "00")
                        {
                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4,
                                    ref5, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl,
                                    isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                            #region <-- Send SMS -->

                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S") //topup type is null or S
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();

                                    smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, "", ref2Name, ref3Name, "Ref", "", ref2, ref3, txnID.ToString(), double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                    try
                                    {

                                        writeLog(logAppender + "Mobile No :" + ref5 + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.SendSms(txnID.ToString(), smsMsg, ref5, sendername);
                                        writeLog(logAppender + "sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                        writeLog(logAppender + string.Format("Error in SendSms: {0}", ex.ToString()));
                                    }
                                }
                            }

                            #endregion

                            #region <-- Response Back To Client -->

                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = confirmRes.ErrorCode;
                            confirmres.resdesc = confirmRes.ErrorMessage;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = ref4;
                            confirmres.ref5 = ref5;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref4Name = ref4Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }
                        else
                        {
                            resdecs = Utils.EsbResponseDescription(confirmRes.ErrorCode);
                            return GetErrorResponseWithAddBalance(confirmRes.ErrorCode, confirmRes.ErrorMessage,
                                txnID, resdecs, agentID, agentAmount, isAgreement);
                        }
                    }
                    #endregion

                    #region <-- Smile Cinema Movie -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["SmileCinemaTaxId"].ToString())
                    {
                        Utils.WriteLog_Biller(logAppender + "Smile Cinema Movie Confirm Start");
                        ConfirmResponseModel confirmres = new ConfirmResponseModel();
                        confirmres.taxID = taxID;
                        confirmres.email = email;
                        confirmres.password = password;
                        confirmres.messageid = messageid;
                        confirmres.billername = billerName;
                        confirmres.billerlogo = billerLogo;
                        confirmres.ref1 = ref1;
                        confirmres.ref2 = ref2;
                        confirmres.ref3 = ref3;
                        confirmres.ref4 = ref4;
                        confirmres.ref5 = ref5;
                        confirmres.ref1Name = ref1Name;
                        confirmres.ref2Name = ref2Name;
                        confirmres.ref3Name = ref3Name;
                        confirmres.ref4Name = ref4Name;
                        confirmres.ref5Name = ref5Name;
                        confirmres.availablebalance = availablebalance.ToString();
                        confirmres.txnID = txnID.ToString();
                        confirmres.TodayTxnAmount = TodayTxnAmount;
                        confirmres.TodayTxnCount = TodayTxnCount;
                        confirmres.smsMsg = smsMsg;

                        Utils.WriteLog_Biller(logAppender + "Smile Cinema Movie Confirm Response Initiated");
                        return (new SmileCinemaManager()).ConfrimToEBA(confirmres, amount, agentID, txnID, agentAmount, isAgreement, agentFeeDbl, smsStatus,
                            availablebalance, appType, topupType, agentName, MapTaxID, serviceFee, totalAmount, branchCode, sendername);
                    }
                    #endregion

                    #region Mobile Legend Confirm
                    else if (MapTaxID == ConfigurationManager.AppSettings["MobileLegendTaxID"].ToString())
                    {
                        Utils.WriteLog_Biller(logAppender + "Mobile Legend Confirm Start");
                        ConfirmResponseModel confirmres = new ConfirmResponseModel();
                        confirmres.taxID = taxID;
                        confirmres.email = email;
                        confirmres.password = password;
                        confirmres.messageid = messageid;
                        confirmres.billername = billerName;
                        confirmres.billerlogo = billerLogo;
                        confirmres.ref1 = ref1;
                        confirmres.ref2 = ref2;
                        confirmres.ref3 = ref3;
                        confirmres.ref4 = ref4;
                        confirmres.ref5 = ref5;
                        confirmres.ref1Name = ref1Name;
                        confirmres.ref2Name = ref2Name;
                        confirmres.ref3Name = ref3Name;
                        confirmres.ref4Name = ref4Name;
                        confirmres.ref5Name = ref5Name;
                        confirmres.availablebalance = availablebalance.ToString();
                        confirmres.txnID = txnID.ToString();
                        confirmres.TodayTxnAmount = TodayTxnAmount;
                        confirmres.TodayTxnCount = TodayTxnCount;
                        confirmres.smsMsg = smsMsg;

                        Utils.WriteLog_Biller(logAppender + "Mobile Legend Confirm Response Initiated");
                        return (new MobileLegendManager()).ConfrimToEBA(confirmres, amount, agentID, txnID, agentAmount, isAgreement, agentFeeDbl, smsStatus,
                            availablebalance, appType, topupType, agentName, MapTaxID, serviceFee, totalAmount, branchCode, sendername);
                    }
                    #endregion

                    #region <-- Gift Category Start From Razer Gold Pin MMK -->

                    else if (!string.IsNullOrEmpty(ConfigurationManager.AppSettings["GiftCagList"].ToString().Split(',').Where(x => x == MapTaxID).FirstOrDefault()))
                    {
                        ConfrimGiftCardRequest request = new ConfrimGiftCardRequest()
                        {
                            TaxId = MapTaxID,
                            TxnId = txnID,
                            Amount = amount,
                            AgentId = agentID,
                            AgentAmount = agentAmount,
                            IsAgreement = isAgreement,
                            MobileNo = mobileNo,
                            Email = email,
                            AgentFee = Convert.ToDouble(agentFeeDbl),
                            AvailableBalance = availablebalance,
                            SMSStatus = smsStatus,
                            AppType = appType,
                            TopupType = topupType,
                            SmsMsg = smsMsg,
                            AgentName = agentName,
                            BillerName = billerName,
                            ServiceFee = serviceFee,
                            TotalAmount = totalAmount,
                            BranchCode = branchCode,
                            SenderName = sendername,
                            Password = password,
                            MessageId = messageid,
                            BillerLogo = billerLogo,
                            Ref1Name = ref1Name,
                            Ref2Name = ref2Name,
                            Ref3Name = ref3Name,
                            Ref4Name = ref4Name,
                            Ref5Name = ref5Name,
                            TodayTxnAmount = TodayTxnAmount,
                            TodayTxnCount = TodayTxnCount,
                            Ref1 = ref1,
                            Ref2 = ref2,
                            Ref3 = ref3,
                            Ref4 = ref4,
                            Ref5 = ref5
                        };

                        ConfirmGiftCagManager confirmGiftCagManager = new ConfirmGiftCagManager();
                        string confirmRes = confirmGiftCagManager.Confirm2GiftCagBiller(request);
                        return confirmRes;
                    }
                    #endregion

                    #region <-- Internet Category Start From Chindwin Net -->

                    else if (!string.IsNullOrEmpty(ConfigurationManager.AppSettings["InternetCagList"].ToString().Split(',').Where(x => x == MapTaxID).FirstOrDefault()))
                    {
                        ConfrimReq request = new ConfrimReq()
                        {
                            TaxId = MapTaxID,
                            TxnId = txnID,
                            Amount = amount,
                            AgentId = agentID,
                            AgentAmount = agentAmount,
                            IsAgreement = isAgreement,
                            MobileNo = mobileNo,
                            Email = email,
                            AgentFee = Convert.ToDouble(agentFeeDbl),
                            AvailableBalance = availablebalance,
                            SMSStatus = smsStatus,
                            //IsSMS= false,
                            AppType = appType,
                            TopupType = topupType,
                            SmsMsg = smsMsg,
                            AgentName = agentName,
                            BillerName = billerName,
                            ServiceFee = serviceFee,
                            TotalAmount = totalAmount,
                            BranchCode = branchCode,
                            SenderName = sendername,
                            Password = password,
                            MessageId = messageid,
                            BillerLogo = billerLogo,
                            Ref1Name = ref1Name,
                            Ref2Name = ref2Name,
                            Ref3Name = ref3Name,
                            Ref4Name = ref4Name,
                            Ref5Name = ref5Name,
                            TodayTxnAmount = TodayTxnAmount,
                            TodayTxnCount = TodayTxnCount,
                            Ref1 = ref1,
                            Ref2 = ref2,
                            Ref3 = ref3,
                            Ref4 = ref4,
                            Ref5 = ref5
                        };

                        ConfirmInternetManager confirmInternetManager = new ConfirmInternetManager();
                        string confirmRes = confirmInternetManager.Confirm2InternetManager(request);
                        return confirmRes;
                    }

                    else if (MapTaxID == ConfigurationManager.AppSettings["WasoLearnTaxId"].ToString())
                    {
                        writeLog(logAppender + "This is Waso Learn");

                        var billerCode = GetBillerCode(MapTaxID);
                        if (TokenManager.IsTokenNullOrExpire(TokenManager.Token))
                        {
                            TokenManager.Token = TokenManager.GetOAuthToken();
                        }
                        EbaConfirmReq confirmReq = new EbaConfirmReq()
                        {
                            Token = TokenManager.Token.Token,
                            PartnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString(),
                            PartnerRefNo = txnID.ToString(),
                            BillerCode = ConfigurationManager.AppSettings["WasoLearnBillerCode"].ToString(),
                            TransactionAmount = amount,
                            Detail = "{'ProductCode':'" + ref2 + "'}"
                        };
                        EbaConfirmRes confirmRes = new EbaConfirmRes();

                        var json_serializer1 = new JavaScriptSerializer();
                        string jsonReq = json_serializer1.Serialize(confirmReq);
                        Utils.WriteLog_Biller(logAppender + messageid + "EBA " + taxID + " JasonReq:" + jsonReq);
                        SSLPost post = new SSLPost();
                        var ebaUrl = ConfigurationManager.AppSettings["EbaConfirmUrl"].ToString();
                        string jsonres = Utils.PaymentRequest(jsonReq, ebaUrl);
                        Utils.WriteLog_Biller(logAppender + messageid + "EBA  " + taxID + " JasonRes:" + jsonres);
                        var ebaResponse = (new JavaScriptSerializer()).Deserialize<EbaConfirmRes>(jsonres);
                        if (ebaResponse == null)
                        {
                            resdecs = "No Response From EBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }

                        if (ebaResponse.TransactionStatus == "0")
                        {
                            #region <-- Update Transaction -->
                            var detail = JsonConvert.DeserializeObject<Detail>(ebaResponse.Detail);

                            string aesKey = string.Empty;
                            aesKey = ConfigurationManager.AppSettings["EsbaAesKey"].ToString();
                            detail.ClearPin = Utils.AESDecryptText(detail.ClearPin, aesKey);
                            ref2 = detail.Deno;
                            //Phone Number
                            ref5 = ref3;
                            ref3 = detail.SerialNumber;
                            ref4 = detail.ClearPin + " " + detail.ExpiryDate;


                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4, ref5, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            #endregion

                            #region <-- Send SMS -->

                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S")
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();

                                    smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, "Code", "Expiry", "", "Ref", detail.ClearPin, detail.ExpiryDate, "", txnID.ToString(), double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                    try
                                    {
                                        writeLog(logAppender + "Mobile No :" + ref5 + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.SendSms(txnID.ToString(), smsMsg, ref5, sendername);
                                        writeLog(logAppender + "sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                    }
                                }
                            }

                            #endregion

                            #region <-- Response Back To Client -->

                            rescode = "00";
                            resdecs = "Success";
                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = rescode;
                            confirmres.resdesc = resdecs;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = ref4;
                            confirmres.ref5 = ref5;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref4Name = ref4Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }

                        else
                        {
                            return GetErrorResponseWithAddBalance(ebaResponse.ErrorCode.ToString(),
                                ebaResponse.ErrorMessage, txnID, resdecs, agentID, agentAmount,
                                isAgreement);
                        }
                    }
                    #endregion

                    #region PUBG
                    else if (MapTaxID == ConfigurationManager.AppSettings["PubgUC"].ToString())
                    {
                        writeLog(logAppender + "This is Pubg");

                        var billerCode = GetBillerCode(MapTaxID);
                        if (TokenManager.IsTokenNullOrExpire(TokenManager.Token))
                        {
                            TokenManager.Token = TokenManager.GetOAuthToken();
                        }
                        EbaConfirmReq confirmReq = new EbaConfirmReq()
                        {
                            Token = TokenManager.Token.Token,
                            PartnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString(),
                            PartnerRefNo = txnID.ToString(),
                            BillerCode = billerCode,
                            TransactionAmount = amount,
                            Detail = "{'ProductCode':'" + ref2 + "'}"
                        };
                        EbaConfirmRes confirmRes = new EbaConfirmRes();

                        var json_serializer1 = new JavaScriptSerializer();
                        string jsonReq = json_serializer1.Serialize(confirmReq);
                        Utils.WriteLog_Biller(logAppender + "EBA " + billerCode + " JasonReq:" + jsonReq);
                        SSLPost post = new SSLPost();
                        var ebaUrl = ConfigurationManager.AppSettings["EbaConfirmUrl"].ToString();
                        string jsonres = Utils.PaymentRequest(jsonReq, ebaUrl);
                        Utils.WriteLog_Biller(logAppender + "EBA  " + billerCode + " JasonRes:" + jsonres);
                        var ebaResponse = (new JavaScriptSerializer()).Deserialize<EbaConfirmRes>(jsonres);
                        if (ebaResponse == null)
                        {
                            resdecs = "No Response From EBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }

                        if (ebaResponse.TransactionStatus == "0")
                        {
                            #region <-- Update Transaction -->
                            var detail = JsonConvert.DeserializeObject<Detail>(ebaResponse.Detail);

                            string aesKey = string.Empty;
                            aesKey = ConfigurationManager.AppSettings["EsbaAesKey"].ToString();
                            detail.ClearPin = Utils.AESDecryptText(detail.ClearPin, aesKey);
                            ref5 = ref3;//Phone Number
                            ref3 = detail.SerialNumber;
                            if (!string.IsNullOrEmpty(detail.ExpiryDate))
                            {
                                ref4 = detail.ClearPin + " " + detail.ExpiryDate;
                            }
                            else
                            {
                                detail.ExpiryDate = "-";
                                ref4 = detail.ClearPin + " " + detail.ExpiryDate;
                            }

                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4, ref5, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog(logAppender + "Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog(logAppender + "Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog(logAppender + "After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            #endregion

                            #region <-- Send SMS -->

                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S")
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();

                                    smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, "Code", "Expiry", "", "Ref", detail.ClearPin, detail.ExpiryDate, "", txnID.ToString(), double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                    try
                                    {
                                        writeLog(logAppender + "Mobile No :" + ref5 + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.SendSms(txnID.ToString(), smsMsg, ref5, sendername);
                                        writeLog(logAppender + "sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                    }
                                }
                            }

                            #endregion

                            #region <-- Response Back To Client -->

                            rescode = "00";
                            resdecs = "Success";
                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = rescode;
                            confirmres.resdesc = resdecs;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = ref4;
                            confirmres.ref5 = ref5;
                            confirmres.ref6 = Utils.ReplaceAmpersandString(imgnrc);
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref4Name = string.Empty;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }

                        else
                        {
                            return GetErrorResponseWithAddBalance(ebaResponse.ErrorCode.ToString(),
                                ebaResponse.ErrorMessage, txnID, resdecs, agentID, agentAmount,
                                isAgreement);
                        }
                    }
                    #endregion

                    #region Mo Mo Microfinance
                    else if (MapTaxID == ConfigurationManager.AppSettings["MoMoFinanceTaxId"].ToString())
                    {

                        Utils.WriteLog_Biller(logAppender + "MoMo finance Confirm Starts");
                        ConfirmResponseModel confirmres = new ConfirmResponseModel();
                        confirmres.taxID = taxID;
                        confirmres.email = email;
                        confirmres.password = password;
                        confirmres.messageid = messageid;
                        confirmres.billername = billerName;
                        confirmres.billerlogo = billerLogo;
                        confirmres.ref1 = ref1;
                        confirmres.ref2 = ref2;
                        confirmres.ref3 = ref3;
                        confirmres.ref4 = ref4;
                        confirmres.ref5 = ref5;
                        confirmres.ref1Name = ref1Name;
                        confirmres.ref2Name = ref2Name;
                        confirmres.ref3Name = ref3Name;
                        confirmres.ref4Name = string.Empty;
                        confirmres.ref5Name = ref5Name;
                        confirmres.availablebalance = availablebalance.ToString();
                        confirmres.txnID = txnID.ToString();
                        confirmres.TodayTxnAmount = TodayTxnAmount;
                        confirmres.TodayTxnCount = TodayTxnCount;
                        confirmres.smsMsg = smsMsg;

                        Utils.WriteLog_Biller(logAppender + "MoMo finance Confirm Response Initiated");
                        return (new MoMoFinanceMananger()).ConfrimToEBA(confirmres, amount, agentID, txnID, agentAmount, isAgreement, agentFeeDbl, smsStatus,
                            availablebalance, appType, topupType, agentName, MapTaxID, serviceFee, totalAmount, branchCode, sendername);
                    }
                    #endregion

                    #region <-- myCanal -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["myCanalTaxId"].ToString())
                    {
                        Utils.WriteLog_Biller(logAppender + "myCanal Confirm Start : messageId : " + messageid);
                        var confirmres = new ConfirmResponseModel
                        {
                            taxID = taxID,
                            email = email,
                            password = password,
                            messageid = messageid,
                            billername = billerName,
                            billerlogo = billerLogo,
                            ref1 = ref1,
                            ref2 = ref2,
                            ref3 = ref3,
                            ref4 = ref4,
                            ref5 = ref5,
                            ref1Name = ref1Name,
                            ref2Name = ref2Name,
                            ref3Name = ref3Name,
                            ref4Name = ref4Name,
                            ref5Name = ref5Name,
                            availablebalance = availablebalance.ToString(),
                            txnID = txnID.ToString(),
                            TodayTxnAmount = TodayTxnAmount,
                            TodayTxnCount = TodayTxnCount,
                            smsMsg = smsMsg
                        };

                        var responseInfo = new ResponseInfo
                        {
                            agentID = agentID,
                            txnID = txnID,
                            agentAmount = agentAmount,
                            isAgreement = isAgreement,
                            agentFeeDbl = agentFeeDbl,
                            smsStatus = smsStatus,
                            availablebalance = availablebalance,
                            appType = appType,
                            topupType = topupType,
                            agentName = agentName,
                            MapTaxID = MapTaxID,
                            serviceFee = serviceFee,
                            totalAmount = totalAmount,
                            branchCode = branchCode,
                            sendername = sendername
                        };
                        Utils.WriteLog_Biller(logAppender + "myCanal Confirm Response Initiated");
                        return (new MyCanalManager()).ConfrimToEBA(confirmres, amount, responseInfo);
                    }
                    #endregion

                    #region Pay Bills
                    else if (MapTaxID == ConfigurationManager.AppSettings["PayBillsTaxId"].ToString())
                    {

                        writeLog("Messageid : " + messageid + " PayBills Confirm.");

                        if (!_agentWCF.InsertTransactionLog(txnID, "ConfirmReq", reqXml, out errMsg))
                        {
                            Utils.WriteLog_Biller("Messageid : " + messageid + " Error in PayBills InsertTransactionLog Req : " + errMsg);
                        }

                        ConfirmResponseModel confirmres = new ConfirmResponseModel();
                        confirmres.taxID = taxID;
                        confirmres.email = email;
                        confirmres.password = password;
                        confirmres.messageid = messageid;
                        confirmres.billername = billerName;
                        confirmres.billerlogo = billerLogo;
                        confirmres.ref1 = ref1;
                        confirmres.ref2 = ref2;
                        confirmres.ref3 = ref3;
                        confirmres.ref4 = ref4;
                        confirmres.ref5 = ref5;//Business Name
                        confirmres.ref1Name = ref1Name;
                        confirmres.ref2Name = string.Empty;
                        confirmres.ref3Name = ref3Name;
                        confirmres.ref4Name = string.Empty;
                        confirmres.ref5Name = string.Empty;
                        confirmres.availablebalance = availablebalance.ToString();
                        confirmres.txnID = txnID.ToString();
                        confirmres.TodayTxnAmount = TodayTxnAmount;
                        confirmres.TodayTxnCount = TodayTxnCount;
                        confirmres.smsMsg = smsMsg;

                        return (new PayBillsManager()).Confrim(confirmres, amount, agentID,
                            txnID, agentAmount, isAgreement, agentFeeDbl, smsStatus,
                            availablebalance, appType, topupType, agentName,
                            MapTaxID, serviceFee, totalAmount, branchCode, sendername,
                            agentUserUniqueID, agentCode);
                    }

                    #endregion

                    #region OK Dollar Cash In | Confirm
                    else if (MapTaxID == ConfigurationManager.AppSettings["OkDollarCashInTaxId"])
                    {
                        writeLog("########## " + messageid + " | Ok Dollar Cash In Confirm - Start ##########");
                        var confirmResponseModel = new ConfirmResponseModel
                        {
                            taxID = taxID,
                            email = email,
                            password = password,
                            messageid = messageid,
                            billername = billerName,
                            billerlogo = billerLogo,
                            ref1 = ref1,
                            ref2 = ref2,
                            ref3 = ref3,
                            ref4 = ref4,
                            ref5 = ref5,
                            ref1Name = ref1Name,
                            ref2Name = ref2Name,
                            ref3Name = ref3Name,
                            ref4Name = ref4Name,
                            ref5Name = ref5Name,
                            availablebalance = availablebalance.ToString(),
                            txnID = txnID.ToString(),
                            TodayTxnAmount = TodayTxnAmount,
                            TodayTxnCount = TodayTxnCount,
                            smsMsg = smsMsg
                        };
                        var responseInfo = new ResponseInfo
                        {
                            agentID = agentID,
                            txnID = txnID,
                            agentAmount = agentAmount,
                            isAgreement = isAgreement,
                            agentFeeDbl = agentFeeDbl,
                            smsStatus = smsStatus,
                            availablebalance = availablebalance,
                            appType = appType,
                            topupType = topupType,
                            agentName = agentName,
                            MapTaxID = MapTaxID,
                            serviceFee = serviceFee,
                            totalAmount = totalAmount,
                            branchCode = branchCode,
                            sendername = sendername
                        };
                        return (new OkDollarCashInManager()).Confirm(confirmResponseModel, responseInfo, amount, messageid);
                    }
                    #endregion

                    #region SMGF
                    else if (MapTaxID == ConfigurationManager.AppSettings["SMGFTaxId"].ToString())
                    {
                        messageid = messageid + " | ";
                        writeLog(messageid + "Start SMGF Confirm.");
                        var confirmres = new ConfirmResponseModel
                        {
                            taxID = taxID,
                            email = email,
                            password = password,
                            messageid = messageid,
                            billername = billerName,
                            billerlogo = billerLogo,
                            ref1 = ref1,
                            ref2 = ref2,
                            ref3 = ref3,
                            ref4 = ref4,
                            ref5 = ref5,
                            ref1Name = ref1Name,
                            ref2Name = ref2Name,
                            ref3Name = ref3Name,
                            ref4Name = ref4Name,
                            ref5Name = ref5Name,
                            availablebalance = availablebalance.ToString(),
                            txnID = txnID.ToString(),
                            TodayTxnAmount = TodayTxnAmount,
                            TodayTxnCount = TodayTxnCount,
                            smsMsg = smsMsg
                        };

                        var responseInfo = new ResponseInfo
                        {
                            agentID = agentID,
                            txnID = txnID,
                            agentAmount = agentAmount,
                            isAgreement = isAgreement,
                            agentFeeDbl = agentFeeDbl,
                            smsStatus = smsStatus,
                            availablebalance = availablebalance,
                            appType = appType,
                            topupType = topupType,
                            agentName = agentName,
                            MapTaxID = MapTaxID,
                            serviceFee = serviceFee,
                            totalAmount = totalAmount,
                            branchCode = branchCode,
                            sendername = sendername
                        };
                        return (new SMGFBillerManager()).Confirm(confirmres, responseInfo, amount);
                    }
                    #endregion
                }
                catch (Exception ex)
                {
                    writeLog(logAppender + "Error in ConfirmToBiller");
                    if (MapTaxID != "7777777777777" && MapTaxID != ConfigurationManager.AppSettings["123RemitCashOut"].ToString() && MapTaxID != "0000000000018" && MapTaxID != "0000000000009" && MapTaxID != "0000000000010" && MapTaxID != "0000000000011" && MapTaxID != "0000000000055")//if not MalarMyaineRedeem,123RemitCashOut , MalarMyaineCodeGenerate , 663 Cashout , MercyCorps Generate,MercyCorpsRedeem will check balance.
                    {
                        writeLog(logAppender + "Error ConfirmToBiller : " + ex.ToString());
                        rescode = "97";
                        resdecs = "BIS API Error";
                        return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                    }

                    else
                    {
                        writeLog(logAppender + "Error ConfirmToBiller : " + ex.ToString());
                        rescode = "97";
                        resdecs = "BIS API Error";
                        return GeterrorResponse(rescode, resdecs, txnID, resdecs);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            writeLog(logAppender + "Error ConfirmToBiller : " + ex.ToString());
            rescode = "97";
            resdecs = "BIS API Error";
            return Utils.getErrorRes(rescode, resdecs);
        }
        return null;
    }

    CreditLimitResultModel isEnoughCreditTermsAndLimit(CreditLimitModel creditLimitMdl)
    {

        CreditLimitResultModel result = new CreditLimitResultModel();
        result.result = false;
        string errmsg;
        #region <-- Check Credit Terms and Condation. -->
        try
        {
            if (!String.IsNullOrEmpty(credittemrstart))
            {
                writeLog("Credit term strt Not NULL/Credit Term Start:" + credittemrstart);
                dtStart = DateTime.Parse(credittemrstart);

                double convertcreditterm = double.Parse(creditterm);
                dtStartplusCreditterm = dtStart.AddDays(convertcreditterm);
            }

            if ((double.Parse(creditlimit) > 0 && double.Parse(creditterm) > 0))
            {
                writeLog("Credit Limit and Credit Terms is grater than 0 creditlimit:" + creditlimit + "|creditterm:" + creditterm);
                if (dtNow < dtStartplusCreditterm)
                {
                    writeLog("Credit Term Not Expired yet currentdate:" + dtNow + "|creditterms:" + dtStartplusCreditterm);

                    avalcredit = double.Parse(creditlimit) - double.Parse(creditLimitMdl.totalAgentAmount);
                    writeLog("avaliable credit:" + avalcredit);
                    if (avalcredit >= agentAmount)
                    {
                        writeLog("Credit Enough = Agent ID : " + agentID.ToString() + "| CreditLimit = " + creditlimit + "| Total Using Amount :" + creditLimitMdl.totalAgentAmount + " | Avaliable Credit : " + avalcredit.ToString());
                        result.result = true;
                    }
                    else
                    {
                        writeLog("Credit Limit Exceeded = Agent ID : " + agentID.ToString() + "| CreditLimit = " + creditlimit + "| Total Using Amount :" + creditLimitMdl.totalAgentAmount + " | Avaliable Credit : " + avalcredit.ToString() + " | Agent Amount :" + agentAmount.ToString());


                        result.rescode = "11";
                        result.resdesc = "Credit Limit Exceeded";
                    }
                }
                else
                {
                    writeLog("Credit Term Expired = Agent ID : " + agentID.ToString() + " | CreditTerm : " + creditterm + " | CreditTermStartDate :" + credittemrstart + " | CurrentDate " + dtNow);

                    if (isAutoCreditReset == "Y")
                    {

                        writeLog("Auto Reset Credit Terms is Yes");
                        if (_agentWCF.resetCredit(this.branchCode, this.agentCode, out errmsg))
                        {
                            writeLog("ResetCreditLimit Success");
                            result.result = true;
                            if (isSendCreditResetEmail == "Y")
                            {

                                Task.Factory.StartNew(() => sendCreditResetEmail(this.agentCode, this.agentName, this.branchCode, creditterm, creditlimit, dtNow.ToShortDateString()));

                            }
                        }
                        else
                        {
                            writeLog("Error in reset Credit Terms" + errmsg);

                            result.rescode = "11";
                            result.resdesc = "Credit Term Expired";

                        }

                    }
                    else
                    {

                        result.rescode = "11";
                        result.resdesc = "Credit Term Expired";
                    }
                }


            }
            else if (double.Parse(creditlimit) > 0 || double.Parse(creditterm) > 0)
            {
                writeLog("Credit Limit OR Credit Terms is grater than 0 creditlimit:" + creditlimit + "|creditterm:" + creditterm);
                if (double.Parse(creditlimit) > 0)
                {
                    writeLog("Credit Limit  is grater than 0 creditlimit:" + creditlimit);
                    avalcredit = double.Parse(creditlimit) - double.Parse(creditLimitMdl.totalAgentAmount);
                    if (avalcredit >= agentAmount)
                    {
                        writeLog("Credit Enough = Agent ID : " + agentID.ToString() + " | Credit : " + avalcredit.ToString());
                        result.result = true;
                    }
                    else
                    {
                        writeLog("Credit Limit Exceeded = Agent ID : " + agentID.ToString() + "| CreditLimit = " + creditlimit + "| Total Using Amount :" + creditLimitMdl.totalAgentAmount + " | Avaliable Credit : " + avalcredit.ToString() + " | Agent Amount :" + agentAmount.ToString());

                        result.rescode = "11";
                        result.resdesc = "Credit Limit Exceeded";

                    }
                }
                else if (double.Parse(creditterm) > 0)
                {
                    writeLog("Credit Credit Terms is grater than 0 creditterm:" + creditterm);
                    if (dtNow < dtStartplusCreditterm)
                    {
                        writeLog("Credit Terms Still avaliable CurrentDate:" + dtNow + "ExpiryDate:" + dtStartplusCreditterm);
                        result.result = true;
                    }
                    else
                    {
                        writeLog("Credit Term Expired = Agent ID : " + agentID.ToString() + " | CreditTerm : " + creditterm + " | CreditTermStartDate :" + credittemrstart + " | CurrentDate " + dtNow);
                        if (isAutoCreditReset == "Y")
                        {
                            writeLog("Auto Reset Credit Terms is Yes");
                            if (_agentWCF.resetCredit(this.branchCode, this.agentCode, out errmsg))
                            {
                                writeLog("ResetCreditLimit Success");
                                result.result = true;
                                if (isSendCreditResetEmail == "Y")
                                {

                                    Task.Factory.StartNew(() => sendCreditResetEmail(this.agentCode, this.agentName, this.branchCode, creditterm, creditlimit, dtNow.ToShortDateString()));

                                }
                            }
                            else
                            {
                                writeLog("Error in reset Credit Terms" + errmsg);
                                result.rescode = "11";
                                result.resdesc = "Credit Term Expired";
                            }

                        }
                        else
                        {
                            result.rescode = "11";
                            result.resdesc = "Credit Term Expired";
                        }
                    }
                }
            }
            else
            {
                result.result = true;
            }
        }
        catch (Exception ex)
        {
            writeLog("Excetpion Occur when Checking Credit Terms and Limit" + ex.ToString());
        }
        return result;
        #endregion
    }

    #region <-- 663 -->
    public Response663 confirmRequestTo663(Request663 request663Data)
    {
        TripleDES tripleDes = new TripleDES();
        string Mpin = string.Empty;
        string requestClearText = string.Empty;
        string encryptedRequestData = string.Empty;
        string agentMobileNo = string.Empty;
        string password = string.Empty;
        if (request663Data.transactionType == ConfigurationManager.AppSettings["663UserInfoPrefix"].ToString())
        {
            agentMobileNo = request663Data.receiverMobileNo.Remove(0, 1);
            password = ConfigurationManager.AppSettings["663InquiryPass"].ToString();
        }
        else
        {
            agentMobileNo = ConfigurationManager.AppSettings["AgentMobileNo"].ToString();
            password = ConfigurationManager.AppSettings["663Password"].ToString();
        }

        string UrlTo663 = ConfigurationManager.AppSettings["663Url"].ToString();
        string clearMpin = agentMobileNo + password;
        request663Data.agentMobileNo = agentMobileNo;
        Mpin = Utils.GenerateSHA256String(clearMpin);
        requestClearText = map663Request(request663Data);
        encryptedRequestData = getEncrypted663RequestData(requestClearText, Mpin);
        string DataToPost = string.Format("source={0}&msg={1}", agentMobileNo, encryptedRequestData);
        SSLPost sslPost = new SSLPost();
        writeLog(" $$ 663 Request string :" + UrlTo663 + "?" + DataToPost);
        string responseString663 = sslPost.postTo663(UrlTo663, DataToPost);
        writeLog(" $$ 663 Response string:" + responseString663);
        Response663 response663 = map663Response(responseString663.Replace("\r", string.Empty).Replace("\n", string.Empty));
        return response663;
    }
    public Response663 map663Response(string responseString663)
    {
        Response663 response663 = new Response663();
        response663.Result = false;
        string[] responseArray;
        if (!string.IsNullOrEmpty(responseString663))
        {
            responseArray = responseString663.Split('|');
            if (responseArray.Count() > 0 && responseArray.Count() == 1)
            {
                response663.Result = false;
                response663.ResponseDescription = responseArray[0];
            }
            else if (responseArray.Count() > 0 && responseArray.Count() == 2)
            {
                if (responseArray[0] == "0")
                {
                    response663.Result = true;
                }
                else
                {
                    response663.Result = false;
                }
                response663.ResponseCode = responseArray[0];
                response663.ResponseDescription = responseArray[1];
            }
            else if (responseArray.Count() > 0 && responseArray.Count() == 3)
            {
                if (responseArray[0] == "0")
                {
                    response663.Result = true;
                }
                else
                {
                    response663.Result = false;
                }
                response663.ResponseCode = responseArray[0];
                response663.ExterResponse = responseArray[1];
                response663.ResponseDescription = responseArray[2];
            }
            else if (responseArray.Count() > 0 && responseArray.Count() == 9)
            {
                if (responseArray[0] == "0" && responseArray[1] == ConfigurationManager.AppSettings["663User"] && responseArray[2] != "INACTIVE")
                {
                    response663.Result = true;
                }
                else
                {
                    response663.Result = false;
                }
                response663.ResponseCode = responseArray[0];
                response663.ExterResponse = responseArray[1];
                response663.ResponseDescription = responseArray[2];
            }
            else if (responseArray.Count() > 0 && responseArray.Count() == 10)
            {
                if (responseArray[0] == "0")
                {
                    response663.Result = true;
                }
                else
                {
                    response663.Result = false;
                }
                response663.ResponseCode = responseArray[0];
                response663.ResponseDescription = responseArray[1];
                response663.AgentCode = responseArray[2];
                response663.AgentName = responseArray[3];
                response663.Amount = responseArray[4];
                response663.RefID = responseArray[5];
                response663.responseCts = responseArray[6];
                response663.RequestCts = responseArray[7];
                response663.ClientType = responseArray[8];
                response663.TransType = responseArray[9];
            }
        }

        return response663;
    }
    public string getEncrypted663RequestData(string clearText, string Mpin)
    {
        TripleDES tripleDes = new TripleDES();
        string encrypted663RequestData = string.Empty;
        writeLog("$$ 663 Clear Request String:" + clearText + "|Mpin:" + Mpin);
        encrypted663RequestData = tripleDes.get3DESEncryptedMessage1(clearText, Mpin);

        return encrypted663RequestData;
    }
    public string map663Request(Request663 request663Data)
    {
        string Os = ConfigurationManager.AppSettings["Os"].ToString();
        string appVer = ConfigurationManager.AppSettings["AppVersion"].ToString();
        string requestClearText = string.Empty;
        string signatureString = ConfigurationManager.AppSettings["signatureString"].ToString();
        if (request663Data.transactionType == ConfigurationManager.AppSettings["663CashInPrefix"].ToString())
        {
            requestClearText = get663CashInReqData(request663Data, Os, appVer, signatureString);
        }
        else if (request663Data.transactionType == ConfigurationManager.AppSettings["663RemitPrefix"].ToString())
        {
            requestClearText = get663RemitReqData(request663Data, Os, appVer, signatureString);
        }
        else if (request663Data.transactionType == ConfigurationManager.AppSettings["663CashOutPrefix"].ToString())
        {
            requestClearText = get663CashOutReqData(request663Data, Os, appVer, signatureString);
        }
        else if (request663Data.transactionType == ConfigurationManager.AppSettings["663UserInfoPrefix"].ToString())
        {
            requestClearText = get663InfoReqData(request663Data, Os, appVer, signatureString);
        }
        return requestClearText;
    }
    public string get663CashInReqData(Request663 request663Data, string Os, string appVer, string signatureString)
    {
        string requestClearText = string.Empty;

        requestClearText = string.Format("{0} {1} {2} {3} {4} {5} {6}", request663Data.transactionType, request663Data.receiverMobileNo.Remove(0, 1), request663Data.txnAmount, request663Data.txnID, Os, appVer, signatureString);
        return requestClearText;
    }
    public string get663RemitReqData(Request663 request663Data, string Os, string appVer, string signatureString)
    {
        string requestClearText = string.Empty;
        try
        {
            requestClearText = string.Format("{0} {1} {2} {3} {4} {5} {6} {7}", request663Data.transactionType, request663Data.agentMobileNo, request663Data.receiverMobileNo.Remove(0, 1), request663Data.txnAmount, request663Data.txnID, Os, appVer, signatureString);
        }
        catch (Exception ex)
        {
            writeLog(ex.ToString());
        }
        return requestClearText;
    }

    public string get663CashOutReqData(Request663 request663Data, string Os, string appVer, string signatureString)
    {
        string requestClearText = string.Empty;
        try
        {
            requestClearText = string.Format("{0} {1} {2} {3} {4} {5} {6} {7}", request663Data.transactionType, request663Data.receiverMobileNo.Remove(0, 1), request663Data.txnAmount, request663Data.oTp, Os, appVer, signatureString, request663Data.txnID);
        }
        catch (Exception ex)
        {
            writeLog(ex.ToString());
        }
        return requestClearText;
    }

    public string get663InfoReqData(Request663 request663Data, string Os, string appVer, string signatureString)
    {
        string requestClearText = string.Empty;
        try
        {
            requestClearText = string.Format("{0} {1} {2} {3}", request663Data.transactionType, Os, appVer, signatureString);
        }
        catch (Exception ex)
        {
            writeLog(ex.ToString());
        }

        return requestClearText;

    }
    #endregion

    public bool doSMS(long txnID, string mobileNo)
    {
        writeLog(".....doSMS.....");
        try
        {
            DataSet ds;
            string errMsg = "";
            string sendername = ConfigurationManager.AppSettings["senderName"].ToString();
            string agentName; string biller; string ref1Name; string ref2Name;
            string ref1Value; string ref2Value; string ref3Value; string ref4Value; string amount; string serviceFee; string totalamount;
            string mapTaxID = string.Empty;
            if (!_agentWCF.getTransactionDetail(txnID, out ds, out errMsg))
            {
                writeLog("Error in getTransactionDetail : " + errMsg);
                return false;
            }
            else
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    var smsH = new SMSHelper();
                    mapTaxID = ds.Tables[0].Rows[0]["MAPTAXID"].ToString();
                    biller = ds.Tables[0].Rows[0]["COMPANYNAME"].ToString();
                    agentName = ds.Tables[0].Rows[0]["AGENTNAME"].ToString();
                    ref1Name = ds.Tables[0].Rows[0]["REF1NAME"].ToString();
                    ref2Name = ds.Tables[0].Rows[0]["REF2NAME"].ToString();
                    ref1Value = ds.Tables[0].Rows[0]["REFID1"].ToString();
                    ref2Value = ds.Tables[0].Rows[0]["REFID2"].ToString();
                    ref3Value = ds.Tables[0].Rows[0]["REFID3"].ToString();
                    ref4Value = ds.Tables[0].Rows[0]["REFID4"].ToString();


                    amount = ds.Tables[0].Rows[0]["TRANSACTIONAMOUNT"].ToString();
                    serviceFee = ds.Tables[0].Rows[0]["SERVICEFEE"].ToString();

                    branchCode = ds.Tables[0].Rows[0]["AGENTBRANCHCODE"].ToString();
                    string smsMsg = "";
                    MessagingService.MessagingServiceClient smsWcf = new MessagingService.MessagingServiceClient();
                    if (mapTaxID == ConfigurationManager.AppSettings["MPT-CDMA"].ToString() || mapTaxID == ConfigurationManager.AppSettings["MPT-GSM"].ToString() || mapTaxID == ConfigurationManager.AppSettings["MPT-MEC"].ToString() ||
                        mapTaxID == ConfigurationManager.AppSettings["TELENOR"].ToString() || mapTaxID == ConfigurationManager.AppSettings["OOREDOO"].ToString() || mapTaxID == ConfigurationManager.AppSettings["MPT - CDMA450"].ToString())
                    {
                        writeLog("This is Telcos Topup.");

                        string[] words = ref4Value.Split(' ');
                        string PIN = words[0].ToString();
                        string Expiry = words[1].ToString();

                        smsMsg = smsH.getMessageTopup(agentName, mapTaxID, biller, PIN, ref3Value, Expiry,
                           double.Parse(amount).ToString("#,###.00"), branchCode); //updated by hnt 20-March-2015 change biller Name to Biller
                    }
                    else if (mapTaxID == "0000000000001" || mapTaxID == "1111111111111" || mapTaxID == "0000000000002" || mapTaxID == "0000000000003" || mapTaxID == "0000000000004" || mapTaxID == "0000000000015" || mapTaxID == "0000000000016" || mapTaxID == "0000000000012")
                    {
                        writeLog("This is GiftCards.");
                        string[] words = ref4Value.Split(' ');
                        string PIN = words[0].ToString();
                        string Expiry = words[1].ToString();
                        totalamount = (double.Parse(amount) + double.Parse(serviceFee)).ToString();
                        smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, "Code", "Expiry", "", "Ref", PIN, Expiry, "", txnID.ToString(),
                        double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalamount).ToString("#,##0.00"), branchCode);
                    }
                    else if (mapTaxID == "0000000000005")
                    {
                        smsMsg = string.Empty;
                    }

                    else if (mapTaxID == "0000000000006")
                    {
                        writeLog("This is Putet.");
                        totalamount = (double.Parse(amount) + double.Parse(serviceFee)).ToString();
                        smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, "Code", "Duration", "", "Ref", ref3Value, ref2Value, "", txnID.ToString(),
                                   double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalamount).ToString("#,##0.00"), branchCode);

                    }
                    else
                    {
                        writeLog("This is Bill Payment & Others.");
                        totalamount = (double.Parse(amount) + double.Parse(serviceFee)).ToString();
                        smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, ref1Name, ref2Name, "", "Ref", ref1Value, ref2Value, "", txnID.ToString(),
                                        double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalamount).ToString("#,##0.00"), branchCode);
                    }

                    writeLog("sendSMSWithTxnID starts." + " Mobile No: " + mobileNo);
                    writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "| txn ID :" + txnID);
                    smsWcf.SendSms(txnID.ToString(), smsMsg, mobileNo, sendername);
                    writeLog("sendSMSWithTxnID ends.");
                }
                else
                {
                    writeLog("No Data for : " + txnID.ToString());
                    return false;
                }
            }
        }
        catch (Exception ex)
        {
            writeLog("Error in doSMS : " + ex.ToString());
        }
        return false;
    }

    bool CheckIsESBAGiftCard(string taxID)
    {
        bool result = false;
        if (taxID == "0000000000003")
        {
            if (ConfigurationManager.AppSettings["IsSkypeESBA"].ToString() == "Y") result = true;
        }
        else if (taxID == "0000000000004")
        {
            if (ConfigurationManager.AppSettings["IsMyantalkESBA"].ToString() == "Y") result = true;
        }
        else if (taxID == "0000000000015")
        {
            if (ConfigurationManager.AppSettings["IsFaceBookESBA"].ToString() == "Y") result = true;
        }
        else if (taxID == "0000000000016")
        {
            if (ConfigurationManager.AppSettings["IsSteamESBA"].ToString() == "Y") result = true;
        }
        else if (taxID == "0000000000051")
        {
            if (ConfigurationManager.AppSettings["IsViberOutEBA"].ToString() == "Y") result = true;
        }
        if (taxID == "0000000000057")
        {
            if (ConfigurationManager.AppSettings["IsMyAnandaEBA"].ToString() == "Y") result = true;
        }
        if (taxID == ConfigurationManager.AppSettings["PubgUC"].ToString())
        {
            if (ConfigurationManager.AppSettings["IsPubgUC"].ToString() == "Y") result = true;
        }
        return result;
    }

    bool CheckIsMyanPayAirtime(string taxID)
    {
        bool result = false;
        if (taxID == "6666666666666")
        {
            if (ConfigurationManager.AppSettings["MyanpayOoredooAirtime"].ToString() == "Y") result = true;
        }
        else if (taxID == "3333333333333")
        {
            if (ConfigurationManager.AppSettings["MyanpayMPTAirtime"].ToString() == "Y") result = true;
        }
        else if (taxID == "0000000000061")
        {
            if (ConfigurationManager.AppSettings["MyanpayMPTAirtime"].ToString() == "Y") result = true;
        }
        return result;
    }

    bool CheckIsEBAAirtime(string taxID)
    {
        bool result = false;
        if (taxID == "6666666666666" || taxID == "0000000000062")
        {
            result = true;
        }
        return result;
    }

    string getBillerCode(string taxID)
    {
        string billerCode = string.Empty;
        if (taxID == "0000000000003")
        {
            billerCode = "Skype";
        }
        else if (taxID == "0000000000004")
        {
            billerCode = "Myantalk";
        }
        else if (taxID == "0000000000015")
        {
            billerCode = "Facebook";
        }
        else if (taxID == "0000000000016")
        {
            billerCode = "SW";
        }
        else if (taxID == "0000000000051")
        {
            billerCode = "ViberOut";
        }
        else if (taxID == "0000000000055")
        {
            billerCode = "iflix";
        }
        else if (taxID == "0000000000057")
        {
            billerCode = "Ananda";
        }
        else if (taxID == "0000000000058")
        {
            billerCode = "TelenorBB";
        }
        else if (taxID == ConfigurationManager.AppSettings["WunZinnMapTaxId"].ToString())
        {
            billerCode = ConfigurationManager.AppSettings["WunZinnCode"].ToString();
        }

        return billerCode;
    }

    public static string getInvoiceForPG(string xml)
    {
        string xmlInvoices = "";
        if (xml.Contains("<Invoices>"))
        {
            string regularExpressionPattern1 = @"<Invoices>(.*?)<\/Invoices>";
            Regex regex = new Regex(regularExpressionPattern1, RegexOptions.Singleline);
            MatchCollection collection = regex.Matches(xml.ToString());

            Match m = collection[0];
            xmlInvoices = m.Groups[1].Value;
        }

        return xmlInvoices;
    }

    bool IsValidEPaymentVoidReq(Hashtable ht, out string rescode, out string resdecs, out string version, out string ts, out string email, out string password
        , out string paymentType, out string messageId, out string ref1, out string ref2, out string ref3, out string ref4, out string ref5, out string productDesc)
    {
        writeLog("IsValidEPaymentVoidReq Starts");

        rescode = "00";
        resdecs = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;
        messageId = string.Empty;
        paymentType = string.Empty;
        productDesc = string.Empty;
        ref1 = string.Empty;
        ref2 = string.Empty;
        ref3 = string.Empty;
        ref4 = string.Empty;
        ref5 = string.Empty;



        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            rescode = "06";
            resdecs = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            rescode = "06";
            resdecs = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageId = ht["MessageID"].ToString();
        }
        else
        {
            rescode = "06";
            resdecs = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            rescode = "06";
            resdecs = "Invalid Request";
            writeLog("Error in Validation : Missing Email <Email> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            rescode = "06";
            resdecs = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Password> Tag");
            return false;
        }

        if (ht.ContainsKey("PaymentType"))
        {
            paymentType = ht["PaymentType"].ToString();
        }

        if (ht.ContainsKey("Ref1"))
        {
            ref1 = ht["Ref1"].ToString();
        }
        else
        {
            rescode = "06";
            resdecs = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Ref1> Tag");
            return false;
        }

        if (ht.ContainsKey("Ref2"))
        {
            ref2 = ht["Ref2"].ToString();
            if (string.IsNullOrEmpty(paymentType))
            {
                paymentType = ref2;
            }
        }

        if (ht.ContainsKey("Ref3"))
        {
            ref3 = ht["Ref3"].ToString();
        }

        if (ht.ContainsKey("Ref4"))
        {
            ref4 = ht["Ref4"].ToString();
        }
        if (ht.ContainsKey("Ref5"))
        {
            ref5 = ht["Ref5"].ToString();
        }

        if (ht.ContainsKey("ProductDesc"))
        {
            productDesc = ht["ProductDesc"].ToString();
        }

        return true;
    }

    bool IsValidateMerchantAcceptanceReq(Hashtable ht, out string rescode, out string resdecs, out string version, out string ts, out string email, out string password, out string messageId, out string ref1, out string ref2, out string ref3, out string ref4, out string ref5, out string appType, out string amount, out string productDesc, out string loginType, out string deviceId, out string terminalId, out double merchantFee, out string branchCode, out string agentCode, out string agentName, out string merchantPaymentProfileId, out string paymentType, out string paymentMode)
    {
        writeLog("IsValidateMerchantAcceptanceReq Starts");

        rescode = "00";
        resdecs = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;
        messageId = string.Empty;
        ref1 = string.Empty;
        ref2 = string.Empty;
        ref3 = string.Empty;
        ref4 = string.Empty;//Add By Tz for Easypoint
        ref5 = string.Empty;//Add By Tz for Easypoint
        amount = string.Empty;
        appType = string.Empty;
        terminalId = string.Empty;
        deviceId = string.Empty;
        productDesc = string.Empty;
        loginType = string.Empty;
        paymentType = string.Empty;
        merchantFee = 0;
        branchCode = string.Empty;
        agentCode = string.Empty;
        agentName = string.Empty;
        merchantPaymentProfileId = string.Empty;
        paymentMode = "B2C";



        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            rescode = "06";
            resdecs = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            rescode = "06";
            resdecs = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageId = ht["MessageID"].ToString();
        }
        else
        {
            rescode = "06";
            resdecs = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            rescode = "06";
            resdecs = "Invalid Request";
            writeLog("Error in Validation : Missing Email <Email> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            rescode = "06";
            resdecs = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Password> Tag");
            return false;
        }

        if (ht.ContainsKey("PaymentType"))
        {
            paymentType = ht["PaymentType"].ToString();
        }

        if (ht.ContainsKey("PaymentMode"))
        {
            paymentMode = ht["PaymentMode"].ToString();
        }

        if (ht.ContainsKey("Ref1"))
        {
            ref1 = ht["Ref1"].ToString();
        }
        else
        {
            rescode = "06";
            resdecs = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Ref1> Tag");
            return false;
        }

        if (ht.ContainsKey("Ref2"))
        {
            ref2 = ht["Ref2"].ToString();
            if (string.IsNullOrEmpty(paymentType))
            {
                paymentType = ref2;
            }
        }

        if (ht.ContainsKey("Ref3"))
        {
            ref3 = ht["Ref3"].ToString();
        }

        if (ht.ContainsKey("Ref4"))
        {
            ref4 = ht["Ref4"].ToString();
        }
        if (ht.ContainsKey("Ref5"))
        {
            ref5 = ht["Ref5"].ToString();
        }

        if (ht.ContainsKey("TerminalId"))
        {
            terminalId = ht["TerminalId"].ToString();
        }
        if (ht.ContainsKey("Amount"))
        {
            amount = ht["Amount"].ToString();

            if (string.IsNullOrEmpty(amount))
            {
                rescode = "06";
                resdecs = "Invalid Request";
                writeLog("Error in Validation : Invalid Amount");
                return false;
            }
        }

        // validate Amount Limitations
        bool isValidAmount = true;

        writeLog("Call ValidateAmountLimitation");
        isValidAmount = Utils.ValidateAmountLimitation(paymentType, Convert.ToDecimal(amount), out rescode, out resdecs);
        if (!isValidAmount)
        {
            writeLog(string.Format("Error in Amount Validation : ", resdecs));
            return false;
        }

        writeLog("ValidateAmountLimitation Success");

        if (ht.ContainsKey("ProductDesc"))
        {
            productDesc = ht["ProductDesc"].ToString();
        }

        if (ht.ContainsKey("LoginType"))
        {
            loginType = ht["LoginType"].ToString();
        }

        if (ht.ContainsKey("AppType"))
        {
            appType = ht["AppType"].ToString();
        }

        if (ht.ContainsKey("DeviceUID"))
        {
            deviceId = ht["DeviceUID"].ToString();
        }

        if (!_agentWCF.getMerchantTransactionByMsgID(messageId))
        {
            writeLog("This is Duplicated request");
            rescode = "01";
            resdecs = "Your transaction may be successful. Please go to History";

            return false;
        }

        var isMerchant = string.Empty;
        var merchantDiscountPercentFee = string.Empty;
        var merchantDiscountFixedFee = string.Empty;
        merchantPaymentProfileId = string.Empty;

        string errmsg = string.Empty;
        DataSet ds = null;
        bool flg = false;
        string passwordDB = "";
        string userStatusDB = "";
        string appver = string.Empty;
        string userlvl = string.Empty;
        flg = _agentWCF.getAuthentication(email, password, out ds, out errmsg);
        if (flg)
        {
            writeLog("Authentication Success");
            if (ds.Tables[0].Rows.Count > 0)
            {
                int.TryParse(ds.Tables[0].Rows[0]["AGENTID"].ToString(), out agentID);
                agentCode = Convert.ToString(ds.Tables[0].Rows[0]["AGENTCODE"]);
                this.servicePercent = Convert.ToString(ds.Tables[0].Rows[0]["AGENTFEEPERCENT"]);
                agentName = ds.Tables[0].Rows[0]["AGENTNAME"].ToString();
                this.agentUserUniqueID = ds.Tables[0].Rows[0]["AGENTUSERUNIQUEID"].ToString();
                branchCode = Convert.ToString(ds.Tables[0].Rows[0]["BRANCHCODE"]);
                this.branchName = ds.Tables[0].Rows[0]["BRANCHNAME"].ToString();
                passwordDB = Convert.ToString(ds.Tables[0].Rows[0]["AGENTUSERPASSWORD"]);
                userStatusDB = Convert.ToString(ds.Tables[0].Rows[0]["USERSTATUS"]);
                appver = Convert.ToString(ds.Tables[0].Rows[0]["APPVERSION"]);
                userlvl = (ds.Tables[0].Rows[0]["USERLEVEL"] == DBNull.Value) ? "A" : ds.Tables[0].Rows[0]["USERLEVEL"].ToString();

                var merchantDs = new DataSet();

                if (_agentWCF.CheckIsMerchant(agentCode, paymentType, out merchantDs, out errmsg))
                {
                    if (merchantDs.Tables[0].Rows.Count > 0)
                    {
                        isMerchant = merchantDs.Tables[0].Rows[0]["IsActiveMerchant"] == null ? "N" : merchantDs.Tables[0].Rows[0]["IsActiveMerchant"].ToString();
                        merchantDiscountPercentFee = merchantDs.Tables[0].Rows[0]["MerchantDiscountPercentFee"].ToString();
                        merchantDiscountFixedFee = merchantDs.Tables[0].Rows[0]["MerchantDiscountFixedFee"].ToString();
                        merchantPaymentProfileId = merchantDs.Tables[0].Rows[0]["MerchantPaymentProfileId"].ToString();
                    }
                }

                writeLog("AGETN ID : " + agentID.ToString() + " | AGENT CODE : " + agentCode + " | AGENT NAME : " + agentName + " | BRANCH CODE : " + branchCode);
                if (passwordDB != password)
                {
                    rescode = "05";
                    resdecs = "Incorrect Password";
                    writeLog(resdecs + errmsg);
                    return false;
                }

                if (userStatusDB != "Y")
                {
                    rescode = "05";
                    resdecs = "Login ID Locked";
                    writeLog(resdecs + errmsg);
                    return false;
                }

                if (userlvl == "A")
                {
                    rescode = "05";
                    resdecs = "Admin level is not allow";
                    writeLog(resdecs + errmsg);
                    return false;
                }

                if (!string.IsNullOrEmpty(isMerchant))
                {
                    if (isMerchant != "Y")
                    {
                        rescode = "05";
                        resdecs = "You are not available for this acceptence, please contact to the administrator.";
                        writeLog(resdecs);
                        return false;
                    }
                }
                else
                {
                    rescode = "05";
                    resdecs = "Unknow merchant.";
                    writeLog(resdecs);
                    return false;
                }

                float discountPercent = 0;
                double discountFix = 0;

                if (!string.IsNullOrEmpty(merchantDiscountPercentFee))
                {
                    discountPercent = float.Parse(merchantDiscountPercentFee);
                }

                if (!string.IsNullOrEmpty(merchantDiscountFixedFee))
                {
                    discountFix = Convert.ToDouble(merchantDiscountFixedFee);
                }

                merchantFee = Utils.getFeeNotRound(Convert.ToDouble(amount), discountPercent, discountFix);

                if (merchantFee > Convert.ToDouble(amount))
                {
                    rescode = "05";
                    resdecs = "Invalid MDR fee.";
                    writeLog(resdecs);
                    return false;
                }

            }
            else
            {
                rescode = "05";
                resdecs = "Incorrect LoginID";
                writeLog(resdecs + errmsg);
                return false;
            }

        }
        else
        {
            rescode = "--";
            resdecs = "DB Error";
            writeLog("Error in Authentication : " + errmsg);
            return false;

        }
        writeLog("IsValidateMerchantAcceptanceReq Ends");
        return true;
    }

    bool IsValidateConfirmReq(string xml, Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out string ref1, out string ref2, out string ref3, out string ref4, out string ref5, out string img1, out string ref6, out string inquirytype, out string amount, out string LocLatitude, out string LocLongitude, out string agentfee, out string productdesc, out string taxID, out string messageid, out string confirmedby, out string topupType, out string NewTaxID, out string canalPlusConfirmType, out string sessionID, out string packageCode, out string durationCode, out List<PGReqConfirmInvoice> lstInvoices, out string LoginType, out string terminalId, out string paymentType)
    {
        code = "00";
        desp = "Success";
        string logAppender = null;
        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;

        ref1 = string.Empty;
        ref2 = string.Empty;
        ref3 = string.Empty;
        ref4 = string.Empty;//Add By Tz for Easypoint
        ref5 = string.Empty;//Add By Tz for Easypoint
        ref6 = string.Empty;//Add By Tz For Grand guardian image
        amount = string.Empty;
        inquirytype = string.Empty;
        LocLatitude = string.Empty;
        LocLongitude = string.Empty;
        agentfee = string.Empty;
        productdesc = string.Empty;
        taxID = string.Empty;
        paymentType = string.Empty;
        messageid = string.Empty;
        confirmedby = string.Empty;
        topupType = string.Empty;// Added By HNT 31-03-2015
        img1 = string.Empty;//for grand guardian
        NewTaxID = string.Empty;
        string MapTaxID = string.Empty;
        canalPlusConfirmType = string.Empty;
        sessionID = string.Empty;
        packageCode = string.Empty;
        durationCode = string.Empty;
        lstInvoices = new List<PGReqConfirmInvoice>();
        LoginType = string.Empty;
        terminalId = string.Empty;
        var deviceInfo = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageid = ht["MessageID"].ToString();
            logAppender = messageid + " | ";
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog(logAppender + "Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
            confirmedby = email;
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog(logAppender + "Error in Validation : Missing Email <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog(logAppender + "Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("TaxID"))
        {
            taxID = ht["TaxID"].ToString();
            if (getMapTaxID(taxID, out MapTaxID))
            {
                NewTaxID = MapTaxID;
                writeLog(logAppender + "OldTaxID:" + taxID + "NewMappedTaxID:" + NewTaxID);
            }
            else
            {

                code = "06";
                desp = "Invalid Request";
                writeLog(logAppender + "MapTaxID is Missing OldTaxID:" + taxID + "NewMappedTaxID:" + NewTaxID);
                return false;
            }
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog(logAppender + "Error in Validation : Missing Password <TaxID> Tag");
            return false;
        }

        if (ht.ContainsKey("PaymentType"))
        {
            paymentType = ht["PaymentType"].ToString();
        }

        if (ht.ContainsKey("Ref1"))
        {
            ref1 = Utils.ReplaceSpecialCharacters(ht["Ref1"].ToString());

            if (MapTaxID == "0000000000028")
            {
                if (!string.IsNullOrEmpty(ref1))
                    ref1 = ref1 + " " + "kyats card";

            }
            if (String.IsNullOrEmpty(ref1))
            {
                switch (MapTaxID)
                {
                    case "3333333333333":
                        ref1 = "101";
                        //operatorName = "(MPT-GSM)";
                        break;
                    case "2222222222222":
                        ref1 = "102";
                        /// operatorName = "(MPT-CDMA)";
                        break;
                    case "0000000000024":
                        ref1 = "C4";
                        //operatorName="(MPT-CDMA450)";
                        break;
                    case "5555555555555":
                        ref1 = "111";
                        // operatorName = "(TLN-GSM)";
                        break;
                    case "0000000000054":
                        ref1 = "222";
                        // operatorName = "(MYT-GSM)";
                        break;
                    case "6666666666666":
                        ref1 = "121";
                        //operatorName = "(ORD-GSM)";
                        break;
                    case "4444444444444":
                        ref1 = "103";
                        // operatorName = "(MPT-MEC)";
                        break;

                    case "0000000000001":
                        ref1 = "211";
                        // operatorName = "(iTunes)";
                        break;
                    case "0000000000002":
                        ref1 = "221";
                        // operatorName = "(GooglePlay)";
                        break;
                    case "0000000000003":
                        ref1 = "231";
                        // operatorName = "(Skype)";
                        break;

                    case "0000000000004":
                        ref1 = "241";
                        // operatorName = "(MyanTalk)";
                        break;
                    case "0000000000015":
                        ref1 = "261";
                        // operatorName = "(Facebook)";
                        break;
                    case "0000000000016":
                        ref1 = "251";
                        // operatorName = "(Steam Wallet)";
                        break;
                    case "0000000000017":
                        ref1 = "easypoint";
                        break;
                    case "0000000000018":
                        ref1 = "MLM";
                        // operatorName = "(MalarMyaine Corps)";
                        break;
                    case "7777777777777":
                        ref1 = "MLMredeem";
                        // operatorName = "(MalarMyaine Corps)";
                        break;
                    case "0000000000030":
                        //operator Name="Vakok"
                        ref1 = "Vakok";
                        break;
                    case "0000000000051":
                        ref1 = "ViberOut";
                        break;

                    case "0000000000010":
                        ref1 = "mercycrop";
                        // operatorName = "(Mercy Corps)";
                        break;
                    case "0000000000011":
                        ref1 = "mercycropredeem";
                        // operatorName = "(Mercy Corps)";
                        break;
                    case "0000000000012":
                        ref1 = "YTalk";
                        // operatorName = "(YTalk)";
                        break;
                    case "1111111111111":
                        ref1 = "MyPlay";
                        // operatorName = "(My Play)";
                        break;
                    case "0000000000052":
                        ref1 = "0000000000052";
                        //operatorName = "CanalPlus";
                        break;
                    case "0000000000055":
                        ref1 = "261";
                        break;

                    case "0000000000057":
                        ref1 = "271";
                        break;

                    case "0000000000067":
                        ref1 = "Viu";
                        break;

                    case "0000000000079":
                        ref1 = "Mahar";
                        break;

                    case "0000000000081":
                        ref1 = "Lalakyi";
                        break;

                    case "0000000000082":
                        ref1 = "Hi WiFi";
                        break;

                    case "0000000000083":
                        ref1 = "Prepaid";
                        break;

                    case "0000000000084":
                        ref1 = "Data";
                        break;

                    case "0000000000085":
                        ref1 = "A-Wa-Thone";
                        break;

                    case "0000000000089":
                        ref1 = ConfigurationManager.AppSettings["WunZinnCode"].ToString();
                        break;

                    case "0000000000092":
                        ref1 = ConfigurationManager.AppSettings["PubgReference"].ToString();
                        break;

                    case "0000000000113":
                        ref1 = ConfigurationManager.AppSettings["CookieTVBillerCode"].ToString();
                        break;

                    case "0000000000125":
                        ref1 = ConfigurationManager.AppSettings["SmileCinemaCardType"].ToString();
                        break;

                    case "0000000000141":
                        ref1 = ConfigurationManager.AppSettings["GrabRideBillerCode"].ToString();
                        break;

                    case "0000000000142":
                        ref1 = ConfigurationManager.AppSettings["GrabFoodBillerCode"].ToString();
                        break;
                }
            }
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog(logAppender + "Error in Validation : Missing Password <Ref1> Tag");
            return false;
        }

        if (ht.ContainsKey("Ref2"))
        {
            ref2 = Utils.ReplaceSpecialCharacters(ht["Ref2"].ToString());
            if (MapTaxID == "0000000000028")
            {
                if (string.IsNullOrEmpty(ref1))
                {
                    ref1 = ref2 + " " + "kyats card";
                }

            }
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog(logAppender + "Error in Validation : Missing Password <Ref2> Tag");
            return false;
        }
        if (ht.ContainsKey("Ref3"))
        {
            ref3 = Utils.ReplaceSpecialCharacters(ht["Ref3"].ToString());
        }
        if (ht.ContainsKey("Ref4"))
        {
            ref4 = Utils.ReplaceSpecialCharacters(ht["Ref4"].ToString());
        }
        if (ht.ContainsKey("Ref5"))
        {
            if (MapTaxID == "0000000000019")
            {
                img1 = Utils.ReplaceSpecialCharacters(ht["Ref5"].ToString());

            }
            else
            {
                ref5 = Utils.ReplaceSpecialCharacters(ht["Ref5"].ToString());
            }
        }

        if (ht.ContainsKey("Ref6"))
        {
            ref6 = Utils.ReplaceSpecialCharacters(ht["Ref6"].ToString());
        }
        if (ht.ContainsKey("TerminalId"))
        {
            terminalId = ht["TerminalId"].ToString();
        }
        if (ht.ContainsKey("Amount"))
        {
            amount = ht["Amount"].ToString();

            if (string.IsNullOrEmpty(amount))
            {
                code = "06";
                desp = "Invalid Amount.";
                writeLog(logAppender + "Error in Validation : Invalid Amount");
                return false;
            }

            if (Convert.ToDecimal(amount) <= 0)
            {
                code = "06";
                desp = "Invalid Amount.";
                writeLog(logAppender + "Error in Validation : Invalid Amount");
                return false;
            }
        }

        if (ht.ContainsKey("LocLatitude"))
        {
            LocLatitude = ht["LocLatitude"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog(logAppender + "Error in Validation : Missing LocLatitude <LocLatitude> Tag");
            return false;
        }
        if (ht.ContainsKey("LocLongitude"))
        {
            LocLongitude = ht["LocLongitude"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog(logAppender + "Error in Validation : Missing LocLongitude <LocLongitude> Tag");
            return false;
        }
        if (ht.ContainsKey("AgentFee"))
        {
            agentfee = ht["AgentFee"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog(logAppender + "Error in Validation : Missing AgentFee <AgentFee> Tag");
            return false;
        }

        if (ht.ContainsKey("ProductDesc"))
        {
            productdesc = ht["ProductDesc"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog(logAppender + "Error in Validation : Missing ProductDesc <ProductDesc> Tag");
            return false;
        }
        if (ht.ContainsKey("TopupType"))
        {
            topupType = ht["TopupType"].ToString();
        }

        if (taxID != "1111111111111")
        {
            if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email) || String.IsNullOrEmpty(password) || String.IsNullOrEmpty(ref1) || String.IsNullOrEmpty(taxID)) //String.IsNullOrEmpty(ref2) ||
            {
                code = "07";
                desp = "Invalid Message";
                writeLog(logAppender + "Error in Validation : Data is Null or Empty");
                return false;
            }
        }
        if (ht.ContainsKey("LoginType"))
        {
            LoginType = ht["LoginType"].ToString();
        }
        if (taxID == "0000000000052")
        {
            if (ht.Contains("PackageCode") && ht.Contains("DurationCode"))
            {
                packageCode = ht["PackageCode"].ToString();
                durationCode = ht["DurationCode"].ToString();
            }
            else
            {
                code = "06";
                desp = "Invalid Request";
                writeLog(logAppender + "Error in Validation : Missing <PackageCode> OR <DurationCode> TAG");
                return false;
            }

            if (ht.Contains("SessionID"))
            {
                sessionID = ht["SessionID"].ToString();
            }
        }
        if (MapTaxID == "0000000000056")
        {
            if (ht.ContainsKey("Invoices"))
            {
                string lstInvoiceXml = "<Invoices>" + getInvoiceForPG(xml) + "</Invoices>";

                XmlSerializer serializer = new XmlSerializer(typeof(Invoices));
                Invoices result;
                using (TextReader reader = new StringReader(lstInvoiceXml))
                {
                    result = (Invoices)serializer.Deserialize(reader);
                }

                PGReqConfirmInvoice confirmInvoice;
                foreach (Invoice inv in result.Invoice)
                {
                    if (string.IsNullOrEmpty(inv.Amount) || inv.Amount == "0")
                    {
                        code = "06";
                        desp = "Invalid Invoice Amount";
                        writeLog(logAppender + "Error in Validation : Invalid Invoice Amount");
                        return false;
                    }
                    confirmInvoice = new PGReqConfirmInvoice
                    {
                        Amount = inv.Amount,
                        InvoiceNumber = inv.InvoiceNumber
                    };

                    lstInvoices.Add(confirmInvoice);
                }
            }
        }

        //Check Authecation
        string errmsg = string.Empty;
        DataSet ds = null;
        bool flg = false;
        string passwordDB = "";
        string userStatusDB = "";
        string appver = string.Empty;
        string userlvl = string.Empty;
        flg = _agentWCF.getAuthentication(email, password, out ds, out errmsg);
        if (flg)
        {
            var userTable = ds.Tables[0];
            if (userTable.Rows.Count > 0)
            {
                var user = userTable.Rows[0];
                int.TryParse(user["AGENTID"].ToString(), out agentID);
                this.agentCode = Convert.ToString(user["AGENTCODE"]);
                this.servicePercent = Convert.ToString(user["AGENTFEEPERCENT"]);
                this.agentName = user["AGENTNAME"].ToString();
                this.agentUserUniqueID = user["AGENTUSERUNIQUEID"].ToString();
                this.branchCode = Convert.ToString(user["BRANCHCODE"]);
                this.branchName = user["BRANCHNAME"].ToString();
                passwordDB = Convert.ToString(user["AGENTUSERPASSWORD"]);
                userStatusDB = Convert.ToString(user["USERSTATUS"]);
                appver = Convert.ToString(user["APPVERSION"]);
                deviceInfo = Convert.ToString(user["DEVICEINFO"]);
                userlvl = (user["USERLEVEL"] == DBNull.Value) ? "A" : user["USERLEVEL"].ToString();

                writeLog(logAppender + "AGETN ID : " + agentID.ToString() + " | AGENT CODE : " + agentCode + " | AGENT NAME : " + agentName + " | BRANCH CODE : " + branchCode);

                var isValid = IsValidatedBiller(version, taxID, deviceInfo);
                if (!isValid)
                {
                    code = "05";
                    desp = "Incorrect biller";
                    writeLog(logAppender + desp + "This biller is not valid for this version.");
                    return false;
                }
                if (passwordDB != password)
                {
                    code = "05";
                    desp = "Incorrect Password";
                    writeLog(logAppender + desp + errmsg);
                    return false;
                }
                else if (userStatusDB != "Y")
                {
                    code = "05";
                    desp = "Login ID Locked";
                    writeLog(logAppender + desp + errmsg);
                    return false;
                }
                else if (userlvl == "A")
                {
                    code = "05";
                    desp = "Admin level is not allow";
                    writeLog(logAppender + desp + errmsg);
                    return false;
                }

            }
            else
            {
                code = "05";
                desp = "Incorrect LoginID";
                writeLog(logAppender + desp + errmsg);
                return false;
            }

        }
        else
        {
            code = "--";
            desp = "DB Error";
            writeLog(logAppender + "Error in Authentication : " + errmsg);
            return false;

        }

        #region <-- Check APP version -->

        string newbillers = ConfigurationManager.AppSettings["NewBiller"].ToString();//new adding biller
        writeLog(logAppender + "get new biller OK");
        string newappver = ConfigurationManager.AppSettings["newappver"].ToString();//newbiller Taxid and appversion 
        writeLog(logAppender + "get new appver OK");
        Hashtable newappverht = Utils.getMerchantCodeHashtable(newappver);//get app version of Biller's TaxID
        writeLog(logAppender + "add new appverto hashtableOK");
        Hashtable httnewbillers = Utils.getMerchantCodeHashtable(newbillers);
        writeLog(logAppender + "Add newbillers to hashtable OK");
        string tempnewappver = string.Empty;
        appver = string.IsNullOrEmpty(appver) ? "1.0.3" : appver;
        string currentappver = appver.Replace(".", "");//Split . from app version 
        writeLog(logAppender + "currentappver" + currentappver);



        if (newappverht.ContainsKey(taxID))
        {
            tempnewappver = newappverht[taxID].ToString();
            writeLog(logAppender + "tempappver" + tempnewappver);
            if (int.Parse(tempnewappver) > int.Parse(currentappver))//Compare if new app version is larger current app version or not
            {
                code = "05";
                desp = "Please update your application to use " + httnewbillers[taxID].ToString() + ",For upate your application go to menu then press about after that press on upgrade button.";
                writeLog(logAppender + "Version Out of Date currentversion : " + currentappver + " New Version :" + tempnewappver);
                return false;
            }
            writeLog(logAppender + "Check Appver OK");

        }

        #endregion



        return true;

    }

    bool IsValidatedBiller(string version, string taxId, string deviceInfo)
    {
        var inValidBiller = ConfigurationManager.AppSettings["InvalidBillers"];
        if (!string.IsNullOrEmpty(inValidBiller))
        {
            var billerList = inValidBiller.Split(',').ToList();
            if (billerList.Count > 0)
            {
                var thisBiller = billerList.FirstOrDefault(x => x == taxId);
                if (!string.IsNullOrEmpty(thisBiller))
                {
                    var restrictVersion = ConfigurationManager.AppSettings["RestrictVersion"];
                    if (Convert.ToInt32(version.Replace(".", "")) < Convert.ToInt32(restrictVersion.Replace(".", "")))
                    {
                        writeLog("Device Info is : " + deviceInfo);
                        var ios = ConfigurationManager.AppSettings["iOS"];
                        if (deviceInfo.StartsWith(ios)) return false;
                    }
                }
            }
        }

        return true;
    }

    bool authentication(string email, string password, out string code, out string desp)
    {
        string errmsg = string.Empty;
        DataSet ds = null;
        bool flg = false;
        string passwordDB = "";
        string userStatusDB = "";
        flg = _agentWCF.getAuthentication(email, password, out ds, out errmsg);
        if (flg)
        {
            if (ds.Tables[0].Rows.Count > 0)
            {
                int.TryParse(ds.Tables[0].Rows[0]["AGENTID"].ToString(), out agentID);
                this.agentCode = Convert.ToString(ds.Tables[0].Rows[0]["AGENTCODE"]);
                this.servicePercent = Convert.ToString(ds.Tables[0].Rows[0]["AGENTFEEPERCENT"]);
                this.agentName = ds.Tables[0].Rows[0]["AGENTNAME"].ToString();
                this.branchName = ds.Tables[0].Rows[0]["BRANCHNAME"].ToString();
                passwordDB = Convert.ToString(ds.Tables[0].Rows[0]["AGENTUSERPASSWORD"]);
                userStatusDB = Convert.ToString(ds.Tables[0].Rows[0]["USERSTATUS"]);
                //added by nila 20150623
                this.branchCode = Convert.ToString(ds.Tables[0].Rows[0]["BRANCHCODE"]);

                writeLog("AGETN ID : " + agentID.ToString() + " | AGENT CODE : " + agentCode + " | AGENT NAME : " + agentName + " | BRANCH CODE : " + branchCode);


                if (passwordDB != password)
                {
                    code = "05";
                    desp = "Incorrect Password";
                    writeLog(desp + errmsg);
                    return false;
                }
                else if (userStatusDB != "Y")
                {
                    code = "05";
                    desp = "Login ID Locked";
                    writeLog(desp + errmsg);
                    return false;
                }


            }
            else
            {
                code = "05";
                desp = "Incorrect LoginID";
                writeLog(desp + errmsg);
                return false;
            }

        }
        else
        {
            code = "--";
            desp = "DB Error";
            writeLog("Error in Authentication : " + errmsg);
            return false;

        }

        code = "00";
        desp = "Success";
        return true;
    }

    bool IsValidateConfirmRes123(Hashtable ht, out string code, out string desp, out string version, out string ts, out string rescode, out string resdesc)
    {
        code = "";
        desp = "";
        rescode = string.Empty;
        version = string.Empty;
        ts = string.Empty;
        string messageid = string.Empty;
        string agentcode = string.Empty;
        string hash = string.Empty;
        resdesc = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("MessageID"))
        {
            messageid = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }
        if (ht.ContainsKey("ResCode"))
        {
            rescode = ht["ResCode"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <ResCode> Tag");
            return false;
        }

        if (ht.ContainsKey("ResDesc"))
        {
            resdesc = ht["ResDesc"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <ResDesc> Tag");
            return false;
        }

        if (ht.ContainsKey("AgentCode"))
        {
            agentcode = ht["AgentCode"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <AgentCode> Tag");
            return false;
        }
        if (ht.ContainsKey("HashValue"))
        {
            hash = ht["HashValue"].ToString();

        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <HashValue> Tag");
            return false;
        }

        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(messageid) || String.IsNullOrEmpty(rescode) || String.IsNullOrEmpty(agentcode))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }
        ArrayList ar = new ArrayList();
        ar.Add(version);
        ar.Add(ts);
        ar.Add(messageid);
        ar.Add(agentcode);
        ar.Add(rescode);


        ar.Sort();

        StringBuilder sb = new StringBuilder();
        foreach (string item in ar)
        {
            sb.Append(item);
        }



        //Check Authecation
        string errmsg = string.Empty;
        var secretkey = ConfigurationManager.AppSettings["123SecretKey"].ToString();

        if (!Utils.verifyHashValue(hash, sb.ToString(), secretkey))
        {
            code = "--";
            desp = "InvalidHashKey123";
            writeLog("Error in hashv 123 res : " + errmsg);
            return false;
        }
        if (ht.ContainsKey("ResCode"))
        {
            code = ht["ResCode"].ToString();
            if (code == "BP_ST_00")
            {
                code = "00";
                desp = "Success";
            }
            else
            {
                code = Utils.changeStatusCodeToCode(code);
                desp = ht["ResDesc"].ToString();
            }
        }
        return true;


    }



    #region <-- ValidateConfirmResponse Awba -->
    public bool IsValidateConfirmResAwba(Hashtable ht, out string rescode, out string resdesc, out string version, out string msgid, out string ref1, out string ref2, out string ref3, out string ref4, out string ts, out string receiptno)
    {
        //
        rescode = string.Empty;
        version = string.Empty;
        ts = string.Empty;
        resdesc = string.Empty;
        ref1 = string.Empty;//slipNo
        ref2 = string.Empty;//CustomerID
        ref3 = string.Empty;//Due Date
        ref4 = string.Empty;

        msgid = string.Empty;
        string reshashvalue = string.Empty;

        receiptno = string.Empty;
        string expiry = string.Empty;
        reshashvalue = string.Empty;
        string tmphashvalue = string.Empty;
        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Version Tag is Missing");
            return false;
        }
        if (ht.ContainsKey("ReceiptNo"))
        {
            ref3 = ht["ReceiptNo"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("ReceiptNo Tag is Missing");

            return false;
        }

        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("TimeStamp Tag is Missing");
            return false;
        }


        if (ht.ContainsKey("MessageID"))
        {
            msgid = ht["MessageID"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("MessageID Tag is Missing");

            return false;
        }

        if (ht.ContainsKey("CustomerID"))
        {
            ref2 = ht["CustomerID"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("CustomerID Tag is Missing");

            return false;
        }

        if (ht.ContainsKey("ResCode"))
        {
            rescode = ht["ResCode"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("ResCode Tag is Missing");

            return false;
        }
        if (ht.ContainsKey("SlipNo"))
        {
            ref1 = ht["SlipNo"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("SlipNo Tag is Missing");

            return false;
        }



        if (ht.ContainsKey("HashValue"))
        {
            reshashvalue = ht["HashValue"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("HashValue Tag is Missing");
            return false;

        }

        writeLog("signaturestring version+ts+msgid+cusid+slipno+rescode:" + version + ":" + ts + ":" + msgid + ":" + ref2 + ":" + ref1 + ":" + rescode);
        if (string.IsNullOrEmpty(version) || string.IsNullOrEmpty(ts) || string.IsNullOrEmpty(msgid) || string.IsNullOrEmpty(ref2) || string.IsNullOrEmpty(ref1) || string.IsNullOrEmpty(rescode))
        {
            rescode = "07";
            resdesc = "Invalid Message";
            writeLog("Invalid response data");
            return false;
        }
        tmphashvalue = Utils.GethashKeyconfirmres(version, ts, msgid, ref2, ref1, rescode);
        writeLog("Response Hash:" + reshashvalue + "Hash Value To Compare:" + tmphashvalue);
        if (reshashvalue != tmphashvalue)
        {
            rescode = "05";
            resdesc = "Hash Value Missmatch";

            return false;
        }
        return true;


    }

    #endregion

    #region <-- ValidateConfirmRequestPutet Tz -->
    bool IsValidateConfirmReqPutet(Hashtable ht, out string rescode, out string resdesc, out string version, out string msgid, out string ref1, out string ref2, out string ref3)
    {

        //
        rescode = string.Empty;
        version = string.Empty;
        string ts = string.Empty;
        resdesc = string.Empty;
        ref1 = string.Empty;
        ref2 = string.Empty;
        ref3 = string.Empty;
        msgid = string.Empty;
        string amt = string.Empty;

        string pin = string.Empty;
        string expiry = string.Empty;

        string reshashvalue = string.Empty;
        string tmphashvalue = string.Empty;
        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }


        if (ht.ContainsKey("MessageID"))
        {
            msgid = ht["MessageID"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("ResCode"))
        {
            rescode = ht["ResCode"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("ResDesc"))
        {
            resdesc = ht["ResDesc"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("PINType"))
        {
            ref2 = ht["PINType"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing SerialNo <SerialNo> Tag");
            return false;
        }

        if (ht.ContainsKey("PIN"))
        {
            ref3 = ht["PIN"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Ref1 <Ref1> Tag");
            return false;
        }
        if (ht.ContainsKey("Amount"))
        {
            amt = ht["Amount"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Ref1 <Ref1> Tag");
            return false;
        }
        if (ht.ContainsKey("Expiry"))
        {
            expiry = ht["Expiry"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
        }
        if (ht.ContainsKey("SerialNo"))
        {
            ref1 = ht["SerialNo"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
        }
        if (ht.ContainsKey("HashValue"))
        {
            reshashvalue = ht["HashValue"].ToString();
        }

        tmphashvalue = Utils.hashstrConfirmPutetRes(version, ts, msgid, rescode, resdesc, ref2, amt, ref3, expiry, ref1);

        #region <-- Check Putet response Hash value -->
        if (reshashvalue != tmphashvalue.ToLower())
        {
            rescode = "05";
            resdesc = "Hash Value Missmatch";
            writeLog("Inquiry Hash Value Missmatch.");
            return false;
        }

        #endregion
        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(rescode))
        {
            rescode = "07";
            resdesc = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        return true;


    }
    #endregion

    #region <-- ValidateConfirmResEasyPoint Code Generate -->
    bool IsValidateConfirmResEasyPoint(Hashtable ht, string taxID, out string rescode, out string resdesc, out string version, out string msgid, out string ref1, out string ref3, out string agnid)
    {

        rescode = string.Empty;
        version = string.Empty;
        string ts = string.Empty;
        msgid = string.Empty;
        agnid = string.Empty;
        resdesc = string.Empty;
        ref1 = string.Empty;
        ref3 = string.Empty;

        string amt = string.Empty;
        string pin = string.Empty;
        string expiry = string.Empty;
        string reshashvalue = string.Empty;
        string tmphashvalue = string.Empty;
        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }


        if (ht.ContainsKey("MessageID"))
        {
            msgid = ht["MessageID"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("ResCode"))
        {
            rescode = ht["ResCode"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing ResCode <ResCode> Tag");
            return false;
        }

        if (ht.ContainsKey("ResDesc"))
        {
            resdesc = ht["ResDesc"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing ResDesc <ResDesc> Tag");
            return false;
        }
        if (ht.ContainsKey("AgentID"))
        {
            agnid = ht["AgentID"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing SerialNo <AgentID> Tag");
            return false;
        }

        if (ht.ContainsKey("DigitalCode"))
        {
            ref3 = ht["DigitalCode"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Ref1 <DigitalCode> Tag");
            return false;
        }
        if (ht.ContainsKey("SerialNo"))
        {
            ref1 = ht["SerialNo"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
        }
        if (ht.ContainsKey("Amount"))
        {
            amt = ht["Amount"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Amount <Amount> Tag");
            return false;
        }
        if (ht.ContainsKey("Expiry"))
        {
            expiry = ht["Expiry"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
        }

        if (ht.ContainsKey("HashValue"))
        {
            reshashvalue = ht["HashValue"].ToString();
        }

        string key = taxID == "0000000000017" ? ConfigurationManager.AppSettings["easyPointSecretKey"].ToString() : taxID == "0000000000018" ? ConfigurationManager.AppSettings["easyPointMercyKey"].ToString() : ConfigurationManager.AppSettings["MercycorpsGenerateKey"].ToString();

        tmphashvalue = Utils.hashstrConfirmeasypointRes(msgid, agnid, rescode, resdesc, ref3, ref1, expiry, amt, key);

        #region <-- Check EasyPoint Confirm response Hash value -->

        if (reshashvalue != tmphashvalue)
        {
            rescode = "05";
            resdesc = "Hash Value Missmatch";
            writeLog("Inquiry Hash Value Missmatch.");
            return false;
        }

        #endregion
        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(rescode) || String.IsNullOrEmpty(agnid) || String.IsNullOrEmpty(amt) || String.IsNullOrEmpty(ref1) || String.IsNullOrEmpty(ref3))
        {
            rescode = string.IsNullOrEmpty(rescode) ? "07" : rescode;
            resdesc = string.IsNullOrEmpty(rescode) ? "Invalid Message" : resdesc;
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        return true;


    }

    #endregion

    #region <-- ValadateRedeem Confirm Response -->
    bool IsValidateRedeemConfirmResEasyPoint(Hashtable ht, string taxID, out string rescode, out string resdesc, out string version, out string msgid, out string ref1, out string ref5, out string agnid)
    {
        version = string.Empty;
        string ts = string.Empty;
        msgid = string.Empty;
        agnid = string.Empty;
        string partneragnid = string.Empty;
        rescode = string.Empty;
        resdesc = string.Empty;
        ref1 = string.Empty;
        ref5 = string.Empty;
        string amtesp = string.Empty;
        string reshashvalue = string.Empty;
        string tmphashvalue = string.Empty;
        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }


        if (ht.ContainsKey("MessageID"))
        {
            msgid = ht["MessageID"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("ResCode"))
        {
            rescode = ht["ResCode"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("ResDesc"))
        {
            resdesc = ht["ResDesc"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("PartnerID"))
        {
            agnid = ht["PartnerID"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing PartnerID <PartnerID> Tag");
            return false;
        }
        if (ht.ContainsKey("AgentID"))
        {
            partneragnid = ht["AgentID"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing SerialNo <AgentID> Tag");
            return false;
        }
        if (ht.ContainsKey("DigitalCode"))
        {
            ref1 = ht["DigitalCode"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Ref1 <DigitalCode> Tag");
            return false;
        }
        if (ht.ContainsKey("TranAmount"))
        {
            amtesp = ht["TranAmount"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing TranAmount <TranAmount> Tag");
            return false;
        }
        if (ht.ContainsKey("TranRef"))
        {
            ref5 = ht["TranRef"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
        }

        if (ht.ContainsKey("HashValue"))
        {
            reshashvalue = ht["HashValue"].ToString();
        }
        //Version + TimeStamp + MessageID + PartnerID + DigitalCode + ResCode + TranRef
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(amtesp) || String.IsNullOrEmpty(partneragnid) || String.IsNullOrEmpty(rescode) || String.IsNullOrEmpty(msgid) || String.IsNullOrEmpty(agnid) || String.IsNullOrEmpty(ref1) || String.IsNullOrEmpty(ref5))
        {
            rescode = string.IsNullOrEmpty(rescode) ? "07" : rescode;
            resdesc = string.IsNullOrEmpty(rescode) ? "Invalid Message" : resdesc;
            writeLog("Error in Validation EasyPoint Redeem Response : Data is Null or Empty");
            return false;
        }

        string key = taxID == "7777777777777" ? ConfigurationManager.AppSettings["easyPointMercyRedeemKey"].ToString() : ConfigurationManager.AppSettings["MercyCorpsRedeemKey"].ToString();

        tmphashvalue = Utils.hashstrRedeemConfirmEasyPointRes(version, ts, msgid, agnid, partneragnid, ref1, rescode, ref5, amtesp, key);


        #region <-- Check EasyPoint Confirm response Hash value -->
        if (reshashvalue != tmphashvalue)
        {
            rescode = "05";
            resdesc = "Hash Value Missmatch";
            writeLog("Inquiry Hash Value Missmatch.");
            return false;
        }
        #endregion
        //Check Null or Empty String

        if (rescode != "00")
        {
            writeLog("All Valadation For EasyPoint Response OK but Response Code is Not 00 Responsecode:" + rescode + "|Response Description:" + resdesc);
            return false;
        }
        return true;
    }

    #endregion

    bool IsValidateConfirmReqOneStop(Hashtable ht, out string rescode, out string resdesc, out string version, out string msgid, out string ref1, out string ref3)
    {

        rescode = string.Empty;
        version = string.Empty;
        string ts = string.Empty;
        resdesc = string.Empty;
        ref1 = string.Empty;
        ref3 = string.Empty;
        decimal amount = 0;
        msgid = string.Empty;

        string reshashvalue = string.Empty;
        string tmphashvalue = string.Empty;
        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }


        if (ht.ContainsKey("MessageID"))
        {
            msgid = ht["MessageID"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }
        if (ht.ContainsKey("Ref1"))
        {
            ref1 = ht["Ref1"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Ref1 <Ref1> Tag");
            return false;
        }
        if (ht.ContainsKey("Ref3"))
        {
            ref3 = ht["Ref3"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Ref3 <Ref3> Tag");
            return false;
        }
        if (ht.ContainsKey("Amount"))
        {
            amount = Convert.ToDecimal(ht["Amount"].ToString());
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Amount <Amount> Tag");
            return false;
        }

        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(ref1) || amount <= 0)
        {
            rescode = "07";
            resdesc = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }
        return true;


    }

    public static string ComputeHash(string plainText, string saltKey)
    {
        byte[] saltBytes = null, plainTextBytes = null, plainTextWithSaltBytes = null, hashBytes = null, hashWithSaltBytes = null;
        string hashValue = "";
        HashAlgorithm algorithm = null;

        try
        {
            saltBytes = Convert.FromBase64String(saltKey);

            // Convert plain text into a byte array.
            plainTextBytes = Encoding.UTF8.GetBytes(plainText);

            // Allocate array, which will hold plain text and salt.
            plainTextWithSaltBytes = new byte[plainTextBytes.Length + saltBytes.Length];

            // Copy plain text bytes into resulting array.
            for (int i = 0; i < plainTextBytes.Length; i++)
                plainTextWithSaltBytes[i] = plainTextBytes[i];

            // Append salt bytes to the resulting array.
            for (int i = 0; i < saltBytes.Length; i++)
                plainTextWithSaltBytes[plainTextBytes.Length + i] = saltBytes[i];

            // Compute hash value of our plain text with appended salt.
            algorithm = new SHA1Managed();
            hashBytes = algorithm.ComputeHash(plainTextWithSaltBytes);

            // Create array which will hold hash and original salt bytes.
            hashWithSaltBytes = new byte[hashBytes.Length + saltBytes.Length];

            // Copy hash bytes into resulting array.
            for (int i = 0; i < hashBytes.Length; i++)
                hashWithSaltBytes[i] = hashBytes[i];

            // Append salt bytes to the result.
            for (int i = 0; i < saltBytes.Length; i++)
                hashWithSaltBytes[hashBytes.Length + i] = saltBytes[i];

            // Convert result into a base64-encoded string.
            hashValue = Convert.ToBase64String(hashWithSaltBytes);
        }
        catch
        {
            throw;
        }
        finally
        {
            saltBytes = null;
            plainTextBytes = null;
            plainTextWithSaltBytes = null;
            hashBytes = null;
            hashWithSaltBytes = null;
        }

        return hashValue;
    }

    public string generatepass()
    {
        Random generator = new Random();

        String pass = generator.Next(0, 1000000).ToString("D6");
        return pass;
    }

    public static string stringToBase64(string st)
    {
        byte[] b = new byte[st.Length];
        for (int i = 0; i < st.Length; i++)
        {
            b[i] = Convert.ToByte(st[i]);
        }
        return Convert.ToBase64String(b);
    }

    public static string GeterrorResponse(string rescode, string resdesc, long txnID, string logerrormessage)
    {
        writeLog("Update Error");
        string errMsg = string.Empty;
        if (!_agentWCF.updateError(txnID, "ER", logerrormessage, out errMsg))
        {
            writeLog("Error in updateError : " + errMsg);
        }

        return Utils.getErrorRes(rescode, resdesc);
    }

    public string UpdateErrorWithAddBalance(string rescode, string resdesc, long txnID, string logerrormessage, int agentID, double amount, string isAgreement)
    {
        writeLog("Update Error With Add Balance");
        string errMsg = string.Empty;
        double availableBalance = 0;
        double ledgerBalance = 0;
        if (!_agentWCF.UpdateErrorWithAddingBalance(txnID, "ER", logerrormessage, agentID, amount, isAgreement, out errMsg, out availableBalance, out ledgerBalance))
        {
            writeLog("Error in update Error with Add Balance : " + errMsg);
        }
        writeLog("After Update Error With Add Balance| TxnID:" + txnID + "|agentID:" + agentID + "AvailableBalance:" + availableBalance + "LedgerBalance:" + ledgerBalance);
        return Utils.getErrorRes(rescode, resdesc);
    }

    public static string GetErrorResponseWithAddBalance(string rescode, string resdesc, long txnID, string logerrormessage, int agentID, double amount, string isAgreement, string taxId = "")
    {
        writeLog("Update Error With Add Balance");
        string errMsg = string.Empty;
        double availableBalance = 0;
        double ledgerBalance = 0;
        if (!_agentWCF.UpdateErrorWithAddingBalance(txnID, "ER", resdesc, agentID, amount, isAgreement, out errMsg, out availableBalance, out ledgerBalance))
        {
            writeLog("Error in update Error with Add Balance : " + errMsg);
        }
        writeLog("After Update Error With Add Balance| TxnID:" + txnID + "|agentID:" + agentID + "AvailableBalance:" + availableBalance + "LedgerBalance:" + ledgerBalance);
        //Processing is failed because of internal server error, please try again
        return Utils.getErrorRes(rescode, resdesc, taxId);
    }

    public static string ChannelPlusGetErrorResponse(string rescode, string resdesc, long txnID, string logerrormessage, int agentID, int agentIDPlus, double amount, double readdedamount, string isAgreement)
    {
        writeLog("Update Error With Add Balance");
        string errMsg = string.Empty;
        double availableBalance = 0;
        double ledgerBalance = 0;
        if (!_agentWCF.UpdateErrorWithAddingBalance(txnID, "ER", logerrormessage, agentID, amount, isAgreement, out errMsg, out availableBalance, out ledgerBalance))
        {
            writeLog("Error in update Error with Add Balance : " + errMsg);
        }
        if (!_agentWCF.minusChannelPlusAmt(txnID, "ER", logerrormessage, agentIDPlus, readdedamount, isAgreement, out errMsg, out availableBalance, out ledgerBalance))
        {
            writeLog("Error in minusChannelPlusAmt : " + errMsg);
        }

        writeLog("After Update Error With Add Balance| TxnID:" + txnID + "|agentID:" + agentID + "AvailableBalance:" + availableBalance + "LedgerBalance:" + ledgerBalance);
        return Utils.getErrorRes(rescode, resdesc);
    }

    public static string getCNPErrMsg(string errcode)
    {
        string errDesp = string.Empty;
        errDesp = errcode == "1403" ? "Paid Already" : errcode == "1402" ? "Payment Expired" : errcode == "1404" ? "Bill Amount Missmatch" : "Payment Fail:(" + errcode + ")";
        return errDesp;
    }

    #region <-- 123Remit -->
    private string Get123RemitNotificationMessage(decimal Amount, string BranchName, string ReferenceNo, string Status)
    {
        string notiMessge = string.Empty;
        if (Status == "CashIn")
        {
            notiMessge = ConfigurationManager.AppSettings["123RemitCashInNotification"].ToString();
            notiMessge = notiMessge.Replace("[Amount]", Amount.ToString("#,##0.00"));
            notiMessge = notiMessge.Replace("[Branch]", BranchName);
        }
        else if (Status == "Cancel")
        {
            notiMessge = ConfigurationManager.AppSettings["123RemitCancelNotification"].ToString();
            notiMessge = notiMessge.Replace("[Amount]", Amount.ToString("#,##0.00"));
            notiMessge = notiMessge.Replace("[Reference]", ReferenceNo);
        }
        return notiMessge;
    }
    #endregion

    #region <-- Biller Validation parameter for Mobile -->
    public string SystemSettingReq(string reqXml)
    {
        string response = string.Empty;
        loginRequestModel valadationReqData = new loginRequestModel();
        Hashtable ht = Utils.getHTableFromXML(reqXml);
        try
        {
            valadationReqData = IsValidateSystemSettingReq(ht);
            if (valadationReqData.Result)
            {
                XmlDocument doc = new XmlDocument();
                string path = ConfigurationManager.AppSettings["systemSettingPath"].ToString();
                doc.Load(path);
                string xmlcontents = doc.InnerXml;
                StringBuilder sb = new StringBuilder();
                sb.Append("<SystemSettingRes>");
                sb.Append("<Version>1.0</Version>");
                sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                sb.Append("<ResCode>00</ResCode>");
                sb.Append("<ResDesc>SUCCESS</ResDesc>");
                sb.Append("<MessageID>" + valadationReqData.messageid + "</MessageID>");
                sb.Append(xmlcontents);
                sb.Append("</SystemSettingRes>");
                return sb.ToString();
            }
            else
            {
                response = Utils.getErrorRes(valadationReqData.rescode, valadationReqData.resdesc);
            }
        }
        catch (Exception ex)
        {
            writeLog("Exception occur :" + ex.Message);
            response = Utils.getErrorRes("99", "System Error");
        }
        return response;
    }

    public loginRequestModel IsValidateSystemSettingReq(Hashtable ht)
    {
        loginRequestModel valadationParaReq = new loginRequestModel();


        valadationParaReq.Result = true;

        if (ht.ContainsKey("Version"))
        {
            valadationParaReq.version = ht["Version"].ToString();
        }
        else
        {
            valadationParaReq.rescode = "06";
            valadationParaReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            valadationParaReq.Result = false;
            return valadationParaReq;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            valadationParaReq.timeStamp = ht["TimeStamp"].ToString();
        }
        else
        {
            valadationParaReq.rescode = "06";
            valadationParaReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            valadationParaReq.Result = false;
            return valadationParaReq;
        }
        if (ht.ContainsKey("Email"))
        {
            valadationParaReq.userid = ht["Email"].ToString();
        }
        else
        {
            valadationParaReq.rescode = "06";
            valadationParaReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            valadationParaReq.Result = false;
            return valadationParaReq;
        }

        if (ht.ContainsKey("Password"))
        {
            valadationParaReq.password = ht["Password"].ToString();
        }
        else
        {
            valadationParaReq.rescode = "06";
            valadationParaReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Password> Tag");
            valadationParaReq.Result = false;
            return valadationParaReq;
        }





        if (ht.ContainsKey("MessageID"))
        {
            valadationParaReq.messageid = ht["MessageID"].ToString();
        }
        else
        {
            valadationParaReq.rescode = "06";
            valadationParaReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing TxnPerPage <MessageID> Tag");
            valadationParaReq.Result = false;
            return valadationParaReq;
        }

        //Check Null or Empty String
        if (String.IsNullOrEmpty(valadationParaReq.version) || String.IsNullOrEmpty(valadationParaReq.timeStamp) || String.IsNullOrEmpty(valadationParaReq.userid) || String.IsNullOrEmpty(valadationParaReq.password) || String.IsNullOrEmpty(valadationParaReq.messageid))//cardListReq.cardParPage < 1 || cardListReq.pageNo < 1 ||
        {
            valadationParaReq.rescode = "07";
            valadationParaReq.resdesc = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            valadationParaReq.Result = false;
            return valadationParaReq;
        }


        string code = string.Empty;
        string desp = string.Empty;

        valadationParaReq.Result = authentication(valadationParaReq.userid, valadationParaReq.password, out code, out desp);
        valadationParaReq.rescode = code;
        valadationParaReq.resdesc = desp;

        return valadationParaReq;

    }

    #endregion

    #region <-- Viberout Country List Request -->

    public string CountryListReq(string reqXml)
    {
        string response = string.Empty;
        loginRequestModel valadationReqData = new loginRequestModel();
        Hashtable ht = Utils.getHTableFromXML(reqXml);
        try
        {
            valadationReqData = IsValidateCountryListReq(ht);
            if (valadationReqData.Result)
            {
                XmlDocument doc = new XmlDocument();
                string path = ConfigurationManager.AppSettings["ViberOutCountryListPath"].ToString();
                doc.Load(path);
                string xmlcontents = doc.InnerXml;
                StringBuilder sb = new StringBuilder();
                sb.Append("<CountryListRes>");
                sb.Append("<Version>1.0</Version>");
                sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                sb.Append("<ResCode>00</ResCode>");
                sb.Append("<ResDesc>SUCCESS</ResDesc>");
                sb.Append("<MessageID>" + valadationReqData.messageid + "</MessageID>");
                sb.Append(xmlcontents);
                sb.Append("</CountryListRes>");
                return sb.ToString();
            }
            else
            {
                response = Utils.getErrorRes(valadationReqData.rescode, valadationReqData.resdesc);
            }
        }
        catch (Exception ex)
        {
            writeLog("Exception occur :" + ex.Message);
            response = Utils.getErrorRes("99", "System Error");
        }
        return response;
    }

    public loginRequestModel IsValidateCountryListReq(Hashtable ht)
    {
        loginRequestModel valadationParaReq = new loginRequestModel();


        valadationParaReq.Result = true;

        if (ht.ContainsKey("Version"))
        {
            valadationParaReq.version = ht["Version"].ToString();
        }
        else
        {
            valadationParaReq.rescode = "06";
            valadationParaReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            valadationParaReq.Result = false;
            return valadationParaReq;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            valadationParaReq.timeStamp = ht["TimeStamp"].ToString();
        }
        else
        {
            valadationParaReq.rescode = "06";
            valadationParaReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            valadationParaReq.Result = false;
            return valadationParaReq;
        }
        if (ht.ContainsKey("Email"))
        {
            valadationParaReq.userid = ht["Email"].ToString();
        }
        else
        {
            valadationParaReq.rescode = "06";
            valadationParaReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            valadationParaReq.Result = false;
            return valadationParaReq;
        }

        if (ht.ContainsKey("Password"))
        {
            valadationParaReq.password = ht["Password"].ToString();
        }
        else
        {
            valadationParaReq.rescode = "06";
            valadationParaReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Password> Tag");
            valadationParaReq.Result = false;
            return valadationParaReq;
        }





        if (ht.ContainsKey("MessageID"))
        {
            valadationParaReq.messageid = ht["MessageID"].ToString();
        }
        else
        {
            valadationParaReq.rescode = "06";
            valadationParaReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing TxnPerPage <MessageID> Tag");
            valadationParaReq.Result = false;
            return valadationParaReq;
        }

        //Check Null or Empty String
        if (String.IsNullOrEmpty(valadationParaReq.version) || String.IsNullOrEmpty(valadationParaReq.timeStamp) || String.IsNullOrEmpty(valadationParaReq.userid) || String.IsNullOrEmpty(valadationParaReq.password) || String.IsNullOrEmpty(valadationParaReq.messageid))//cardListReq.cardParPage < 1 || cardListReq.pageNo < 1 ||
        {
            valadationParaReq.rescode = "07";
            valadationParaReq.resdesc = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            valadationParaReq.Result = false;
            return valadationParaReq;
        }


        string code = string.Empty;
        string desp = string.Empty;

        valadationParaReq.Result = authentication(valadationParaReq.userid, valadationParaReq.password, out code, out desp);
        valadationParaReq.rescode = code;
        valadationParaReq.resdesc = desp;

        return valadationParaReq;

    }


    #endregion

    #region <-- 123 check For ABC CashCard -->

    public bool IsABCCashCard(string paymentCode)
    {
        bool result = false;

        if (paymentCode.Length == 16)
        {
            paymentCode = paymentCode.Substring(0, 6);

            if (paymentCode == ConfigurationManager.AppSettings["AbcBin"].ToString())
            {
                result = true;
            }
        }

        return result;
    }

    public bool CheckAbcCashAmount(string amount)
    {
        bool result = false;
        double dblAmount = 0;
        string minamt = string.Empty;
        string maxamt = string.Empty;
        minamt = ConfigurationManager.AppSettings["MinAmount"].ToString();
        maxamt = ConfigurationManager.AppSettings["MaxAmount"].ToString();
        try
        {
            dblAmount = double.Parse(amount);

            if (dblAmount > 0 && dblAmount >= double.Parse(minamt) && dblAmount <= double.Parse(maxamt))
            {
                result = true;
            }
            else
            {
                writeLog("ABCCashCard Topup amount is 0");
            }
        }
        catch (Exception ex)
        {
            writeLog("Exception error occur when parsing amount to double:" + ex.Message);
        }
        return result;
    }
    #endregion


    #endregion

    #region FraudProfile
    public bool CheckFraud(out string errMsg, long txnID, string userID, string billerID, string branchCode, string agentCode, string amount, string type, string messageId = "")
    {
        writeLog(messageId + " | Check Fraud Function Start ");
        errMsg = "";
        writeLog(messageId + " | txnID : " + txnID +
        ",userID : " + userID +
        ",billerID : " + billerID +
        ",branchCode : " + branchCode +
        ",agentCode : " + agentCode +
        ",amount : " + amount);
        TRANReq tranReq = new TRANReq();
        tranReq.TransactionID = Convert.ToInt32(txnID);
        tranReq.UserID = userID;
        tranReq.BillerID = Convert.ToInt32(billerID);
        tranReq.BranchCode = branchCode;
        tranReq.AgentCode = agentCode;
        tranReq.Amount = Convert.ToDecimal(amount);
        tranReq.Type = type;

        writeLog(messageId + " | Transaction Request Object created for Fraud Check");

        var json_serializer1 = new JavaScriptSerializer();
        var json_serializerpinres = new JavaScriptSerializer();
        string jsonReq = json_serializer1.Serialize(tranReq);
        string returnResult = PostFraudProfile(jsonReq, messageId);

        TRANRes tranRes = new TRANRes();
        tranRes = json_serializerpinres.Deserialize<TRANRes>(returnResult);

        if (tranRes.Status == "true")
        {
            errMsg = tranRes.Description;
            return true;
        }
        else
        {
            errMsg = tranRes.Description;
            return false;
        }
    }

    public static string PostFraudProfile(string jsonReq, string messageId = "")
    {
        string result = string.Empty;
        string URL = ConfigurationManager.AppSettings["fraudEngineURL"].ToString();

        try
        {
            writeLog(messageId + " | $$$$$$$$$$$ Start Request Fraud API $$$$$$$$$$$$$$$$$$$$$$$");
            HttpWebRequest objRequest = (HttpWebRequest)(WebRequest.Create(URL));
            objRequest.Method = "POST";
            objRequest.ProtocolVersion = HttpVersion.Version11;
            System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
            objRequest.Timeout = 2 * 60000; //In milliseconds - in this case 60 seconds

            objRequest.ContentType = "application/json";
            objRequest.ContentLength = jsonReq.Length;
            using (var streamWriter = new StreamWriter(objRequest.GetRequestStream()))
            {
                streamWriter.Write(jsonReq);
                streamWriter.Flush();
                streamWriter.Close();
            }

            var httpResponse = (HttpWebResponse)objRequest.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                result = streamReader.ReadToEnd();
            }
            log.Info(messageId + " | " + result);
        }
        catch (Exception e)
        {
            log.Info(e);
        }
        return result;
    }

    public class TRANReq
    {
        public int TransactionID { get; set; }
        public string UserID { get; set; }
        public int BillerID { get; set; }
        public string BranchCode { get; set; }
        public string AgentCode { get; set; }
        public decimal Amount { get; set; }
        public string Type { get; set; }
    }

    public class TRANRes
    {
        public string Status { get; set; }
        public string Description { get; set; }

    }
    #endregion

    public bool SendUnpairEmail(string userID)
    {
        writeLog("Ok in entering SendUnpairEmail method");
        writeLog("UserID:" + userID);

        try
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("<strong>" + ConfigurationManager.AppSettings["unpairtitle"].ToString() + "<br/><br/>");
            writeLog("msgBody");
            sb.Append(ConfigurationManager.AppSettings["msgbodyunpair"].ToString() + "<br/><br/>");
            sb.Append("<table>");
            sb.Append("<tr><td>User ID </td><td>:</td><td>" + userID + "</td></tr>");
            sb.Append("</table></br><hr>");
            sb.Append("Please do not reply to this email. This mailbox is not monitored and you will not receive a response. For assistance, please use details as mentioned above. <br/>");

            writeLog("fromMail");
            string fromEmailAddress = ConfigurationManager.AppSettings["fromEmailreg"].ToString();
            string toEmail = ConfigurationManager.AppSettings["toEmailUnpair"].ToString();
            writeLog("Fromemail:" + fromEmailAddress + "To Email:" + toEmail);
            writeLog("Subject");
            string subject = ConfigurationManager.AppSettings["unpairsubject"].ToString() + " for UserID " + userID + " at " + System.DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss");
            writeLog("Subject:" + subject);
            string msgBody = sb.ToString();
            writeLog("Message Body:" + msgBody);
            AwsEmailAPI.ServiceSoapClient emailApi = new AwsEmailAPI.ServiceSoapClient();
            string errMsg = string.Empty;
            bool sent = false;
            sent = emailApi.sendAWSMail(fromEmailAddress, fromEmailAddress, toEmail, "", "", subject, msgBody);
            if (sent)
            {
                writeLog("Return ture email was sent");
                return true;
            }
            else
            {
                writeLog("Email not sent");
                return false;
            }
        }
        catch (Exception ex)
        {
            writeLog("Exception Error in sending Email" + ex.Message);
            return false;
        }
    }

    public async Task<InquiryMptDataPackageResponse> GetInquiryResponseForFtthOrWtth(string url, string mobileNumber, string billerCode)
    {
        Token = GetOAuthToken();
        var channel = ConfigurationManager.AppSettings["EsbaChannel"].ToString();

        const string jsonData = "{\'RegisteredMobileNo\':\'\'}";
        var dynamicData = JsonConvert.DeserializeObject<dynamic>(jsonData);
        dynamicData.RegisteredMobileNo = mobileNumber;

        var data = JsonConvert.SerializeObject(dynamicData);
        data = data.Replace("\"", "'");

        var model = new InquiryMptDataPackageResquest(Token.Token, channel, billerCode, data);
        var json = JsonConvert.SerializeObject(model);
        var response = Utils.PostEba(json, url);

        writeLog("Eba inquriy response for FTTHORWTTX :" + response);

        if (string.IsNullOrEmpty(response)) return null;
        var a = JsonConvert.DeserializeObject<InquiryMptDataPackageResponse>(response);
        return a;
    }

    public async Task<ConfirmMptDataPackageResponse> GetConfirmResponseForFtthOrWtth(string url, string customerId, string amount, string devices, long txnId, string billerCode, string productId)
    {
        Token = GetOAuthToken();
        var channel = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
        var channelRefId = txnId.ToString();

        const string jsonData = "{\'CustomerID\':\'\',\'Amount\':\'\', \'Devices\':\'\', \'product_id\':\'\'}";
        var dynamicData = JsonConvert.DeserializeObject<dynamic>(jsonData);
        dynamicData.CustomerID = customerId;
        dynamicData.Amount = amount;
        dynamicData.Devices = devices;
        dynamicData.product_id = productId;

        var data = JsonConvert.SerializeObject(dynamicData);
        data = data.Replace("\"", "'");

        var model = new ConfirmMptDataPackageResquest(Token.Token, channel, channelRefId, billerCode, Convert.ToDouble(amount), data);
        var json = JsonConvert.SerializeObject(model);
        writeLog("Eba confirm request for FTTHORWTTX :" + json);
        var response = Utils.PostEba(json, url);

        writeLog("Eba confirm response for FTTHORWTTX :" + response);

        if (string.IsNullOrEmpty(response)) return null;
        return JsonConvert.DeserializeObject<ConfirmMptDataPackageResponse>(response);
    }

    public async Task<GiftCardsConfirmResponse> ConfirmOoredooFtth(string txnId, double amount, string customerId, string invoiceNumber, string customerName)
    {
        Token = GetOAuthToken();
        var partnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
        var ebaUrl = ConfigurationManager.AppSettings["GiftCardConfirmUrl"].ToString();
        var billerCode = ConfigurationManager.AppSettings["OoredooFtthBillerCode"].ToString();
        var partnerRefNo = txnId;
        var detail = new OoredooFtthDetail(customerId, amount, invoiceNumber, customerName);
        var detailJson = JsonConvert.SerializeObject(detail);
        var confirmRequest = new GiftCardsConfirmResquest(Token.Token, partnerCode, partnerRefNo, billerCode, amount, detailJson);
        var confirmRequestJson = JsonConvert.SerializeObject(confirmRequest);
        var response = Utils.PostEba(confirmRequestJson, ebaUrl);

        writeLog("Eba Confirm response for " + billerCode + " : " + response);

        if (string.IsNullOrEmpty(response))
        {
            return null;
        }

        return JsonConvert.DeserializeObject<GiftCardsConfirmResponse>(response);
    }
    public double GetBillerAmount(double amount)
    {
        if (string.IsNullOrEmpty(billerPercentFee))
        {
            billerPercentFee = "0";
        }

        if (string.IsNullOrEmpty(billerFlatFee))
        {
            billerFlatFee = "0";
        }

        if (string.IsNullOrEmpty(billerServicePercentFee))
        {
            billerServicePercentFee = "0";
        }

        if (string.IsNullOrEmpty(billerServiceFlatFee))
        {
            billerServiceFlatFee = "0";
        }

        BillerDiscountFee = Utils.getFeeNotRound(amount, float.Parse(billerPercentFee), double.Parse(billerFlatFee));
        BillerServiceFee = Utils.getFeeNotRound(amount, float.Parse(billerServicePercentFee), double.Parse(billerServiceFlatFee));

        return amount + BillerServiceFee - BillerDiscountFee;
    }

    public async Task<InquiryMptDataPackageResponse> GetDataPackages(string billerCode)
    {
        try
        {
            Token = GetOAuthToken();
            var partnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString();

            var ebaUrl = ConfigurationManager.AppSettings["MptDataPackageInquiryUrl"].ToString();
            var type = ConfigurationManager.AppSettings["Type"].ToString();

            const string jsonData = "{\'Type\':\'\'}";
            var dynamicData = JsonConvert.DeserializeObject<dynamic>(jsonData);
            dynamicData.Type = type;

            var data = JsonConvert.SerializeObject(dynamicData);
            data = data.Replace("\"", "'");
            var model = new InquiryMptDataPackageResquest(Token.Token, partnerCode, billerCode, data);
            var json = JsonConvert.SerializeObject(model);

            var response = Utils.PostEba(json, ebaUrl);

            writeLog("Eba inquriy response for " + billerCode + " : " + response);

            if (string.IsNullOrEmpty(response)) return null;

            return JsonConvert.DeserializeObject<InquiryMptDataPackageResponse>(response);
        }
        catch (Exception ex)
        {
            writeLog(ex.Message);
            return null;
        }
    }

    public async Task<ConfirmPackageResponse> ConfirmParamiGasPackage(string txnId, double amount, string package, string customerName, string address, string division, string township, string phoneNumber)
    {
        Token = GetOAuthToken();
        var partnerCode = ConfigurationManager.AppSettings["ParamiGasPartnerCode"].ToString();
        var billerCode = ConfigurationManager.AppSettings["ParamiGasBillerCode"].ToString();
        var ebaUrl = ConfigurationManager.AppSettings["ParamiGasPackageConfirmUrl"].ToString();
        var partnerRefNo = txnId;

        const string jsonData = "{\'PackageCode\':\'\',\'Mobile\':\'\', \'Address\':\'\', \'Division\':\'\', \'Township\':\'\', \'Amount\':\'\'}";
        var dynamicData = JsonConvert.DeserializeObject<dynamic>(jsonData);
        dynamicData.PackageCode = package;
        dynamicData.Mobile = phoneNumber;
        dynamicData.Address = address;
        dynamicData.Division = division;
        dynamicData.Township = township;
        dynamicData.Amount = amount;

        var data = JsonConvert.SerializeObject(dynamicData);
        data = data.Replace("\"", "'");
        var model = new ConfirmPackageResquest(Token.Token, partnerCode, partnerRefNo, billerCode, amount, data);
        var json = JsonConvert.SerializeObject(model);

        var response = Utils.PostEba(json, ebaUrl);

        writeLog("Eba Confirm response for Parami Packages :" + response);

        if (string.IsNullOrEmpty(response)) return null;

        return JsonConvert.DeserializeObject<ConfirmPackageResponse>(response);
    }

    public async Task<GetPackageResponse> GetParamiGasPackages()
    {
        try
        {
            Token = GetOAuthToken();
            var partnerCode = ConfigurationManager.AppSettings["ParamiGasPartnerCode"].ToString();
            var billerCode = ConfigurationManager.AppSettings["ParamiGasBillerCode"].ToString();
            var ebaUrl = ConfigurationManager.AppSettings["ParamiGasPackageInquiryUrl"].ToString();
            var type = ConfigurationManager.AppSettings["ParamiGasType"].ToString();

            const string jsonData = "{\'Type\':\'\'}";
            var dynamicData = JsonConvert.DeserializeObject<dynamic>(jsonData);
            dynamicData.Type = type;

            var data = JsonConvert.SerializeObject(dynamicData);
            data = data.Replace("\"", "'");

            var model = new GetPackageRequest(Token.Token, partnerCode, billerCode, data);
            var json = JsonConvert.SerializeObject(model);

            var response = Utils.PostEba(json, ebaUrl);

            writeLog("Eba inquriy response for Parami Packages :" + response);

            if (string.IsNullOrEmpty(response)) return null;

            return JsonConvert.DeserializeObject<GetPackageResponse>(response);
        }
        catch (Exception ex)
        {
            return null;
        }
    }

    public async Task<GiftCardsConfirmResponse> ConfirmLarLarKyi(string txnId, double amount)
    {
        Token = GetOAuthToken();
        var partnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
        var billerCode = ConfigurationManager.AppSettings["LarLarKyiBillerCode"].ToString();
        var ebaUrl = ConfigurationManager.AppSettings["MaharMobileConfirmUrl"].ToString();
        var partnerRefNo = txnId;
        string detail = "{\'Deno\':\'" + amount + "\'}";

        var confirmRequest = new GiftCardsConfirmResquest(Token.Token, partnerCode, partnerRefNo, billerCode, amount, detail);
        var confirmRequestJson = JsonConvert.SerializeObject(confirmRequest);
        var response = Utils.PostEba(confirmRequestJson, ebaUrl);

        writeLog("Eba Confirm response for LarLarKyi :" + response);

        if (string.IsNullOrEmpty(response))
        {
            return null;
        }

        return JsonConvert.DeserializeObject<GiftCardsConfirmResponse>(response);
    }

    public async Task<EnquiryGiftCardResponse> GetDenoListForGiftCard(string billerCode)
    {
        try
        {
            Token = GetOAuthToken();
            var data = string.Empty;

            var partnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
            var ebaUrl = ConfigurationManager.AppSettings["GiftCardDenoListUrl"].ToString();
            var type = ConfigurationManager.AppSettings["DenoType"].ToString();

            const string jsonData = "{\'Type\':\'\'}";
            var dynamicData = JsonConvert.DeserializeObject<dynamic>(jsonData);
            dynamicData.Type = type;

            data = JsonConvert.SerializeObject(dynamicData);


            if (billerCode == ConfigurationManager.AppSettings["MyanPwelBillerCode"].ToString())
            {
                data = GetMyanPwelDetail();
            }

            if (billerCode == ConfigurationManager.AppSettings["MinTeinKhaBillerCode"].ToString())
            {
                data = GetServiceListDetail();
            }

            data = data.Replace("\"", "'");
            var model = new EnquiryGiftCardRequest(Token.Token, partnerCode, billerCode, data);
            var json = JsonConvert.SerializeObject(model);

            var response = Utils.PostEba(json, ebaUrl);

            writeLog("Eba response for gift card deno list :" + response);

            if (string.IsNullOrEmpty(response)) return null;

            return JsonConvert.DeserializeObject<EnquiryGiftCardResponse>(response);
        }
        catch (Exception ex)
        {
            return null;
        }
    }

    public async Task<EnquiryGiftCardResponse> GetAstrologer(string serviceId, string billerCode)
    {
        Token = GetOAuthToken();
        var data = string.Empty;

        var partnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
        var ebaUrl = ConfigurationManager.AppSettings["GiftCardDenoListUrl"].ToString();
        var type = ConfigurationManager.AppSettings["AstrologerType"].ToString();

        const string jsonData = "{\'Type\':\'\', \'ServiceId\':\'\'}";
        var dynamicData = JsonConvert.DeserializeObject<dynamic>(jsonData);
        dynamicData.Type = type;
        dynamicData.ServiceId = serviceId;
        data = JsonConvert.SerializeObject(dynamicData);

        data = data.Replace("\"", "'");
        var model = new EnquiryGiftCardRequest(Token.Token, partnerCode, billerCode, data);
        var json = JsonConvert.SerializeObject(model);

        var response = Utils.PostEba(json, ebaUrl);

        writeLog("Eba response for A list :" + response);

        if (string.IsNullOrEmpty(response)) return null;

        return JsonConvert.DeserializeObject<EnquiryGiftCardResponse>(response);
    }

    public string GetMyanPwelDetail()
    {
        var type = ConfigurationManager.AppSettings["MyanPwelDenoType"].ToString();
        const string jsonData = "{\'type\':\'\'}";
        var dynamicData = JsonConvert.DeserializeObject<dynamic>(jsonData);
        dynamicData.type = type;

        return JsonConvert.SerializeObject(dynamicData);
    }

    public string GetServiceListDetail()
    {
        var type = ConfigurationManager.AppSettings["ServiceListCode"].ToString();
        const string jsonData = "{\'Type\':\'\'}";
        var dynamicData = JsonConvert.DeserializeObject<dynamic>(jsonData);
        dynamicData.Type = type;

        return JsonConvert.SerializeObject(dynamicData);
    }

    public async Task<EnquiryGiftCardResponse> EnquiryGiftCard(string billerCode, string amount)
    {
        try
        {
            Token = GetOAuthToken();
            var partnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
            var ebaUrl = ConfigurationManager.AppSettings["GiftCardDenoListUrl"].ToString();

            const string jsonData = "{\'ProductCode\':\'\'}";
            var dynamicData = JsonConvert.DeserializeObject<dynamic>(jsonData);
            dynamicData.ProductCode = amount;

            var data = JsonConvert.SerializeObject(dynamicData);
            data = data.Replace("\"", "'");
            writeLog("Inquiry request for gift card : " + data);
            var model = new EnquiryGiftCardRequest(Token.Token, partnerCode, billerCode, data);
            var json = JsonConvert.SerializeObject(model);

            var response = Utils.PostEba(json, ebaUrl);

            writeLog("Eba inquriy response for gift card : " + response);

            if (string.IsNullOrEmpty(response)) return null;

            return JsonConvert.DeserializeObject<EnquiryGiftCardResponse>(response);
        }
        catch (Exception ex)
        {
            return null;
        }
    }

    public async Task<GiftCardsConfirmResponse> ConfirmGiftCard(string txnId, double amount, string billerCode)
    {
        Token = GetOAuthToken();
        var partnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
        var ebaUrl = ConfigurationManager.AppSettings["GiftCardConfirmUrl"].ToString();
        var partnerRefNo = txnId;
        string detail = "{\'Deno\':\'" + amount + "\'}";

        var confirmRequest = new GiftCardsConfirmResquest(Token.Token, partnerCode, partnerRefNo, billerCode, amount, detail);
        var confirmRequestJson = JsonConvert.SerializeObject(confirmRequest);
        writeLog("Eba Confirm Request for gift card :" + confirmRequestJson);
        var response = Utils.PostEba(confirmRequestJson, ebaUrl);

        writeLog("Eba Confirm response for gift card :" + response);

        if (string.IsNullOrEmpty(response))
        {
            return null;
        }

        return JsonConvert.DeserializeObject<GiftCardsConfirmResponse>(response);
    }

    public async Task<EbaConfirmResponse> EbaFlightConfirm(string txnId, string amount, string billerCode, string detail, string Url)
    {
        Token = GetOAuthToken();
        var partnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
        var partnerRefNo = txnId;

        var request = new EbaFlightNotifyRequest(Token.Token, partnerCode, billerCode, partnerRefNo, amount, detail);
        var requestJson = JsonConvert.SerializeObject(request);
        writeLog("Request: " + requestJson);

        var response = Utils.PostEba(requestJson, Url);
        writeLog("Eba Response : " + response);

        if (string.IsNullOrEmpty(response))
        {
            return null;
        }

        return JsonConvert.DeserializeObject<EbaConfirmResponse>(response);
    }

    public GiftCardsConfirmResponse ConfirmMaharMobile(string txnId, double amount)
    {
        Token = GetOAuthToken();
        var partnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
        var billerCode = ConfigurationManager.AppSettings["MaharMobileBillerCode"].ToString();
        var ebaUrl = ConfigurationManager.AppSettings["MaharMobileConfirmUrl"].ToString();
        var partnerRefNo = txnId;
        string detail = "{\'Deno\':\'" + amount + "\'}";

        var confirmRequest = new GiftCardsConfirmResquest(Token.Token, partnerCode, partnerRefNo, billerCode, amount, detail);
        var confirmRequestJson = JsonConvert.SerializeObject(confirmRequest);
        var response = Utils.PostEba(confirmRequestJson, ebaUrl);

        writeLog("Eba Confirm response for MaharMoible :" + response);

        if (string.IsNullOrEmpty(response))
        {
            return null;
        }

        return JsonConvert.DeserializeObject<GiftCardsConfirmResponse>(response);
    }

    public async Task<EnquiryGiftCardResponse> EventEnquiry(string billerCode, string eventId)
    {
        try
        {
            Token = GetOAuthToken();
            var partnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
            var ebaUrl = ConfigurationManager.AppSettings["GiftCardDenoListUrl"].ToString();

            const string jsonData = "{\'type\':\'\',\'eventId\':\'\'}";
            var dynamicData = JsonConvert.DeserializeObject<dynamic>(jsonData);
            var type = ConfigurationManager.AppSettings["MyanPwelTicketList"].ToString();
            dynamicData.type = type;
            dynamicData.eventId = eventId;

            var data = JsonConvert.SerializeObject(dynamicData);
            data = data.Replace("\"", "'");
            var model = new EnquiryGiftCardRequest(Token.Token, partnerCode, billerCode, data);
            var json = JsonConvert.SerializeObject(model);

            var response = Utils.PostEba(json, ebaUrl);

            writeLog("Eba inquriy response for gift card : " + response);

            if (string.IsNullOrEmpty(response)) return null;

            return JsonConvert.DeserializeObject<EnquiryGiftCardResponse>(response);
        }
        catch (Exception ex)
        {
            return null;
        }
    }

    public async Task<GiftCardsConfirmResponse> ConfirmMinTheinKha(string ref1, string ref2, string ref3, string ref4, string ref5, string ref6, string amount, string txnId, string billerCode)
    {
        Token = GetOAuthToken();
        var data = string.Empty;

        const string jsonDataMM = "{\'ServiceId\':\'\',\'AstrologerId\':\'\', \'ProductIds\': [], \'Amount\':\'\', \'Name\':\'\', \'BirthTime\':\'\',\'Gender\':\'\',\'Township\':\'\',\'PhoneNo\':\'\',\'QuestionDetail\':\'\',\'DateOfBirthMM\':\'\'}";
        const string jsonDataEN = "{\'ServiceId\':\'\',\'AstrologerId\':\'\', \'ProductIds\': [], \'Amount\':\'\', \'Name\':\'\', \'BirthTime\':\'\',\'Gender\':\'\',\'Township\':\'\',\'PhoneNo\':\'\',\'QuestionDetail\':\'\',\'DateOfBirthEN\':\'\'}";

        var partnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
        var ebaUrl = ConfigurationManager.AppSettings["GiftCardConfirmUrl"].ToString();

        var service = ref1.Split('/').ToList();
        var astro = ref2.Split('/').ToList();
        var cus = ref3.Split('/').ToList();
        var dob = ref5.Split('/').ToList();

        var isMM = dob.FirstOrDefault();
        if (isMM == "Y")
        {
            var dateMM = new DateMm();
            dateMM.Year = dob[1];
            dateMM.Month = dob[2];
            dateMM.MonthPeriod = dob[3];
            dateMM.Day = dob[4];
            dateMM.DayName = dob[5];

            var dynamicData = JsonConvert.DeserializeObject<dynamic>(jsonDataMM);
            dynamicData.ServiceId = service.FirstOrDefault();
            dynamicData.AstrologerId = astro.FirstOrDefault();
            dynamicData.ProductIds = JToken.FromObject(cus[2].Split(',').ToList());
            dynamicData.Amount = amount;
            dynamicData.Name = astro[2];
            dynamicData.DateOfBirthMM = JToken.FromObject(dateMM);
            dynamicData.BirthTime = cus.LastOrDefault();
            dynamicData.Gender = cus.FirstOrDefault();
            dynamicData.Township = ref4;
            dynamicData.PhoneNo = cus[1];
            dynamicData.QuestionDetail = ref6;

            data = JsonConvert.SerializeObject(dynamicData);
        }
        else
        {
            var dateEn = new DateEn();
            dateEn.Year = dob[1];
            dateEn.Month = dob[2];
            dateEn.Day = dob[3];
            var dynamicData = JsonConvert.DeserializeObject<dynamic>(jsonDataEN);
            dynamicData.ServiceId = service.FirstOrDefault();
            dynamicData.AstrologerId = astro.FirstOrDefault();
            dynamicData.ProductIds = JToken.FromObject(cus[2].Split(',').ToList());
            dynamicData.Amount = amount;
            dynamicData.Name = astro[2];
            dynamicData.DateOfBirthEN = JToken.FromObject(dateEn);
            dynamicData.BirthTime = cus.LastOrDefault();
            dynamicData.Gender = cus.FirstOrDefault();
            dynamicData.Township = ref4;
            dynamicData.PhoneNo = cus[1];
            dynamicData.QuestionDetail = ref6;

            data = JsonConvert.SerializeObject(dynamicData);
        }

        var partnerRefNo = txnId;

        var confirmRequest = new GiftCardsConfirmResquest(Token.Token, partnerCode, partnerRefNo, billerCode, Convert.ToDouble(amount), data);
        var confirmRequestJson = JsonConvert.SerializeObject(confirmRequest);
        writeLog("MinTheinKha Request: " + confirmRequestJson);
        var response = Utils.PostEba(confirmRequestJson, ebaUrl);

        writeLog("Eba Confirm response for MinTheinKha :" + response);

        if (string.IsNullOrEmpty(response))
        {
            return null;
        }

        return JsonConvert.DeserializeObject<GiftCardsConfirmResponse>(response);
    }

    public string GetBillerCode(string taxId)
    {
        if (taxId == ConfigurationManager.AppSettings["MecTelEPinTaxId"]) return ConfigurationManager.AppSettings["MecTelEPinBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["MyTelEPinTaxId"]) return ConfigurationManager.AppSettings["MyTelEPinBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["MPTEPinTaxId"]) return ConfigurationManager.AppSettings["MPTEPinBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["TelenorEPinTaxId"]) return ConfigurationManager.AppSettings["TelenorEPinBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["OoredooEPinTaxId"]) return ConfigurationManager.AppSettings["OoredooEPinBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["MecTelELoadTaxId"]) return ConfigurationManager.AppSettings["MecTelELoadBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["MyTelELoadTaxId"]) return ConfigurationManager.AppSettings["MyTelELoadBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["MPTELoadTaxId"]) return ConfigurationManager.AppSettings["MPTELoadBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["TelenorELoadTaxId"]) return ConfigurationManager.AppSettings["TelenorELoadBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["OoredooELoadTaxId"]) return ConfigurationManager.AppSettings["OoredooELoadBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["MyanmarNetAwaThone"]) return ConfigurationManager.AppSettings["MyanmarNetAwaThoneBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["MyanmarNetData"]) return ConfigurationManager.AppSettings["MyanmarNetDataBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["MyanmarNetPrepaid"]) return ConfigurationManager.AppSettings["MyanmarNetPrepaidBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["HiWiFi"]) return ConfigurationManager.AppSettings["HiWiFiBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["WunZinnMapTaxId"]) return ConfigurationManager.AppSettings["WunZinnCode"];
        if (taxId == ConfigurationManager.AppSettings["TelenorDataPackPinMapTaxId"]) return ConfigurationManager.AppSettings["TelenorDataPackPinCode"];
        if (taxId == ConfigurationManager.AppSettings["PubgUC"]) return ConfigurationManager.AppSettings["PubgUCBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["Flight"]) return ConfigurationManager.AppSettings["FlightBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["MyanPwel"]) return ConfigurationManager.AppSettings["MyanPwelBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["MinTheinKha"]) return ConfigurationManager.AppSettings["MinTeinKhaBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["OnDoctorTaxId"]) return ConfigurationManager.AppSettings["OnDoctorBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["ViuTaxId"]) return ConfigurationManager.AppSettings["ViuBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["CookieTVTaxId"]) return ConfigurationManager.AppSettings["CookieTVBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["XBoxOneTaxId"]) return ConfigurationManager.AppSettings["XBoxOneBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["FlexiblePassTaxId"]) return ConfigurationManager.AppSettings["FlexiblePassBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["PlayStationNetworkTaxId"]) return ConfigurationManager.AppSettings["PlayStationNetworkBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["RazerGoldPinMMKTaxId"]) return ConfigurationManager.AppSettings["0000000000120BillerCode"];
        if (taxId == ConfigurationManager.AppSettings["PlayStationPlusUSTaxId"]) return ConfigurationManager.AppSettings["0000000000121BillerCode"];
        if (taxId == ConfigurationManager.AppSettings["MobileLegendTaxID"]) return ConfigurationManager.AppSettings["MobileLegendBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["GrabMyanmarTaxId"]) return ConfigurationManager.AppSettings["0000000000127BillerCode"];
        if (taxId == ConfigurationManager.AppSettings["SmileCinemaTaxId"]) return ConfigurationManager.AppSettings["SmileCinemaBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["TFitnessTaxId"]) return ConfigurationManager.AppSettings["0000000000126BillerCode"];
        if (taxId == ConfigurationManager.AppSettings["JooxTaxId"]) return ConfigurationManager.AppSettings["0000000000129BillerCode"];
        if (taxId == ConfigurationManager.AppSettings["EasyMicrofinanceTaxId"]) return ConfigurationManager.AppSettings["EasyMicrofinanceBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["iTunesTaxId"]) return ConfigurationManager.AppSettings["iTunesBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["GooglePlayTaxId"]) return ConfigurationManager.AppSettings["GooglePlayBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["MyPlayTaxId"]) return ConfigurationManager.AppSettings["MyPlayBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["SteamWalletTaxId"]) return ConfigurationManager.AppSettings["StemWalletBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["VakokTaxId"]) return ConfigurationManager.AppSettings["VakokBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["SteamWalletSGDMapTaxId"]) return ConfigurationManager.AppSettings["SteamWalletSGDBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["AnandaEPin"]) return ConfigurationManager.AppSettings["AnandaEPinBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["MaharMobileMapTaxId"]) return ConfigurationManager.AppSettings["MaharMobileBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["LarLarKyi"]) return ConfigurationManager.AppSettings["LarLarKyiBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["YTalkTaxId"]) return ConfigurationManager.AppSettings["YTalkBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["HanaMicrofinanceTaxId"]) return ConfigurationManager.AppSettings["HanaMicrofinanceBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["WasoLearnTaxId"]) return ConfigurationManager.AppSettings["WasoLearnBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["myCanalTaxId"]) return ConfigurationManager.AppSettings["myCanalBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["ViberOutTaxId"]) return ConfigurationManager.AppSettings["ViberOutBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["GrabRideTaxId"]) return ConfigurationManager.AppSettings["GrabRideBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["GrabFoodTaxId"]) return ConfigurationManager.AppSettings["GrabFoodBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["ShweStreamTaxId"]) return ConfigurationManager.AppSettings["ShweStreamBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["OnePayTaxId"]) return ConfigurationManager.AppSettings["OnePayBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["AtomDataPackTaxId"]) return ConfigurationManager.AppSettings["AtomDataPackBillerCode"];
        if (taxId == ConfigurationManager.AppSettings["SayaTaxId"]) return ConfigurationManager.AppSettings["SayaBillerCode"];

        return string.Empty;

    }

    public string GetMerchantName(string paymentType)
    {
        if (paymentType == "MSP") return "Mandalay-Smart-Pay";
        if (paymentType == "MPU") return "Myanmar-Payment-Union";
        if (paymentType == "OK") return ConfigurationManager.AppSettings["OkDollarMerchantName"];
        if (paymentType == "SaiSaiPay") return ConfigurationManager.AppSettings["SaiSaiPayMerchantName"];
        if (paymentType == "CitizenPay") return ConfigurationManager.AppSettings["CitizenPayMerchantName"];
        if (paymentType == "KBZPay") return ConfigurationManager.AppSettings["KBZPayMerchantName"];
        if (paymentType == "CBPay") return ConfigurationManager.AppSettings["CBPayMerchantName"];
        if (paymentType == "AYAPay") return ConfigurationManager.AppSettings["AYAPayMerchantName"];
        if (paymentType == ConfigurationManager.AppSettings["PaymentType_APlus"]) return paymentType;
        return string.Empty;
    }

    public static string GetShortUrl(string longUrl)
    {
        var shortUrl = string.Empty;
        var shortUrlUser = ConfigurationManager.AppSettings["ShortUrlUser"];
        var shortUrlToken = ConfigurationManager.AppSettings["ShortUrlToken"];
        var shortUrlApi = ConfigurationManager.AppSettings["ShortUrlApi"];
        try
        {
            var jsonData = "{\"LongUrl\":\"" + longUrl + "\"}";
            var body = new StringContent(jsonData, Encoding.UTF8, "application/json");

            var client = new HttpClient
            {
                DefaultRequestHeaders = { { "ShortUrlUser", shortUrlUser }, { "ShortUrlToken", shortUrlToken } }
            };

            using (var response = client.PostAsync(new Uri(shortUrlApi), body).Result)
            {
                var result = response.Content.ReadAsStringAsync().Result;
                var urlResponse = JsonConvert.DeserializeObject<dynamic>(result);

                if (urlResponse != null)
                {
                    shortUrl = urlResponse.ShortUrl;
                }
            }
        }
        catch (Exception e)
        {
            throw e;
        }

        return shortUrl;
    }

    public bool GetExistSession(string merchantId, string clientId, string clientsecrete, out string token, out string sessionId)
    {
        token = string.Empty;
        sessionId = string.Empty;

        var path = ConfigurationManager.AppSettings["SessionPath"];
        var ts = ConfigurationManager.AppSettings["TokenLifeTime"];
        if (!string.IsNullOrEmpty(path))
        {
            writeLog("Path exist.");
            if (File.Exists(path + merchantId + ".txt"))
            {
                var lines = File.ReadAllLines(path + merchantId + ".txt");

                sessionId = lines.FirstOrDefault();
                if (!string.IsNullOrEmpty(sessionId))
                {
                    writeLog("Session Id : " + sessionId);
                    if (!string.IsNullOrEmpty(lines[1]))
                    {
                        token = lines[1];
                        var generatedate = Convert.ToDateTime(lines[2]);
                        if (generatedate.AddHours(Convert.ToInt64(ts)) > DateTime.Now)
                        {
                            writeLog("Session Id not expiry yet : " + generatedate);
                            var oldClientId = lines[3];
                            var oldClientSecrete = lines[4];
                            if (oldClientId == clientId && oldClientSecrete == clientsecrete)
                            {
                                writeLog("Same credential");
                                return true;
                            }
                        }
                    }

                }
            }

        }

        return false;
    }

    public string B2BCancel(string reqXml)
    {
        writeLog("$$$$$$$$$$$$$$$ B2B Order Cancel $$$$$$$$$$$$$$$");
        writeLog("REQ XML : " + reqXml);

        string rescode = string.Empty;
        string resdecs = string.Empty;
        string txnId = string.Empty;
        string taxId = string.Empty;

        try
        {
            Hashtable ht = Utils.getHTableFromXML(reqXml);

            if (!IsValidateB2BCancelReq(ht, out rescode, out resdecs, out txnId, out taxId))
            {
                return Utils.getErrorRes(rescode, resdecs);
            }

            else
            {
                ConfirmB2BManager confirmBillerManager = new ConfirmB2BManager();
                string confirmRes = confirmBillerManager.B2BOrderCancelV2(txnId, taxId);
                return confirmRes;

            }
        }
        catch (Exception ex)
        {
        }
        return "";
    }

    bool IsValidateB2BCancelReq(Hashtable ht, out string code, out string desp, out string txnId, out string taxId)
    {

        code = "00";
        desp = "Success";
        taxId = string.Empty;
        txnId = string.Empty;

        if (!ht.ContainsKey("Version"))
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }

        if (!ht.ContainsKey("TimeStamp"))
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }

        if (!ht.ContainsKey("MessageID"))
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }

        if (!ht.ContainsKey("Email"))
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Email> Tag");
            return false;
        }


        if (!ht.ContainsKey("Password"))
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Password> Tag");
            return false;
        }


        if (!ht.ContainsKey("TaxID"))
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TaxID> Tag");
            return false;
        }
        else
        {
            taxId = ht["TaxID"].ToString();
        }

        if (!ht.ContainsKey("TxnID"))
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TxnID> Tag");
            return false;
        }
        else
        {
            txnId = ht["TxnID"].ToString();
        }

        if (!ht.ContainsKey("TerminalId"))
        {
            code = "06";
            desp = "Invalid Request.";
            writeLog("Error in Validation : Missing XML <TerminalId> Tag");
            return false;
        }


        if (!ht.ContainsKey("DeviceUID"))
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <DeviceUID> Tag");
            return false;
        }


        if (!ht.ContainsKey("Token"))
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Token> Tag");
            return false;
        }

        return true;

    }

    private string GetInquiryForATOMDataPackage(string taxId, string billerCode)
    {
        var rescode = string.Empty;
        var resdecs = string.Empty;
        var errmsg = string.Empty;

        writeLog("ATOM DataPackage inquiry started with TaxId : " + taxId);

        DataSet ds = null;
        if (_agentWCF.getBillerDetailByTaxId(taxId, out ds, out errmsg))
        {
            if (ds.Tables[0].Rows.Count > 0)
            {
                if (!string.IsNullOrEmpty(ds.Tables[0].Rows[0]["SOURCE"].ToString()))
                {
                    billerSource = ds.Tables[0].Rows[0]["SOURCE"].ToString();
                }
            }
        }
        else
        {
            rescode = "01";
            resdecs = "Invalid Services";
            writeLog("Error in ATOM Data Package Inquiry : " + resdecs);
            return Utils.getErrorRes(rescode, resdecs);
        }

        writeLog("BillerSource is : " + billerSource);

        if (string.IsNullOrWhiteSpace(billerSource))
        {
            rescode = "06";
            resdecs = "Invalid Service due to empty Provider";
            writeLog("Error in ATOM Data Package Inquiry : " + resdecs);
            return Utils.getErrorRes(rescode, resdecs);
        }

        if (billerSource.ToUpper() == BillerConstants.GET)
        {
            TelCoGETManager telCoGetManager = new TelCoGETManager();
            var packageList = telCoGetManager.InquiryForDataPack(TelCoProviderEnum.ATOM.ToString());

            if (packageList.Count == 0)
            {
                writeLog("Error in ATOM Data Package Inquiry Res: GET response is empty");
                return Utils.getErrorRes("06", "Processing is failed because of internal server error, please try agian.");
            }

            var packages = new List<BillerProduct>();

            foreach (var package in packageList)
            {
                var pack = new BillerProduct();
                pack.code = package.Code;
                pack.description = package.Name;
                pack.billingAmount = package.Price.ToString(); 
                pack.Transactionamount = package.Price.ToString(); 
                pack.PartnerAmount = package.Price.ToString(); 
                packages.Add(pack);
            }

            var responseModel = new ProductEnquiryResponse();
            responseModel.ErrorCode = "00";
            responseModel.ErrorMessage = "Success";
            responseModel.BillerCategory = "Data Plan";
            responseModel.BillerCode = "TelenorDataPack";
            responseModel.BillerName = "ATOMDataPack";
            responseModel.BillerCurrency = "MMK";
            responseModel.PartnerCurrency = "MMK";
            responseModel.TransactionCurrency = "MMK";
            responseModel.billerProduct = packages;

            string responseString = JsonConvert.SerializeObject(responseModel);
            writeLog("GET ATOM Data Package Inquiry Response: " + responseString);

            return responseString;
        }
        else if (billerSource.ToUpper() == BillerConstants.EBA)
        {
            return GetInquiryForEBA(taxId,billerCode);
        }
        else
        {
            writeLog("Invalid ATOM data package provider!");
            return Utils.getErrorRes(NearMeResponseCode.InvalidReq, "Invalid ATOM data package provider!");
        }
    }

    private string GetInquiryForEBA(string taxId,string billerCode)
    {
        writeLog("EBA DataPackage inquiry started with TaxId : " + taxId);

        Token = GetOAuthToken();
        ProductEnquiryRequest request = new ProductEnquiryRequest()
        {
            Token = Token.Token,
            BillerCode = billerCode,
            PartnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString()
        };
        string url = ConfigurationManager.AppSettings["EbaProductListUrl"].ToString();
        string productListUrl = string.Format(url, request.Token, request.PartnerCode, request.BillerCode);
        var client = new HttpClient();

        var httpResponseMessage = client.GetAsync(productListUrl).Result;

        if (httpResponseMessage.StatusCode == HttpStatusCode.OK)
        {
            var response = httpResponseMessage.Content.ReadAsStringAsync();
            writeLog(string.Format("GetProductList Res: {0}", response.Result));
            return response.Result;
        }
        return string.Empty;
    }
}
